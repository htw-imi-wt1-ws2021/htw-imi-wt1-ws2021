<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSS Processing on Documentation for our Projects and Web Handbook</title><link>/webhandbook/css_processing/</link><description>Recent content in CSS Processing on Documentation for our Projects and Web Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/webhandbook/css_processing/index.xml" rel="self" type="application/rss+xml"/><item><title>1 History and Terminology</title><link>/webhandbook/css_processing/_1_terminology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/css_processing/_1_terminology/</guid><description>History CSS processors have existed for quite a while. The first release of the popular Sass processor was in 2006! CSS is a powerful and versatile language to describe the appearance of web pages but lacks features from other programming languages to increase productivity and reduce redundancies. However, some shortcomings of the language have been addressed in recent years, and features that once could only be achieved through CSS processors are now available in the language itself.</description></item><item><title>2 Authoring</title><link>/webhandbook/css_processing/_2_authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/css_processing/_2_authoring/</guid><description>As mentioned in the previous chapter, the CSS specification has significantly caught up with the feature set that processing tools provide today. Features such as variables, color mixing, importing, or mathematical operations can all be used directly in the browser with the added benefit of being dynamically changeable.[2]
Still, there are CSS processor features that can immensely help with writing nice code and that have not made it in the CSS spec.</description></item><item><title>3 Optimisation</title><link>/webhandbook/css_processing/_3_optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/css_processing/_3_optimisation/</guid><description>In addition to the features that support developers in designing stylesheets, there are also features of CSS processors that optimize existing CSS for speed and browser support.
Minification The probably most popular CSS processing feature is minification. Most programming languages include characters that are not strictly part of the syntax but increase legibility. This means whitespace characters primarily, and to a lesser extent, the variable names a developer has chosen. Most CSS minifiers strip away comments and whitespace characters, which can lead to a reduction in file size up to 50%.</description></item><item><title>4 Popular Tools</title><link>/webhandbook/css_processing/_4_popular_tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/css_processing/_4_popular_tools/</guid><description>There are four very popular CSS processing tools. They all support some of the features mentioned above, but none of them support them all. Further, some of them can be used together, but again not all.
Sass Sass[10] is the oldest of the four presented tools, with the initial release in 2006. It has a large set of features that extend the CSS syntax, like nesting, functions or variables, and supports two syntaxes.</description></item><item><title>5 Integration and Considerations</title><link>/webhandbook/css_processing/_5_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/css_processing/_5_integration/</guid><description>Integration The presented processing tools all come with command-line interfaces, which take multiple input files and usually a config to generate or transform CSS.
Usually, these transformations are done in a more complex build pipeline for the entire project, using a bundler or task-runner. Especially Sass and Less have multiple implementations in different languages. Which one is most suitable often depends on the bundler or task-runner that is being used.</description></item><item><title>6 Literature</title><link>/webhandbook/css_processing/_6_literature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/css_processing/_6_literature/</guid><description>Deconfusing Pre- and Post-processing — https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3 Still using CSS preprocessors in 2020? — https://medium.com/@bartsis/still-using-css-preprocessors-in-2020-aa893a476bc4 How to calculate percent minus px in SASS ? — https://www.geeksforgeeks.org/how-to-calculate-percent-minus-px-in-sass/ Nesting Style Rules — https://sass-lang.com/documentation/style-rules#nesting css-modules — https://github.com/css-modules/css-modules PostCSS Color Hex Alpha Plugin — https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-color-hex-alpha autoprefixer — https://github.com/postcss/autoprefixer Is Vendor Prefixing Dead? — https://css-tricks.com/is-vendor-prefixing-dead/ Vendor Prefix - MDN — https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix Sass: Syntactically Awesome Style Sheets — https://sass-lang.com/ Less CSS — https://lesscss.org/ CSS Style Syntax — https://stylus-lang.</description></item></channel></rss>