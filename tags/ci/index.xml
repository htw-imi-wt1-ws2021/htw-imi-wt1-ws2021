<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI on Documentation for our Projects and Web Handbook</title><link>/tags/ci/</link><description>Recent content in CI on Documentation for our Projects and Web Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/tags/ci/index.xml" rel="self" type="application/rss+xml"/><item><title>1 CI/CD Definition</title><link>/webhandbook/ci_cd/_1_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/ci_cd/_1_/</guid><description>1 Ansatz von CI/CD: Definition Mit dem CI/CD-Ansatz kann die Häufigkeit der Verteilung von Anwendungen durch die Einführung von Automatisierung auf der Ebene der Anwendungsentwicklungsschritte er- höht werden. Die Hauptkonzepte im Zusammenhang mit dem CI/CD-Ansatz sind die kontinuierliche Integration, die kontinuierliche Verteilung und die kontinuierliche Bereitstellung. Der CI/CD-Ansatz bietet eine Lösung für die Probleme, die sich für Entwicklungs- und Einsatzteams aus der Integration neuer Programmcodesegmente ergeben. Dieser CI/CD-Ansatz garantiert eine kontinuierliche Automatisierung und Übersicht über den gesamten Lebenszyklus von Anwendungen, von der Integrations- und Testphase bis hin zur Verteilung und Bereitstellung.</description></item><item><title>2 CI/CD-Pipeline</title><link>/webhandbook/ci_cd/_2_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/ci_cd/_2_/</guid><description>2 Elemente einer CI/CD-Pipeline Die Phasen, aus denen sich eine CI/CD-Pipeline zusammensetzt, sind separate Untermen- gen von Aufgaben, die in dem, was wir als Pipeline-Phase bezeichnen, zusammengefasst sind. Hier sind die häufigsten Pipeline-Phasen:
Erstellung Test Einführung Bereitstellung Validierung und Konformität 2.1 Erstellung Die Erstellung ist das erste Element einer CI/CD-Pipeline, ihre Hauptaufgabe ist das Kompilieren der Anwendung.
2.2 Test Der Test ist ein wichtiger Bestandteil einer CI/CD-Pipeline. Seine wichtigste Aufgabe ist es, den Code zu testen.</description></item><item><title>3 Unterschied zwischen CI und CD</title><link>/webhandbook/ci_cd/_3_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/ci_cd/_3_/</guid><description>3 Der Unterschied zwischen CI und CD Continuous Integration (CI) und Continuous Deployment (CD) sind zwei moderne Ent- wicklungspraktiken, die von den Entwicklern häufig genutzt werden, um häufige Code- änderungen bereitzustellen. Während CI für Continuous Integration steht und der Prozess recht einfach ist, bedeutet CD Continuous Delivery oder Deployment. Von der Integration und dem Testen bis zur Auslieferung und Bereitstellung sind CI/CD die beiden wichtig- sten Konzepte im Entwicklungszyklus von Anwendungen.</description></item><item><title>4 CI/CD-Werkzeuge</title><link>/webhandbook/ci_cd/_4_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/ci_cd/_4_/</guid><description>4 CI/CD-Werkzeuge Es gibt heutzutage eine ganze Menge Werkzeuge für CI/CD. In diesem Kapitel werden wir einige der besten Werkzeuge nennen.
Jenkins Bitbucket Travis CI GitLab 4.1 Jenkins Jenkins ist ein Open-Source-Tool zur kontinuierlichen Integration, das in Java entwickelt wurde. Bei jeder Änderung des Codes einer Anwendung im Konfigurationsmanager über- nimmt Jenkins automatisch die Aufgabe, die Anwendung neu zu kompilieren und zu te- sten. Für diesen zweiten Schritt integriert Jenkins das Open-Source-Testframework von JUnit.</description></item><item><title>5 Beispiel einer Pipeline</title><link>/webhandbook/ci_cd/_5_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/ci_cd/_5_/</guid><description>5 Beispiel einer Pipeline (mit GitLab) In diesem Kapitel wird ein Beispiel über die Einrichtung einer Pipeline auf Gitlab vorgestellt.
5.1 Installieren des Gitlab-Runners unter Ubuntu GitLab-Runner ist eine Anwendung, die mit GitLab CI/CD zusammenarbeitet, um Auf- träge in einer Pipeline auszuführen. Die Applikation kann unter folgenden URL herunter- laden werden:
Herunderladen der GitLab-Runner-Installationsdatei für Ubuntu-OS:
curl -LJO &amp;quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/ gitlab-runner_amd64.deb&amp;quot; Herunterladen der Gitlab-Runner-Installationsdatei: GitLab-Runner installieren:
sudo dpkg -i gitlab-runner_amd64.deb Installieren des Gitlab-Runners: Überprüfung der installierten Version:</description></item><item><title>6 Literatur/References</title><link>/webhandbook/ci_cd/_6_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webhandbook/ci_cd/_6_/</guid><description>6 Literatur/References Die Verfassung dieses Buches werden durch die folgenden Quellen unterstützt:
https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment https://www.splunk.com/de-de/data-insider/what-is-ci-cd-pipeline.html https://semaphoreci.com/cicd https://www.redhat.com/en/topics/devops/what-cicd-pipeline https://www.journaldunet.fr/web-tech/guide-de-l-entreprise-digitale/1443814-gitlab-tout-savoir-sur-la-plateforme-de-devops-open-source/ https://www.redhat.com/fr/topics/devops/what-is-ci-cd https://www.journaldunet.fr/web-tech/guide-de-l-entreprise-digitale/1443820-jenkins-logiciel-star-de-l-integration-continue-open-source-gratuit/ https://www.thedigizones.com/blog/what-is-continuous-integration-ci-continuous-deployment-cd/</description></item></channel></rss>