[{"uri":"/projects/_blueprint/","title":"Blueprint-Projekt","tags":["projekt0"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/_mystuff/","title":"MyStuff","tags":["projekt1","MyStuff"],"description":"","content":"1 Abstract Das Projekt \u0026ldquo;MyStuff\u0026rdquo; ist eine Web-Applikation, gerichtet an Student:innen. Vorbei ist die Zeit wo man als Student verschiedene Programme im Blick haben musste, um sich selbst zu organisieren und um keine Frist(en) zu verpassen. MyStuff ist ein zentraler Platz für das Studium bzw. für die Module eines gewählten Studiengangs, wo wichtige Dokumente, Termine und Quellen eigenständig zusammengetragen werden.\n1.1 Teammitglieder Jördis Liermann - 0576959\nNguyen Xuan Bach Do - 0556341\nAlain Ngoufack Nguefack - 0557214\nDominic Engel - 0576863\n1.2 Technologien Für die Entwicklungsphase hat sich das Team auf die folgenden Technologien geeinigt:\n Für das Backend wird die Node.JS Umgebung verwendet. Dazu wird das Framework Express.JS genutzt, um eine REST-API zu bauen. Für die Entwicklung des Frontends wird das Framework React.JS verwendet, da der Großteil des Teams bereits Erfahrung mit diesem Framework hat. Dadurch können zeitaufwendige Schritte bei der Einarbeitung eingespart werden. Das Team hat sich für eine No-SQL-Datenbank entschieden, um Daten für die Webanwendung zu speichern.  Neben den vier fundamentalen Operationen persistenter Datenbankanwendung, auch bekannt unter dem Akronym CRUD, wird unsere Web-Applikation eine Art Tag-Management bieten, unter dem es möglich sein wird, eigene Tags zu erstellen.\n1.3 Ziele Die Applikation ermöglicht es Student:innen Module hinzuzufügen und zu bearbeiten, um so das Studium selbst zu organisieren. Zum einen können innerhalb eines Moduls wichtige Vorlesungsfolien mit Informationen versehen, hochgeladen und wieder gelöscht werden. Auch ist es möglich, sich selbst ToDos zu erstellen. Diese können dann eigenständig mit Informationen versehen und terminiert werden. Ist ein Todo fertig bearbeitet oder der Termin abgelaufen, kann es auch wieder gelöscht werden. Wichtige Quellen oder Referenzen wie Links zu Webseiten können ebenfalls hinzugefügt und wieder gelöscht werden. Das Spannende hierbei ist, dass der Benutzer beim Hinzufügen von externen Quellen diese automatisch mit einem Tag versehen werden. Anschließend kann der Benutzer dann nach Tags filtern und bekommt eine Liste von Quellen zu einem bestimmten Tag. Die hochgeladenen Daten werden dabei global in einer Datenbank gespeichert und sind jederzeit abrufbar.\n1.4 Herausforderungen In unserer Web-Applikation MyStuff wird es möglich sein, Links zu externen Webseiten zu speichern - ähnlich wie das Speichern von Lesezeichen bei Google Chrome oder Mozilla Firefox. Doch strebt das Team danach, diese externen Quellen mit Tags automatisch zu kategorisieren! Der Benutzer hat die Möglichkeit neue Tags zu erstellen. Unter einem Tag beschreibt der Benutzer weitere Schlagwörter, die diesen Tag definieren sollen.\nZum Beispiel:\nUnter #programming könnten sich folgende Schlagwörter befinden:\n variables data types loop class interface  Das spannende daran ist, dass der Benutzer die selbst erstellten Tags nach Belieben definieren kann. Ein Benutzer mit weit mehr Erfahrungen in der Softwareentwicklung würde eventuell nach anderen Schlagwörtern filtern wollen als ein Anfänger. Speichert ein Benutzer nun einen Link zu einer Webseite, durchsucht ein Algorithmus den HTML-Body der Webseite nach diesen Schlagwörtern. Werden diese gefunden und es werden bspw. (Schlagwörter \u0026gt; 15) gefunden, kategorisiert der Algorithmus den Link zu einem der definierten Tags.\nBei MyStuff kann der Benutzer dann nach Tags filtern und bekommt eine Liste der externen Quellen zu einem bestimmten Tag. Der Benutzer kann so bspw. bei einer Recherche zu verschiedenen Themen schnell Links speichern und abrufen.\n1.5 Link zum Projekt Das Projekt ist unter folgendem Link zu finden:\nMyStuff Webapplikation\n1.6 Entwurf Vor der Umsetzung des Projektes wird zunächst eine Liste mit den Features erstellt. Hierfür wurde bei MyStuff eine sogenannte User Story Map verwendet. Dabei werden zunächst verschiedene Aktivitäten (grüne Post-Its) festgelegt, welche eine Art Kategorie bilden. Anschließend werden dieser Aktivität weitere Teilschritte zugeordnet (gelbe Post-Its). Beispielsweise gehören zu der Aktivität: Module bearbeiten, die Unterpunkte Modul erstellen, Modul löschen, Module sortieren (z. B. nach Semester) und Module priorisieren.\nAnschließend werden die Aktivitäten nach Zeit sortiert, d.h. je weiter links eine Aktivität steht, desto früher soll diese bei der Entwicklung umgesetzt werden. Die einzelnen Teilschritte der Aktivität werden dabei auch nach ihrer Priorität sortiert - je weiter oben, desto wichtiger ist diese. Als letzter Schritt wird eine rote Linie durch die User Story Map gezogen, also gelben Post-Its, welche sich oberhalb dieser Linie befinden, müssen in der fertigen Anwendungen vorhanden sein. Die verbleibenden Features werden erst implementiert, wenn alle Features oberhalb der roten Linie fertig sind und noch genügend Ressourcen für eine Weiterentwicklung vorhanden sind.\nNachdem alle Features der Anwendungen definiert wurden, wird als nächster Schritt ein erster Entwurf der Oberfläche der Web-App erstellt. Für die Erstellung der MyStuff-Mockups wurde das Prototyping-Tool Figma verwendet.\n(siehe auch https://www.figma.com/file/fRpANngWEGEqgV2Gkxv8xi/Bach-project?node-id=0%3A1)\nDie Abbildung weiter unten zeigt die Startseite, welche der Nutzer angezeigt bekommt, nachdem sich dieser einloggt. Hier befindet sich auf der linken Seite eine Übersicht über alle Module. Daneben befinden sich alle Informationen über das momentan aktive Modul. Diese sind unterteilt in drei Reitern. Eine ToDo-Liste für das Modul, wo der Benutzer Abgaben sowie Termine für das Modul festhalten kann. Um eine Übersicht über die bereits erledigten und ausstehenden ToDos zu haben, können diese in drei verschiedenen Spalten unterteilt werden:\n ToDo - enthält Aufgaben die noch anstehen Doing - enthält Aufgaben, die gerade in Bearbeitung sind Done - enthält Aufgaben, welche erledigt sind  Zusätzlich zu der ToDo-Liste ist es bei MyStuff auch möglich, Daten zu jedem Modul hochzuladen, dazu zählen z. B. Vorlesungsfolien, Übungsaufgaben oder Mitschriften.\nNeben den Daten zu dem Modul kann der Benutzer auch Links wie beispielsweise Beweise oder Literaturempfehlungen in der MyStuff-App speichern. Diese erhalten bei der Erstellung automatisch Tags (siehe auch 1.3. Herausforderung) passend zu dem Inhalt der Links. Der Benutzer kann Tags zu den Links auch manuell anpassen. Die Links werden mit Tags versehen, damit der Benutzer diese mit einem Filter sortieren kann um so schneller den richtigen Link zu finden (siehe Abb. 3).\n1.7 Umsetzung 1.7.1 Backend Wie bereits in Abschnitt 1.2 erwähnt, wird das Backend in Node.JS-Entwicklungsumgebung mit Hilfe des Express.JS-Framework entwickelt. Die NoSql-Datenbank wurde mit Hilfe von MongoDB-Datenbank (https://www.mongodb.com/) auf der Cloud bereitgestellt.\nFolgende Abbildung stellt eine Übersicht über die Verzeichnishierarchie des Backends dar:\nDas Backend wird wie folgt aufgeteilt:\n backend-Verzeichnis enthält alle Quellcodes des MyStuff-Project, die für die Ausführung des Projekts benötigt werden. node_modules enthält Quellcodes der verwendeten Module bzw. Bibliotheken, die in package.js-Datei definiert werden. package.json wird benutzt, um installierte Abhängigkeiten (Dependencies) zu überprüfen. Außerdem enthält diese Datei mehrere nützlichen Skripte, die z.B für Start, Build oder Test des Projekts verwendet werden. models-Verzeichnis enthält alle Datenschema-Schnittstelle der Datenbank. Mit dem Schema werden Felder, die in jedem Dokument sowie deren Validierungsanforderungen und Standardwerte definiert. routes-Verzeichnis enthält die Kontrolle Komponente des Backends. Alle REST-Anfragen werden hier entsprechend der Klasse gefiltert und verwaltet. app.js-Datei enthält die Start-Skripte des Backends. Hierzu werden die Express.JS-Framework als auch mongoose-Modul, das für die Anbindung der MongoDB-Datenbank erforderlich ist, definiert und aufgerufen. Außerdem werden hier die Umleitungen der HTTP-Anfragen zu der entsprechenden Kontrolle-Datei in der routes-Verzeichnis definiert.  Nach der erforderlichen Konfiguration des Backends in der app.js-Datei werden Datenschema im models-Verzeichnis definiert. Insgesamt wurde drei Modellen für drei Instanzen im Projekt umgesetzt: User, Todo und Module. Folgende Diagramm zeigt die Beziehungen zwischen den Modellen.\nNach der Definition der Datenmodellen werden die Route umgesetzt. Im folgenden werden einen Überblick über die erforderlichen Routen, ihre Aufgaben und die HTTP-Methode, die für den Zugriff auf sie verwendet wird.\nServices in der Users-Route: Services in der Modules-Route: Services in der Todos-Route: Die Backend-Implementierung ist unter folgendem Link zu finden: Backend-Implementierung\n1.7.2 Frontend Gemäß Abschnitt 1.2 wird für die Entwicklung der Benutzeroberfläche das Framework React.JS benötigt. Um eine Entwicklungsumgebung mit React zu erstellen, kommt das Tool Create React App in Einsatz. Dieses Tool wird mit NPM (Node Package Manager) von Node.js installiert. Als erstes wird wie die Umsetzung des Backends die Aufteilung der Komponente durchgeführt. Dadurch kann die Wiederverwendbarkeit des Codes möglichst maximieren und die Wartung des Projekts einfacher durchführen.\nFolgende Abbildung veranschaulicht die Verzeichnishierarchie des Frontends:\n node_modules enthält den Quellcode des React-Frameworks und verwendeten Module bzw. Bibliothek, die in package.json definiert werden. public enthält HTML-Dateien und Komponente wie Bilder, die clientseitig gerendert werden sollen. src ist der Ort, wo die Projektentwicklung stattfindet. Es enthält alle Komponente des Projekts, die in Javaskript geschrieben werden. Es beinhaltet Login-Komponente und Komponente vom Mainscreen wie Modules, Todos, Links. Darüber hinaus liegen unter dem css-Verzeichnis die zu den Komponente zugehörigen CSS-Dateien. Die index.js-Datei ist der Startpunkt beim Kompilieren der Anwendung, bei dem die App.js-Komponente aufgerufen wird. package.json wird für die Definition der installierten Abhängigkeiten verwendet. package-lock.json wird anhand der Informationen in package.son automatisch generiert.  Die Art und Weise, wie Komponenten in React miteinander anhängig sind, sind state (Zustand) und props (Eigenschaft). Eine Komponente besitzt ihr eigenes Zustand bzw. Instance-Daten. z.B. User-Komponente besitzt Zustand wie username: String. Information zwischen Komponenten können mittels props transportiert werden. z.B. Die Mainscreen-Komponente muss z.B. in der Lage sein, die geloggte Information der User-Komponente anzuzeigen. Daher kann die User-Komponente diese Information an die Mainscreen-Komponente weitergeben, die dann in der Mainscreen-Komponente mit Hilfe von props. zugänglich sein wird. In der folgenden Abbildung ist eine Übersicht über die Komponente von der Main-Seite und ihre Beziehungen gegeben. Die wichtigen Daten im Zustand jeder Komponente und die props, die von einer Komponente zur anderen übertragen werden, sind ebenfalls abgebildet.\nKomponenten des Main-Screens und ihre Beziehungen: Die komplette Implementation des Frontends ist auf Github zu finden: Frontend-Implementierung\nIm Folgenden sind Bilder von Seiten sehen, die für das Frontend implementiert wurden:\nWelcome-Seite: Login-Seite: Main-Seite in Todos-Tab: Main-Seite in Links-Tab: 1.8 CI/CD Lorem Ipsum\n1.9 JavaScript End to End Testing Framework: Cypress Die Tests wurden mit Cypress durchgeführt. Cypress ist ein Framework, mit dem End-to-End-Tests durchgeführt werden können.\n1.9.1 Installation Um Cypress nutzen zu können, muss es zunächst installiert werden. Die Installation erfordert im ersten Schritt die lokale Installation von Node. Danach muss cypress in dem Projekt, in dem man die Tests schreiben möchte, generiert werden. In unserem Fall wurde cypress im Frontend installiert, da mit cypress das Frontend getestet werden kann. Mit diesem Befehl npm install cypress \u0026ndash;save-dev kann cypress automatisch in das gewünschte Projekt installiert werden.\nDie Installation generiert automatisch einen Ordner namens cypress im Projekt neu: Die Tests werden im Ordner Integration von cypress geschrieben: Struktur eines Tests aus Cypress:\ndescribe(\u0026quot;Abmelden\u0026quot;, function () { before(() =\u0026gt; { cy.visit(\u0026quot;https://my-stuff-htw.herokuapp.com/login\u0026quot;); }); describe('Benutzer auslogen', function () { it(\u0026quot;logout -\u0026gt; Alain\u0026quot;, function () { cy.get(':nth-child(1) \u0026gt; a \u0026gt; #forward').click(); }); }); }); 1.9.2 Ausführung von Tests: Die Ausführung der Tests wird über den folgenden Befehl durchgeführt: npx cypress open. Nach der Ausführung dieses Befehls sieht man die Benutzeroberfläche von Cypress mit den verschiedenen geschriebenen Tests.\nFolgende Tests wurden geschrieben: new-modul-add, abmelden, create-user, login Es ist möglich, die Tests einzeln auszuführen oder alle Tests direkt auszuführen. Die Ergebnisse bleiben gleich, da die Tests entweder bestehen oder bei einem Fehler fehlschlagen.\nAuf diesem Bild ist zu bemerken, dass die ausgeführten Tests alle fehlerfrei durchlaufen werden. Erfolgreiche Tests sind grün markiert, während fehlgeschlagene Tests rot markiert sind.\n2 Fazit "},{"uri":"/projects/_oishi/","title":"Oishi","tags":["projekt2"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/","title":"Projekte","tags":["projekte"],"description":"","content":"Projekt 0 Blueprint-Projekt\nProjekt 1 MyStuff\nProjekt 2 Oishi\nProjekt 3 ToDog\nProjekt 4 Trackr\nProjekt 5 Zettelkasten\n"},{"uri":"/projects/_todog/","title":"ToDog","tags":["projekt3"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/_trackr/","title":"Trackr","tags":["projekt4"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/webhandbook/","title":"Webhandbook","tags":["webhandbook"],"description":"","content":"Kapitel in alphabetischer Reihenfolge  APIS Authentication CI/CD CSS Processing Databases Microservices Node.js Programming Languages React UI/UX Web Frameworks Website Rendering  "},{"uri":"/projects/_zettelkasten/","title":"Zettelkasten","tags":["projekt5"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/webhandbook/databases/_3_/","title":"","tags":[],"description":"","content":"NoSQL databases Web services that operate in real time and process diverse datasets pose a challenge when it comes to storage (Kaufmann and Meier, 2019). In these cases, NoSQL databases can provide a solution: They are easily scalable, allow fast querying and are said to make work for developers easier (Schaefer, 2021). Unlike what one might expect, the “No” in NoSQL stands for “not only”.\nThe rigid structures of traditional relational databases can be limiting for certain kinds of data and sometimes not all features of relational databases are needed (Lai, 2009). For example, when handling Big Data, processing needs to be extremely fast – these kinds of volumes are often not easy to handle with traditional relational database systems (Lai, 2009).\nDifferent kinds of NoSQL databases exist: They can be for example based on documents, graphs, key-value pairs or tuples. Each of these has advantages when applied in certain use cases. In the following, three important kinds (Kamaruzzaman, 2021) of NoSQL databases will be introduced.\nMongoDB MongoDB is a document-based database program. For many developers, it is the go-to database solution for modern web applications, for example in conjunction with frontend technologies Vue.js, Angular or React. MongoDB can be used under the Server Side Public License (SSPL) which was introduced by the MongoDB Inc. itself – although it is intended as an open source license, it is not recognized as such by the Open Source Initiative.\nCassandra Cassandra is a so-called Wide Column Store, a database that uses columns and rows like a relational database but the names and format of the columns is not fixed and can vary. It was originally developed by Facebook as a new search feature but has since moved on to be developed as an open source project by the Apache Foundation (Strauch et al., 2011). One of Cassandra\u0026rsquo;s main features is the ability to distribute data over different nodes and data centers. It is therefore designed to manage large amounts of data.\nRedis In Redis, all data is stored in-memory which leads to read and write operations being executed at high speed (Da Silva and Tavares, 2015). The main idea behind this is that Redis combines functionalities as a data store and a cache. It stores key-value pairs and is mainly used for applications where data changes often and its size fits the available memory. Since Redis makes use of a range of data types, such as “Strings, Hashes, Lists, Sets, Sorted Sets, Bitmaps and HyperLogLogs” (Da Silva and Tavares, 2015, p. 1), the data to store should also fit the data types.\n"},{"uri":"/webhandbook/ci_cd/_1_/","title":"1  CI/CD Definition","tags":["CI","CD"],"description":"CI/CD","content":"1 Ansatz von CI/CD: Definition Mit dem CI/CD-Ansatz kann die Häufigkeit der Verteilung von Anwendungen durch die Einführung von Automatisierung auf der Ebene der Anwendungsentwicklungsschritte er- höht werden. Die Hauptkonzepte im Zusammenhang mit dem CI/CD-Ansatz sind die kontinuierliche Integration, die kontinuierliche Verteilung und die kontinuierliche Bereitstellung. Der CI/CD-Ansatz bietet eine Lösung für die Probleme, die sich für Entwicklungs- und Einsatzteams aus der Integration neuer Programmcodesegmente ergeben. Dieser CI/CD-Ansatz garantiert eine kontinuierliche Automatisierung und Übersicht über den gesamten Lebenszyklus von Anwendungen, von der Integrations- und Testphase bis hin zur Verteilung und Bereitstellung. Diese Sätze von Praktiken werden oft als \u0026ldquo;CI/CD- Pipeline\u0026quot;bezeichnet und sie basieren auf einer agilen gemeinsamen Zusammenarbeit zwi- schen den Entwicklungs- und Einsatzteams.\n"},{"uri":"/webhandbook/databases/_1_/","title":"1 Functionalities of databases in web applications","tags":[],"description":"","content":"Interacting with a web application means sending requests to a server which then retrieves data to display. The server will also handle new data that is created while using the application as well as alterations on the existing data. Since these tasks can become quite complex, the server itself is not the optimal place to handle them. Therefore, elaborate operations on data and displaying dynamic data should be performed by a suitable database software (Williams and Lane, 2006). This leaves the server with the task of delegating the data to an appropriate data storage where it is saved in a suitable scheme.\nThe software that has the task of maintaining the data is called a database management system. It contains a storage component that contains all the actual data as well as a management component that includes a query and data manipulation language which is used for retrieving data and operating on it (Kaufmann and Meier, 2019).\n"},{"uri":"/webhandbook/website_rendering/_1_fundamentals/","title":"1 Fundamentals of Website Rendering","tags":["fundamentals","rendering"],"description":"Fundamentals of Website Rendering","content":"To display the contents of a website, a browser will typically request HTML, CSS, JavaScript and image content from a server and interpret it based on web standards and specifications. While doing so it uses multiple engines, each with different tasks that it has to complete. For example there is the Layout Engine that reacts to user input e.g. in the URL bar, or there is the Network Layer that handles network functions and all kinds of network requests.\nThe Rendering Engine is responsible for displaying the contents on our screen. It has to communicate with the network layer to get the HTML code and other things passed from a remote server. Then it follows several steps:\n It parses the HTML to construct the DOM (Document Object Model, which represents the website in a tree structure, where every node is an object corresponding to a part of that website). The styles are loaded and parsed into the CSSOM (CSS Object Model, contains all the selectors and selector properties needed to correctly render the page). The render tree is created using the DOM and CSSOM. The layout process takes place, where the engine scans which object should be placed where. Lastly, the information is painted and appears on our screen in the browser. Traditionally, JavaScript only gets executed after the web page has been rendered and painted to the screen and triggers a re-render if changes happen. Web crawlers that scan your website therefore often struggle with content that loads dynamically. But because SEO and the visibility of a website is oftentimes very important, new solutions moving away from the traditional way of website rendering have evolved. They will be explained now.  "},{"uri":"/webhandbook/css_processing/_1_terminology/","title":"1 History and Terminology","tags":[],"description":"","content":"History CSS processors have existed for quite a while. The first release of the popular Sass processor was in 2006! CSS is a powerful and versatile language to describe the appearance of web pages but lacks features from other programming languages to increase productivity and reduce redundancies. However, some shortcomings of the language have been addressed in recent years, and features that once could only be achieved through CSS processors are now available in the language itself.\nFor instance, when Sass was first released, there was no concept of variables in CSS, and values such as colors had to be hardcoded everywhere. So when large web projects wanted to change a specific color (e.g., the brand color), they had to go through all their stylesheets and replace the old values with the new ones.\nModern CSS has native support for variables and many other features that once were only available through CSS processors. But not everything CSS processors have to offer exists in CSS today, and some will never be able to.\nTerminology When talking about CSS processing, typically, there is a separation between pre-processing and post-processing. The former describes transforming something that is not CSS into spec-compliant CSS, and the latter takes already valid CSS and optimizes it in some fashion. However, the most popular tools that perform these transformations can not be distinctly classified as falling clearly into one of these two categories anymore since they support functions that fall both into pre- and post-processing.\nIn his article \u0026lsquo;Deconfusing Pre- and Post-processing\u0026rsquo; [1], Stefan Baumgartner defines a different terminology, authoring and optimization, instead of pre-and post-processing to classify the various features of CSS processing tools. This new categorization still doesn\u0026rsquo;t allow us to neatly assign any feature to precisely one of the two categories. Still, it generally makes it easier to discuss whether something helps developers write nicer code or is done to optimize for size or greater support.\n"},{"uri":"/webhandbook/programming_languages/_1_typsicherheit_typisierung/","title":"1 Typsicherheit und Typisierung","tags":["typsicherheit","typisierung"],"description":"Typsicherheit und Typisierung","content":"1.1 Typsicherheit Die Typsicherheit sorgt dafür, dass die Code-Qualität gewährleistet wird und sich somit die Zuverlässigkeit des entwickelten Programms erhöht. Es obliegt dem Interpreter beziehungsweise Compiler die Sicherheit durch Typprüfung herzustellen und Typverletzungen aufzufangen. Manche Compiler geben Meldungen aus und in manchen passiert eine automatisierte Typumwandlung, sollte es eine Typverletzung geben. Beispielsweise warnt ein Compiler davor, eine Gleitkommazahl (Float, Double) an eine Ganzzahl-Variable (Integer) zu übergeben. Dennoch müssen bei Zuweisungen die beteiligten Typen nicht notwendigerweise identisch sein, da beispielsweise Ganzzahlen unter Umständen an Gleitkommazahlen-Variablen zugewiesen werden können. Wichtig dabei ist, dass die Datentypen kompatibel zueinander sind [5, 6].\n1.2 Typisierung Das Ziel der Typisierung ist die Vermeidung von Laufzeitfehlern. Sie dient dazu, dass Objekte wie beispielsweise Variablen oder Funktionen korrekt verwendet werden beziehungsweise sie soll sicherstellen, dass keine Operation ausgeführt werden kann, die syntaktisch oder semantisch fehlerhaft ist. Programmiersprachen, die eine Typisierung aufweisen nennt man entweder stark typisiert oder schwach typisiert. Stark typisierte Programmiersprachen sind beispielsweise C++ und Java, während schwach typisierte Sprachen beispielsweise PHP und JavaScript sind. Bei der Typisierung gibt es Typprüfungen, die entweder zur Kompilierzeit oder Laufzeit vorgenommen werden. Man spricht hier entweder von einer statischen Typprüfung oder dynamischen Typprüfung. [9]\nStatische Typisierung\nBei einer statischen Typprüfung werden beispielsweise Zuweisungsfehler noch vor der Laufzeit erkannt beziehungsweise wird eine Typprüfung bereits zum Zeitpunkt der Kompilierung durchgeführt. Der Nachteil einer statischen Typisierung ist, dass teilweise die Typen erst zur Laufzeit bekannt sind. Des Weiteren ist der Compiler komplexer, da hier ein gewisser Mehraufwand für die Analyse anfällt. [5, 7, 43]\nDynamische Typisierung\nDiese Art der Typisierung zeichnet sich durch ein hohes Maß an Flexibilität aus. Doch kann die hohe Flexibilität als Schwachstelle gesehen werden. Denn manche Fehler können mit diesem Schema der Typisierung erst zur Laufzeit erkannt werden - das bedeutet unter Umständen eine erschwerte Fehlersuche. Des Weiteren ist die dynamische Typisierung anfällig für einen nachlässigen Umgang in der Entwicklung. Zusätzlich erlaubt die dynamische Typisierung die korrekte Verarbeitung von eigentlich inkompatiblen Typen. [5, 43]\n"},{"uri":"/webhandbook/ui_ux/_1_ui/","title":"1 User Interface","tags":["UI","User Interface"],"description":"User Interface","content":""},{"uri":"/webhandbook/css_processing/_2_authoring/","title":"2 Authoring","tags":[],"description":"","content":"As mentioned in the previous chapter, the CSS specification has significantly caught up with the feature set that processing tools provide today. Features such as variables, color mixing, importing, or mathematical operations can all be used directly in the browser with the added benefit of being dynamically changeable.[2]\nStill, there are CSS processor features that can immensely help with writing nice code and that have not made it in the CSS spec. In addition, many larger web applications use processing tools to optimize their CSS for production — more on that later — so adding additional tools that aid with the authoring of stylesheets is relatively easy. Another reason to use the authoring features provided by these tools may be to target older browsers that lack support for these features.\nIt is crucial to remember that CSS processors can only perform operations on the static stylesheet before they are sent to and evaluated by the browser. This \u0026ldquo;static compilation\u0026rdquo; can be helpful, as it allows for complicated syntax extensions that simply compile to regular CSS. The downside is, because this compilation happens before the stylesheet is evaluated it also means that there is no context for the state of the environment. For instance, modern CSS\u0026rsquo;s math capabilities allow adding absolute units to relative ones, so height: calc(100% + 32x) is perfectly valid. The same does not work with CSS processors, even though they also have math operations, since the calculation has to resolve at compile-time, and the width of 100% is unknown.[3]\nNesting One widely used feature that has not made it into the CSS specification is nesting. Nesting allows developers to write one style rule within another. For instance, instead of having to write:\nul { margin: 0; } ul li { display: inline-block; } ul a { text-decoration: none; } Developers can write the following to increase legibility and avoid unnecessary repetition:\nul { margin: 0; li { display: inline-block; } a { text-decoration: none; } } Parent Selector One handy feature that comes with nesting, which can improve legibility, is the parent selector, with which the outside selector can get referenced and extended. An ampersand denotes this parent selector. So, for example, instead of writing:\nbutton { background: lightgrey; } button:hover { background: gray; } Developers can write:\nbutton { background: lightgray; \u0026amp;:hover { background: gray; } } Nesting can reduce code repetition and visual clutter, but the generated CSS quickly increases. While nesting looks nicer to the developer, the CSS processor has to unnest the code again during compilation for it to become valid CSS again. To prevent unnecessarily specific and therefore large CSS selector rules, keeping the nesting depth as shallow as possible is recommended.[4]\nMixins CSS Processors also bring simple control flow statements and functions to stylesheets, common in other programming languages. This functionality allows writing reusable code patterns. For instance, instead of writing the following statement again and again:\n.background { top: 0px; left: 0px; bottom: 0px; right: 0px; } With what is called mixins in SASS, but is also available with other CSS processors, this statement can be made into a reusable function and then applied where necessary:\n@mixinposition($p) { top: $p; left: $p; bottom: $p; right: $p; } .background { @includeposition(0px) } Different Syntax CSS Processors can extend the existing CSS syntax and change it completely. Most notably, the Stylus language makes curly braces, semicolons, and colons optional in a stylesheet and hierarchy inferred by indentation, similar to python. This means instead of writing:\nbutton { background: lightgray; \u0026amp;.primary { background: lightblue; } } the same rule in Stylus can get described like this:\nbutton background lightgray \u0026amp;.primary background lightblue Modules Nesting can be a great way to limit the scope of specific CSS rules, as in general, everything on a page shares the same scope. Another option to limit CSS rules to certain components using CSS processors is to use css-modules[5]. The idea is that CSS selectors can stay simple, shallow and concise, and then get automatically renamed to be unique to a module. For instance, a CSS class written as .name might be renamed in the final output to .name_SVK0go. Since this CSS processing feature changes the class names, integration with the HTML code is necessary, which adds considerably more complexity to the build pipeline than just converting the stylesheets.\n"},{"uri":"/webhandbook/ci_cd/_2_/","title":"2 CI/CD-Pipeline","tags":["CI","CD","Pipeline"],"description":"CI/CD-Pipeline","content":"2 Elemente einer CI/CD-Pipeline Die Phasen, aus denen sich eine CI/CD-Pipeline zusammensetzt, sind separate Untermen- gen von Aufgaben, die in dem, was wir als Pipeline-Phase bezeichnen, zusammengefasst sind. Hier sind die häufigsten Pipeline-Phasen:\n Erstellung Test Einführung Bereitstellung Validierung und Konformität  2.1 Erstellung Die Erstellung ist das erste Element einer CI/CD-Pipeline, ihre Hauptaufgabe ist das Kompilieren der Anwendung.\n2.2 Test Der Test ist ein wichtiger Bestandteil einer CI/CD-Pipeline. Seine wichtigste Aufgabe ist es, den Code zu testen. Die Hauptautomatisierung spart Zeit und Aufwand.\n2.3 Einführung Die Einführung spielt eine ebenso wichtige Rolle in einer CD/CI-Pipeline. Sie dient genau dazu, die Anwendung an das Repository zu verteilen.\n2.4 Die Bereitstellung Die Bereitstellung dient genau dazu, den Code in der Produktion einzusetzen.\n2.5 Validierung und Konformität Diese Validierungsschritte müssen an die Anforderungen der jeweiligen Organisation an- gepasst werden. Werkzeuge zur Analyse der Sicherheit von Bildern wie z. B. Clair kön- nen die Qualität von Bildern sicherstellen, indem sie sie mit bekannten Schwachstellen (CVEs) vergleichen.\nDiese Liste der Pipeline-Phasen ist natürlich keinesfalls vollständig. Es handelt sich lediglich um ein Beispiel für die häufigsten Phasen, die bei einer Pipeline auftreten kön- nen. Die Pipeline muss den Anforderungen des Unternehmens entsprechen.\n"},{"uri":"/webhandbook/programming_languages/_2_frontend_backend/","title":"2 Frontend und Backend","tags":["frontend","backend"],"description":"Frontend und Backend","content":"2.1 Frontend Als Frontend wird die sogenannte Präsentationsebene bezeichnet - Das Sichtbare einer Webseite. Beispielsweise die Webseite eines Onlineshops. Das Frontend ist näher am Benutzer (Client) und erlaubt einen benutzerfreundlichen Zugriff auf Daten und Prozesse, die vom Backend ausgehen. [15, 44]\nSpricht man davon, welche Programmiersprache für das Frontend benutzt wird, ist es nicht möglich, eine klare Aussage zu schaffen. Es ist durchaus möglich, eine Präsentationsebene zu erschaffen, ohne dafür überhaupt eine Programmiersprache zu benutzen - mit HTML und CSS. Warum diese beiden Sprachen keine Programmiersprachen sind, wird im Punkt 4 HTML und CSS etwas näher erläutert. Mit einer Programmiersprache allein ist es kaum möglich eine Präsentationsebene zu erschaffen. Verschiedene Bibliotheken oder Frameworks zusammen mit einer Programmiersprache sind dafür erforderlich. Beispielsweise das Zusammenspiel der Programmiersprache JavaScript und der JavaScript-Softwarebibliothek React. Oder das Framework Angular zusammen mit der Programmiersprache Typescript. Ein weiteres Beispiel wäre noch das Framework Symfony zusammen mit der Skriptsprache PHP. Es gibt viele Möglichkeit und es obliegt dem Entwickler, welche Technologie bevorzugt wird.\n2.2 Backend Anders als beim Frontend, ist das Backend näher am System und bezeichnet den funktionalen Teil wie beispielsweise die Datenbank oder Datenverarbeitung einer Webseite. Der Benutzer (Client) einer Webseite sieht das Backend nicht und soll es auch nicht. Das Backend beschäftigt sich mit der Datenverarbeitung im Hintergrund. [17]\nWie beim Frontend, ist es nicht möglich eine klare Aussage zu schaffen, welche Programmiersprache für das Backend benutzt wird. Auch hier obliegt es dem Entwickler. Um ein Beispiel zu nennen: JavaScripts Popularität als Backend-Programmiersprache wuchs, als die plattformübergreifende Laufzeitumgebung Node.js im Frühjahr 2009 erschien. Mit Node.js ist die Erstellung von schnellen und skalierbaren serverseitigen Anwendungen, sowie Netzwerkanwendungen möglich. Aber auch beispielsweise die Programmiersprache Python erfreut sich im Backend großer Beliebtheit - zusammen mit dem Framework Django. [19, 45]\n"},{"uri":"/webhandbook/databases/_2_/","title":"2 SQL databases","tags":[],"description":"","content":"SQL stands for structured query language and is used for querying relational databases. Relational databases derive from the idea of simple tables. Every row in the table is then called a dataset or tuple; its columns hold the so-called attributes of the datasets. Relations between tables can be expressed by using the same identifier (ID) or a combination of attributes for a dataset in different tables, this is also referred to as a key.\nKaufmann and Meier (2019) state that “SQL is a descriptive language, as the statements describe the desired result instead of the necessary computing steps” (p. 6). Following this, the most important keywords for SQL queries are SELECT for retrieving data, INSERT INTO for adding data, DELETE for erasing data as well as UPDATE for changing existing data. These operations map the classic CRUD (Create, Read, Update, Delete) operations for persistent storage.\nSQL databases were the first databases to be used in web applications which is why they are still very popular and a range of options exists. Three popular choices (Kamaruzzaman, 2021) shall be presented in the following sections.\n2.1 MySQL MySQL is a relational database management system (RDBMS). It is characterized as being fast and robust (Welling and Thompson, 2003). Specifically, MySQL is made up of an “\u0026hellip;SQL server, client programs for addressing the server, administrative tools, and a programming interface for writing (\u0026hellip;) own programs” (DuBois, 2008). For web services, it is often used in conjunction with PHP and the Apache web server – this is referred to as the “LAMP stack” (Linux, Apache, MySQL, PHP). Companies such as Uber, Netflix, Tesla and YouTube use MySQL in their tech stack (MySQL, 2022) but it is also an inherent part of content management systems such as WordPress, Joomla and Drupal.\n2.2 MariaDB Because of concerns about the acquisition of MySQL by Oracle in 2008, some of the original MySQL developers forked MariaDB which is now community-developed. The RDBMS has a high compatibility with MySQL since both of them are based on the same code in their core. Although the two are similar in many aspects, there are some differences – for example concerning the support of the JSON datatype, authentication and encryption (Shay, 2018).\n2.3 PostgreSQL PostgreSQL adds the layer of objects to a RDBMS and is thus called an Object-Relational Database Management System. An ORDBMS works very similar to a relational database but it bridges the worlds of object oriented thinking and relational databases. PostgreSQL emerged from the project Ingres that was developed at the University of Berkeley California during the 1980s (Drake and Worsley, 2002) and is an open source project.\n"},{"uri":"/webhandbook/website_rendering/_2_types_pros_cons/","title":"2 Types of Render Modes and their Advantages and Disadvantages","tags":["render modes","advantages","disadvantages","rendering"],"description":"Types of Render Modes and their Advantages and Disadvantages","content":"Rendering Modes  Traditional SSR (Server Side Rendering) Traditional SPA (Single Page Application) using CSR (Client Side Rendering) Universal / Rehydration SSR Static SSR CSR with Pre-Rendering  TRADITIONAL SSR (SERVER SIDE RENDERING) Server Side Rendering was the only way to do things when the web just started. The server generates all HTML files and sends it to the browser – so the browser gets a fully formed HTML web page with the HTML components already created. The browser now only has to parse the HTML to generate the DOM and display the website. With every request from the browser, all the scripts, styles and templates have to be sent from the server to the client (the browser) again. Server Side Rendering can be done at build time, which pre-generates the HTML, or at request time for each incoming request from the browser, also known as Dynamic SSR.\nExamples\nWebsites using PHP, ASP.NET, Java or Ruby are normally built using traditional SSR.\nAdvantages\n Better SEO performance: The client receives the finished page with all the data and HTML tags, especially the meta tags that belong to the page, so search engines can crawl the page and index it. Faster initial load time: The client only has to parse the content, which is faster than having to render it. Also visible when JS is disabled: Since all the HTML is generated on the server-side, the website will be displayed correctly even if JS is disabled.  Disadvantages\n Poor responsiveness and user experience with bad internet connectivity: Re- rendering takes time and the user has to wait for each request to complete – when there is bad internet connection, it might take a while to see new content.  TRADITIONAL SPA (SINGLE PAGE APPLICATION) USING CSR (CLIENT SIDE RENDERING) The complete opposite to Traditional SSR is a Single Page Application that is client-side rendered. In CSR, the HTML components are generated on the client-side by executing JavaScript in the browser. On initial request, the server only returns a minimal HTML page (therefore the name Single Page Application) that serves as the application container. The browser must then fully download the JS bundle linked in the HTML and run the JS in the browser, which in turn creates the HTML DOM on the client-side. Further interactions only happen on the client-side and no request is sent to the server.\nExamples\nTraditional React or Vue Applications are fully CSR.\nAdvantages\n Super fast and responsive after initial load: There are no round trips to the server which fastens up loading times significantly. Easier development and deployment: No server is needed and the HTML, JS and CSS can just be dropped to a remote server and go live right away.  Disadvantages\n Not SEO friendly: The SPA content is loaded via JS that the crawlers mostly cannot execute, and therefore they only see the bare single HTML pages with almost no content. Slow initial load time: Most resources like the CSS, JS and HTML templates are loaded once at the initial load of the app, so it’s rather slow when first being opened. JS has to be enabled: You will see a blank page if JS is disabled because the JS bundle will never run on the client and so the HMTL will not get generated, therefore the webpage will not be rendered.  UNIVERSAL / REHYDRATION SSR Universal SSR tries to combine the advantages of Traditional SSR and Traditional CSR. This becomes possible through the fact that JS has become an isomorphic language since the release of Node.js in 2009, which means that the code can run on the client and the server side. In Universal SSR, the app will pre-load on the server, pre-render the pages and react to navigation requests like full page loads and reloads and send the rendered HTML to the browser. The client then takes control and Rehydration (also called „Hydration“) happens: the JS bundle gets downloaded in the background and event handlers get attached to the pre-rendered static HTML. So from now on the application acts like a SPA.\nExamples\nNuxt SSR (Vue), Next SSR (React), Gatsby SSR (React)\nAdvantages\n Faster initial load time: As pages are pre-rendered, the initial load time is higher as with traditional CSR Better SEO results: Again, because of the pre-rendering, search engine crawlers can scan the content of the page Better user experience: Faster initial reaction and seamless transitions between pages: the user experience profits from the combination of SSR and CSR  Disadvantages\n Server required: A Node.js server is required to run JS on the server Complex development: Combining server and client JS can be confusing because some plugins and libraries are only meant to run on the client side and you have to be careful what you can use.  STATIC SSR Apps that are static-generated are pre-generated with the help of a Static Site Generator (SSG). All pages are pre-rendered at build time to static HTML files that will be stored on a static hosting server. No JS is executed on the browser anymore because this is already done on the server, the website is completely static on the client, but it still acts like a SPA.\nExamples\nNext Static HTML Export (React), Hugo, Gatsby SSG (React), Jekyll, Metalsmith\nAdvantages\n Faster initial load time: As pages are pre-generated as static HTML, the initial load time is very fast SEO friendly: All JS can be crawled by search engines, like in traditional SSR apps Easy and fast deployment: Numerous static hosting servers are available for fast deploys Works with JS disabled: As no JS is executed on the browser, the website still looks and behaves the same if JS is disabled  Disadvantages\n HTML files must be generated for every possible URL: this can be challenging if you can’t predict what those URLs will be or for sites with a large number of unique pages No real-time rendering: Static generated sites can only display content that was pre- rendered during build time. If real-time rendering is required, universal SSR should be used.  CSR WITH PRE-RENDERING It’s easy to confuse Static SSR with Pre-Rendering: in both cases, HTML files are statically generated during build time. With Pre-Rendering the difference is that only partials of the HTML, the initial skeleton, is pre-rendered. Once the files are sent to the browser, hydration takes over again and then the application acts like a full SPA. How’s this different to Universal SSR then? The difference is that it doesn’t need a server for further requests, everything happens on the client like in a Traditional CSR. Only the initial load time is enhanced for better user experience.\nExamples\nNuxt Static Site Generator (Vue), Gatsby, Vuepress\nAdvantages\n Fast Initial Load Time: Pages are partially pre-generated so the initial load time decreases. Better SEO: As pages are pre-rendered, the initial state and content can be captured by search engine crawlers  Disadvantages\n Does not work if JS is disabled: some basic functionality may still exist, but most of the page will be useless  "},{"uri":"/webhandbook/ui_ux/_2_0_ux/","title":"2 User Experience","tags":["UX","User Experience","Benutzererfahrung"],"description":"User Experience","content":"Der Begriff User Experience (dt. Benutzererlebnis) wurde erstmals 1995 von Donald Norman und Kollegen geprägt, die ihn nutzten, um „critical aspects of human interface research and application“ zusammenzufassen. 1998 gründete Norman zusammen mit einem Kollegen Nielsen die Nielsen Norman Group, welche sich seither mit dem Thema UX und UI befasst. Seit 2018 existiert die ISO-Norm 9241-210, welche die menschenzentrierte Gestaltung interaktiver Systeme beschreibt, worunter auch die UX fällt. Dort wird sie beschrieben als die „Wahrnehmungen und Reaktionen einer Person, die aus der tatsächlichen und/oder der erwarteten Benutzung eines Systems, eines Produkts oder einer Dienstleistung resultieren“. Wichtig ist dabei, dass das Benutzererlebnis vor, während und nach der Nutzung betrachtet wird, um ein ganzheitliches Bild zu ermöglichen. In einer Anmerkung zum Begriff wird außerdem festgelegt, dass dabei auch Faktoren wie das Markenbild, die Darstellung, die Funktionalität und die Systemleistung des Produkts zum Erlebnis hinzugehören. UX beinhaltet dabei auch einen weiteren Begriff, der oft als Synonym missverstanden wird. Der Begriff Usability (dt. Gebrauchstauglichkeit) beschreibt laut ISO-Norm 9241-11 das „Ausmaß, in dem ein System [\u0026hellip;] durch bestimmte Benutzer in einem bestimmten Nutzungskontext genutzt werden kann [\u0026hellip;]“. Es wird vor allem während der Nutzung einer Anwendung analysiert. Dabei steht die effektive, effiziente und zufriedenstellende Erreichung der Ziele des Benutzers im Vordergrund.\nDie Gründe, weswegen das Thema UX eine immer bedeutsamere Rolle bei der Entwicklung von Anwendungen spielt, sind das Überangebot auf dem Markt und das Sparen von Ressourcen. Ersteres resultiert aus der Tatsache, dass das mittlerweile unendliche Webanwendungen gibt und der Nutzer sich daraus die seines Ermessens nach beste heraussuchen kann. Ein Faktor für die Auswahl ergibt sich daher aus der UX. Das Sparen von Ressourcen lässt sich darauf zurückführen, dass durch die ständige Evaluation durch eine nutzerzentrierten Entwicklung, die die Bedürfnisse des Benutzers in den Mittelpunkt stellt, langfristig Aufwand gespart wird, der sonst erst deutlich wird, wenn das Produkt veröffentlicht und von Benutzern genutzt wird.\nPeter Moville definierte durch sein User Experience Honeycomb folgende Attribute als Eigenschaften einer guten UX:\n useful: Die Anwendung sollte dem Nutzenden einen Mehrwert bieten. usable: Die Anwendung sollte so bedienbar sein, dass sie möglichst leicht erlernbar und vertraut ist. desirable: Die Anwendung sollte visuell ansprechend sein und einfach zu verstehen sein. findable: Die Anwendung sollte so gestaltet sein, dass der Nutzer alles findet was er sucht. valuable: Die Anwendung sollte einen Mehrwert für den Nutzer bieten. accessible: Auch Menschen mit körperlicher Einschränkungen sollen die Anwendung nutzen können. credible: Die Anwendung sollte vertrauenswürdig sein.  Eine schlechte UX liegt oftmals im Auge des Betrachters. Die Auswirkung ist jedoch meist, dass der Nutzer die Webanwendung aufgrund schlechter Erfahrungen in Zukunft weniger oder gar nicht nutzt. Durch die Vielzahl an Komponenten von UX gibt es einige Stellen, bei denen ein UX Designer aufpassen sollte. Eine besondere Art von schlechter Usability, welche ebenso zu einer schlechten UX führt, sind dabei sogenannte Dark Patterns. Dies beschreibt (UI-)Elemente oder Formulierungen in einer Anwendung, welche absichtlich eingesetzt werden, um den Nutzer an seinem Vorhaben zu hindern oder sogar das Gegenteil zu bewirken. Einer der meistverbreiteten Beispiele hierfür ist in der Grafik 1.1 abgebildet. Aus Gewohnheit würde man hier mit dem grünen Button die Auswahl bestätigen. Durch absichtlich gegenteiliges Design wird der Nutzer hier in die Irre geführt. Mittlerweile gibt es eine Liste von Dark Patterns, die beispielsweise Disguised Ads (Werbung, welche aussieht wie ein Teil der UI, beispielsweise der Navigation) oder Trick Questions (Kompliziert formulierte Fragen, die nicht eindeutig zu beantworten sind), welche in Abbildung 1.2 und 1.3 zu sehen sind.\n"},{"uri":"/webhandbook/ui_ux/_2_1_ux_prozesse/","title":"2.1 User Experience Prozesse","tags":["UX","Human-Centered Design","Usability Engineering","User Experience Design"],"description":"Human-Centered Design","content":"Um eine gute User Experience zu gewährleisten, sollte bereits bei der Entwicklung der Anwendung stets die UX betrachtet werden. Dies gilt für alle Entwicklungsphase. Beispielsweise sollten in der Anforderungsanalyse Kundenwünsche konkretisiert, in der Prototypen-Erstellung verschiedene UX-Aspekte angesprochen und beim Testen die UX evaluiert werden. Für diese Herangehensweise gibt es den Begriff Human-Centered Design.\nDas Human-Centered Design (dt. menschenzentrierte Gestaltung, HCD), welcher früher auch als User-Centered Design oder Usability-Engineering bezeichnet wurde, ist ein als ISO-Norm festgehaltener Prozess mit vier Phasen. Von dem Begriff User Experience Design grenzt er sich insofern ab, als dass dieser zwar dasselbe Ziel hat, aber erst einsetzt, wenn das Produkt definiert ist und somit nicht die komplette Entwicklungsphase betrachtet. Das Ziel von HCD ist, die Nutzungsanforderungen zu erfüllen und die Methode wird oft als Herangehensweise zur Gestaltung und Entwicklung von gebrauchstauglichen interaktiven Systemen verwendet. Für den Prozess werden Kenntnisse und Techniken aus den Bereichen der Arbeitswissenschaft und Ergonomie, sowie der Usabilityforschung herangezogen. Der Vorteil von HCD ist, dass iterativ und nutzerzentriert an die Entwicklung des Produkts herangegangen wird, um Defizite in der Nutzung zu früh verdeutlichen und in der weiteren Entwicklung zu beheben.\nIm Folgenden werden die in der Grafik dargestellten vier Phasen von HCD grob erläutert. Sie sind generell für die Entwicklung jeglicher interaktiven Produkte geeignet, jedoch soll hier mehr auf deren Anwendung auf die Entwicklung von Webanwendungen eingegangen werden. Vorraussetzung für den Start dieses Prozesses ist, dass zuständige Personen und Stakeholder identifiziert werden, geplant wird, inwieweit HCD in die generelle Entwicklungsmethode (Scrum, Wasserfall, etc) integriert werden kann und Raum für Kommunkation geschaffen wird. Außerdem ist eine zeitliche Planung und eine damit verbundene Meilenstein-Festlegung sinnvoll.\n Analysephase: Verstehen und definieren des Nutzungskontexts  Der Kontext einer Anwendung besteht laut ISO Norm aus „den Benutzermerkmalen, Aufgaben und organisanisatorische, technische und physische Umgebung [\u0026hellip;], in dem das System verwendet wird“. Diese Informationen werde durch Methoden oder die Analyse von ähnlichen Systemen erforscht und diesen dann als Grundlage für die Entwicklung der Anwendung. Denn nur wenn der Kontext, indem die Anwendung genutzt wird, klar definiert ist, kann eine nutzerzentrierte Entwicklung von Anfang an erfolgen. Die Definition des Nutzungskontext muss laut Norm dabei den Benutzer und sonstige Stakeholder, Merkmale der Benutzer, Ziele und Aufgaben sowie die Umgebung des Systems beschreiben. Letzteres beinhaltet die technische (Programmiersprache, Framework, Endgeräte) und die physische Umgebung (Internetverbindung, Beleuchtung).\nSpezifikationsphase: Festlegen der Nutzungsanforderungen  Basierend auf dem Nutzungskontext werden nun Nutzungsanforderungen abgeleitet. Mögliche Nutzeranforderungen sind dabei folgenden:\n Anforderungen, welche durch die Betrachtung des Nutzungskontexts und speziell Anforderungen, welche bereits durch festgelegte Normen und Richtlinien zu UX, UI und Gebrauchtauglichkeit stammen. Anforderungen, welche die Usability adressieren. Hierbei sollen auch messbare Kritierien aufgenommen werden, die die Zufriedenheit im beschrieben Nutzungskontext. Anforderungen, die durch organisatorische Aspekte der Anwendung benötigt werden.  Die Anforderungen müssen generell durch Stakeholder verifiziert, nachprüfbar und widerspruchsfrei sein. Falls im Verlauf der Iterationen Unklarheiten deutlich werden, gilt es diese zu dokumentieren und die Anforderungen weiter zu spezifizieren. Die festgelegten Nutzungsanforderungen sind Teil der Gesamtanforderungen eines interaktiven Systems und damit auch Teil des Lastenhefts.\nDesignphase: Erarbeitung von Gestaltungslösungen  In dieser Phase werden nun Lösungen entwickelt. Folgende Grundsätze der Gestaltung sind in ISO 9241-110 beschrieben und gilt es dabei zu involvieren: Aufgabenangemessenheit, Selbstbeschreibungsfähigkeit, Konformität mit Benutzererwartungen, Lernförderlichkeit, Steuerbarkeit, Fehlertoleranz und Individualisierbarkeit.\nEvaluationsphase: Evaluierung der Gestaltungslösungen  Ziel dieser Phase ist es, für jeder der vorherigen Phasen Feedback vom Nutzer zu erhalten und dadurch Problem der entwickelten Lösungen aufzuzeigen. Im Idealfall erfüllt die Gestaltungslösung bereits bei der ersten Iteration alle Nutzungsanforderungen und der Anwendung ist damit feritgstellt. Im Normfall ist die vierte Phase jedoch der Anfang einer neuen Iteration in jede andere Phase, wodurch Inkrement stetig verbessern wird, bis alle Anforderungen erfüllt sind.\nDa der HCD Prozess viele Aspekte und Methoden vereint, sollen nun einzelne Teilaspekte im folgenden Kapitel vorgestellt werden, um einen besseren Überblick von HCD zu ermöglichen. Das Ziel aller dieser Komponenten ist es, dass der Nutzer seine Aufgaben gut (effektiv, effizient und zufriedenstellend) durchführen kann.\n"},{"uri":"/webhandbook/ui_ux/_2_2_komponenten/","title":"2.2 Komponenten des User Experience Prozesses","tags":["UX","Benutzerrecherche","Informationsarchitektur","Visualisierung"],"description":"Komponenten","content":"2.2.1 Benutzerrecherche Einer der elementaren Bausteine für eine erfolgreiche Benutzererfahrung ist ein klares Verständnis davon, wer die Benutzer sind und was sie von der Anwendung fordern und erwarten. Dies ist bereits vor der Planung der eigentlichen Anwendung hilfreich, da so ein Produkt entwickelt werden kann, welches nützlich für den Endnutzer ist. Die Interaction Design Foundation gliedert Benutzerrecherche dabei in zwei Teile: die qualitativen und den quantitativen Forschung, welche jeweils attitudinal (dem Nutzer zuhören) und behavioral (die Handlungen des Nutzers beobachten) erfolgen kann. Sie empfehlen außerdem eine Mischung aus all diesen Vorgehenweisen zu verwenden.\nIst die Benutzerrecherche fortgeschritten, könnten die Ergebnisse in Form von Personas festgehalten werden. Eine Persona ist ein fiktiver Charakter mit einer fiktiven Persönlichkeit, demografischen, psychografischen und anderen Merkmalen. Der Charakter basiert jedoch auf der jeweiligen Zielgruppe, um die Suche nach Lösungen zu unterstützen, die am besten zu den jeweiligen Nutzergruppen passen. Hierfür werden üblicherweise drei bis vier Personas erstellt, welche mit Namen, Bild und Zusammenfassung zu wesentlichen Aspekten in Form einer DIN-A4 Seite dargestellt werden. Diese dienen jedem Beteiligten während des Projekts, sich die Probleme und Bedürfnisse der Zielgruppe vor Augen zu behalten.\nDer letzte Schritt für ein fundiertes Wissen über die Benutzer und Zielgruppe ist das Entwickeln von Benutzerszenarien für die Personas. Sie stellen realistische Situation dar, in welchen sich die Nutzer befinden und in denen die Anwendung dem Nutzer bestmöglich dienen soll. Die Basis dafür bildet die vorgangegangene Benutzerrecherche und die Personas. Wichtig ist ferner die Beschreibung des Aspekts, welche Motivation und Ziele der Nutzer hat und welche Aufgaben er tätigen muss, um diese zu erfüllen. Außerdem sollte erläutert werden, in welchen Situationen er die Anwendung nutzt und welche Herausforderungen sich daraus ergeben. Ein komplett ausgearbeitetes Beispiel hierfür ist in der Abbildung 1.3 zu sehen.\nZusammenfassend ist dieser Aspekt der UX signifikant für die Attribute useful und usable des UX Honeycombs.\n2.2.2 Informationsarchitektur Bei der Entwicklung einer Anwendung ist es bedeutsam, sich im Vorfeld mit der Organisation und Strukturierung von Inhalten zu befassen. Dafür müssen Fragen beantwortet werden wie „Wie soll der Nutzer durch die Anwendung navigieren?“ oder „Nach welcher Indexierung erfolgt die Suchmaschine der Anwendung?“. Vor allem bei komplexeren Anwendungen ist eine frühe Planung und Feedback der Nutzer unabdingbar. Dabei wird zwischen zwei Arten von Informationsarchitektur unterschieden: Top-Down-Informationsarchitektur und Bottom-Up-Informationsarchitektur. Für beide Arten ist eine vorherige Benutzerrecherche notwendig, aus der hervorgeht, welche Informationen die Nutzer wohl am meisten benötigen. Demnach wird bei der Top-Down-Architektur, die Anwendung so konzipiert, dass der Nutzer ausgehend von der Startseite aus effektiv und einleuchtend zu den benötigten Informationen navigieren kann. Bei der Bottom-Up-Architektur hingegen wird beachtet, wie der Nutzer sich zurechtfindet, wenn er über einen beliebigen Punkt in die Webseite einsteigt, beispielsweise durch den Aufruf der Seite über eine Suchmaschine. Zur Abbildung und Planung der Informationsarchitektur eignen sich Site Maps. Ein Beispiel hierfür ist die Side Map der Webseite von Apple.\nDieser Aspekt der UX hat direkte Auswirkungen auf das Attribut findable im UX Honeycombs.\n2.2.3 Visualisierung Meist reicht es nicht aus, nur in der Theorie von einer Anwendung zu sprechen. Deshalb ist eine Visualisierung in jeglicher Form sinnvoll, um die Anwendung zu erproben und Feedback einzuholen. Auch dieser Aspekt kann eine positive Beeinflussung der Attribute useful und usable des UX Honeycombs hervorbringen. Im Folgenden sollten die gängigsten Formen erläutert werden. Sie sind dabei aufsteigend nach deren Aufwand und damit verbundenen Fidelity (dt. Detaillierungsgrad) gelistet:\nSkizzen\nEine Skizze ist eine meist handgezeichnete Darstellung, die hilft abstrakte Überlegungen verbildlicht und erste Konkretisierungen zur Struktur und Funktionen der Webseite festzuhalten. Sie schafft einheitliches Verständnis und auch Raum für weitere Fragen und Aspekte, die zu klären sind. Vorteil dieser Art der Visualisierung ist die Schnelligkeit und Vorläufigkeit. Denn dadurch ist es möglich, einfach Änderungen vorzunehmen und innovative Ansätze zu fördern. Generell eignen sich Skizzen vor allem für die Anfangsphase des Projekts. Von Vorteil sind dabei Informationen wie Personas, Use Cases und bereits definierte Anforderungen an das System.\nWireframes\nDie nächste Stufe von Visualisierung sind Wireframes. Der Begriff kommt ursprünglich aus dem Industrieumfeld, wo es als Möglichkeit genutzt wird, schnell 3D-Objekte zu instanziieren, die nur die geplante äußere Form besitzt. Ebenso werden Wireframes in UXD genutzt, indem sie bereits die Originalgröße der fertigen Anwendung besitzen und somit verdeutlichen, ob die Überlegungen aus den Skizzen sinnvoll sind. Auch hier sind die tatsächlichen Inhalte noch nicht notwendig und Designvorschläge sogar unerwünscht, weswegen oft mit Platzhaltertexten und -bildern gearbeitet wird. Wichtig ist dennoch, im Wireframe zu verdeutlichen, an welcher Stelle in Zukunft Elemente wie das Logo, Kopf- und Fußzeile oder Inhaltsbereiche sind. Mögliche Tool zur Erstellung von Wireframes sind Balsamiq, Adobe XD oder Visio von Microsoft, durch die die Entwicklung beschleunigt wird. Je nachdem wie ausgereift die Wireframes sind, dienen sie teilweise schon als Grundlage für User Test oder für die Programmierer. Ersteres wird vor allem durch Wireflows möglich, die einzelne Wireframes miteinander verknüpfen, wodurch der Nutzer sich quasi durch die Anwendung bewegen können. In der folgenden Grafik ist ein Beispiel für Wireframes einer E-Commerce-Webseite dargestellt.\nMockups\nMit Mockups werden nun die konzeptionellen Überlegungen aus vorherigen Schritten mit einem Designkonzept umgesetzt. Dabei sind Themen wie Farben, Typografie, Abstände und Bilder von Bedeutung. Auch Mockups können wie Wireframes nutzbar sein, wodurch sie wie eine täuschend echte Attrappe auf Testnutzer wirken können. Das hier eingeholt Feedback ist insofern wertvoll, als dass der Nutzer durch sie ein gutes Gefühl dafür bekommt, wie sich die Anwendung in Zukunft verhalten kann.\nPrototypen\nNicht zu verwechseln mit Paperprototypen, welche mehr einer detaillierten Skizze ähneln, sind Prototypen die Umsetzung der Mockups, welche elementare Funktionalitäten des Endprodukts beinhalten und gegebenenfalls schon mit den vorgesehenen Programmiersprache oder Framework umgesetzt sind. Der Vorteil gegenüber Mockups ist, dass nicht nur die Struktur und das Design erprobt werden können, sondern auch tatsächlichen Teile der Funktionen. Diese Form der Visualisierung ist die aufwendigste und deshalb nicht geeignet für schnelles Feedback, jedoch für qualitativ wertvolles. Denn jedes UX Problem, welches im Prototypen sichtbar wird, kann vor der tatsächlichen Umsetzung behoben werden und somit Entwicklungskosten sparen. Dennoch sollte vor der Erstellung eines Prototyps klar festgelegt werden, wie hoch der Umfang des Prototyps ist und welche Ziele durch ihn erreicht werden sollen. Außerdem ist die Festlegung des Endgeräts, auf dem der Prototyp nutzbar sein soll, relevant für die Entwicklungskosten.\n"},{"uri":"/webhandbook/ui_ux/_2_3_evaluation/","title":"2.3 Evaluation von User Experience","tags":["UX","User Experience","Benutzererfahrung"],"description":"User Experience","content":"2.3 Evaluation Um die beschriebenen Komponenten umzusetzen und somit die UX zu optimieren, gilt es, diese fortlaufend zu evaluieren. Hierfür existieren verschiedene Methoden, welche in die Kategorien formative Evaluation oder summative Evaluation eingeordnet werden können. Ersteres beschreibt dabei fortlaufende Methoden zur Evaluation eines Produktes während der Entwicklung, wodurch Bereiche mit Verbesserungspotenzial identifiziert werden sollen. Summative Evaluationen hingegen werden kurz vor oder nach Abschluss einer Entwicklungsphase durchgeführt, um zu prüfen, inwieweit die Anforderungen an das Produkt und dessen Qualität erfüllt sind.\nWichtig ist dabei, dass auch immer der Nutzungskontext betrachtet werden muss. Dazu zählen Preim und Dachselt die Benutzergruppe, die Aufgabe und die Umgebung, in der ein interaktives System benutzt wird. Mit Umgebung ist tatsächlich die physische Umgebung gemeint, da beispielsweise das Nutzen einer Anwendung im Freien auf einem mobilen Endgerät sich von den Ansprüchen unterscheidet, die an eine interaktive Anwendung im Operationssaal gestellt werden. In Bezug auf Webanwendung steht vor allem die Betrachtung der Nutzung auf verschiedenen Endgeräten wie PC, Tablet oder Smartphone an erster Stelle. Außerdem der Sinn der Anwendung von Bedeutung, da beispielsweise eine Anwendung für Online-Banking möglichst seriös und nicht verspielt wahrgenommen werden soll. Im Gegensatz dazu stehen Webanwendungen für freizeitorientierte Angebote, die auch Spaß machen dürfen.\nInsgesamt wird empfohlen, mehrere Methoden zur Evaluation einer Anwendung zu nutzen und diese auch iterativ während der Entwicklung der Anwendung durchzuführen. Dadurch werden viele Aspekte erfasst und die bestmögliche UX geschaffen. Die Nielsen Norman Group zählte jedoch 2014 20 Methoden zu den gängigsten:\nUsability-Lab Studies - Ethnographic Field Studies - Participatory Design - Focus Groups - Interviews - Eyetracking - Usability Benchmarking - Moderated Remote - Usability Studies - Unmoderated Remote - Panel Studies - Concept Testing - Diary/Camera Studies - Customer Feedback - Desirability Studies - Card Sorting - Clickstream Analysis - A/B Testing - Unmoderated UX Studies - True-Intent Studies - Intercept Surveys - Email Surveys\nIm Folgenden sollen nun auf drei der Methoden genauer eingegangen werden.\nNutzerbefragungen\nEine konkrete Methode zur Evaluation der UX von Webanwendungen ist das Durchführen von Nutzerbefragungen. Diese zählen zu der Kategorie formative Evaluation und können online oder in Präsenz mit einer ausgewählten Nutzerschaft erfolgen. Letztere Variante liefert dabei im Gegensatz zu ersterem qualitative Ergebnisse statt quantitative. Von Interesse sind hierbei auch demografische Informationen über die Nutzer, da diese den Kontext der Antworten konkretisieren. Eine standardisierte Methode von Nutzerbefragungen ist der AttrakDiff-Fragebogen, welcher von Prof. Dr. Marc Hassenzahl entwickelt wurde. Es basiert auf seiner Idee von hedonistischen und pragmatischen Qualitäten, welche die Basis des Attraktivitätsurteils über die Anwendung bildet. Pragmatische Qualitäten sind dabei übliche Usabilityaspekte, während hedonistische eher Aspekte wie Spaß und Nutzungsfreude betrachten. Der Fragebogen besteht aus 28 Items, welche im Format eines semantischen Differentials abgefragt werden. Auf eine Skala von jeweils gegensätzlichen Adjektiven wie „verwirrend - übersichtlich“ oder „zu selbstorientiert - zu handlungsorientiert“ kann der Nutzer aus sieben Abstufungen wählen. Der jeweilige Mittelwert eines Items bildet den Skalenwert für pragmatische und hedonische Qualität, sowie der Attraktivität der Anwendung.\nEye Tracking\nEye Tracking (dt. Blickbewegungsmessung) ist eine summative Methode zur Evaluation der UX, welche die Bewegung des Blicks des Nutzers beobachtet. Auf einem niedrigeren Niveau ist auch das Mouse Tracking möglich, welches lediglich die Mausbewegung aufnimmt. Der Ablauf besteht darin, dass der Nutzer - meist ohne jegliche Vorkenntnisse - die Anwendung betrachten oder bei tiefergehenden Messungen festgelegte Aufgaben in der Anwendung durchführen muss. Dabei wird durch ein spezielles Eye Tracking Gerät oder bei einfachen Messungen mit einer üblichen Webcam seine Blickbewegung registriert. Zur Auswertung dieser Messung eignen sich Heat oder Opacity Maps oder Gazeplots, welche darstellen, wie der Nutzer die Anwendung wahrnimmt. Letzteres gibt sogar Aufschluss über die Reihenfolge, in welcher die Blickbewegung auf die Anwendung stattfindet. Je nach Intensität des Blicks zeigt sich dadurch beispielsweise die Dauer, die der Nutzer auf einer Area verbringt oder welche Elemente der Seite am meisten Aufmerksamkeit erregen oder komplett übersehen wurden. Die Bereiche der Anwendung, welche besonders deutlich wahrgenommen wurden, nennen sich Areas of Interest.\nFokusgruppen\nDie Fokusgruppe, auch Gruppendiskussion genannt, ist eine Technik, um Meinungen, Bedenken, Gefühle und Erfahrungen von den Teilnehmern zu sammeln. Der Unterschied zu einer Benutzerbefragung ist dabei, dass die Fokusgruppe von einem Diskussionsleiter moderiert wird und bis zu zwei Stunden dauern kann. Dies geschieht unter der Voraussetzung, dass die Einzelpersonen in der Gruppe mitdiskutieren, sodass eine Gruppendynamik entsteht. Üblicherweise geschieht dies mit sechs bis neun Personen, die der Zielgruppe angehören und mehrfach mit unterschiedlichen Personen durchgeführt. Mögliche Fragen, die hierbei beantworten, werden können, sind „Welche Inhalte und Funktionen werden momentan nicht genutzt und warum?“ oder „Welche Variante einer Idee, einer Funktion oder eines Designs bevorzugen die Nutzer?“. Diese Methode kann zu jedem Zeitpunkt der Entwicklung angewendet werden, jedoch ist die Methode Fokusgruppe alleine nicht aussagekräftig genug für eine umfassende Evaluierung. Dies ist darauf zurückzuführen, dass Teilnehmer zwar durch ein dynamisches Gespräch viel wertvolle Aspekte ansprechen, die Anwendung selbst aber bei der tatsächlichen Nutzung anders verwendet wird, als im Gespräch ausgedrückt.\n"},{"uri":"/webhandbook/website_rendering/_3_visual_guide/","title":"3 A Visual Guide on when to use which Rendering Mode","tags":["guide","rendering"],"description":"A Visual Guide on when to use which Rendering Mode","content":""},{"uri":"/webhandbook/ui_ux/_3_literaturverzeichnis/","title":"3 Literaturverzeichnis","tags":["literaturverzeichnis"],"description":"Literaturverzeichnis","content":"https://link.springer.com/book/10.1007%2F978-3-030-78221-4 Advances in Usability and User Experience | SpringerLink User Experience Modelle - Andreas Hinderks\nBen Shneiderman (8 goldenen Regeln nach Shneiderman) UX / UI findet Probleme im Bereich Funktion, Gestaltung und auf Aubau Heuristische Evaluation nach Nielsen, der auch die Umgebung der Anwender und die zur Verfügung stehende Informationen mit einbezieht\n(10 Usability Heuristics for User Interface Design)\nBlack Pattern (How Dark Patterns Trick You Online)\n(The Dark (Patterns) Side of UX Design | Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems) Unterscheidung UX Design und UI Design\nUsability und UX (Usability und UX kompakt)\nhttps://ieeexplore.ieee.org/abstract/document/9495855 (User Experience / User Interface (UX/UI) Design for Autistic Spectrum Disorder (ASD) Color Based Emotion Detection System: A Review)\nA Study on Understanding of UI and UX, and Understanding of Design According to User Interface Change\nUser-interface Design\nhttp://attrakdiff.de/sience.html\nGestaltungsunterstützende Evaluation von Software: Zur Effektivität und Effizienz des IsoMetricsL Verfahrens\nR. Kuhlen, W. Semar und D. Strauch, Grundlagen der praktischen Information und Dokumentation: Handbuch zur Einführung in die Informationswissenschaft und -praxis p. 431. (Usability Engineering Lifecycle)\nISO 9241 (Standard für MMI, Normen für UX etc)\nhttps://michaelgearon.medium.com/information-architecture-ia-in-ux-91dae4e3124d\nhttps://danewesolko.medium.com/peter-morvilles-user-experience-honeycomb-904c383b6886\nhttps://www.nngroup.com/articles/focus-groups/\nhttps://www.usability.de/leistungen/methoden/fokusgruppe.html\nDuchowski, A. T. (2003). Eye Tracking Methodology: Theory and Practice. doi:10.1007/978-1-4471-3750-4, URL: sci-hub.se/10.1007/978-1-4471-3750-4 (zuletzt aufgerufen am 28.1.2022)\nhttps://www.interaction-design.org/literature/topics/user-research\nhttps://www.interaction-design.org/literature/topics/user-scenarios\n"},{"uri":"/webhandbook/css_processing/_3_optimisation/","title":"3 Optimisation","tags":[],"description":"","content":"In addition to the features that support developers in designing stylesheets, there are also features of CSS processors that optimize existing CSS for speed and browser support.\nMinification The probably most popular CSS processing feature is minification. Most programming languages include characters that are not strictly part of the syntax but increase legibility. This means whitespace characters primarily, and to a lesser extent, the variable names a developer has chosen. Most CSS minifiers strip away comments and whitespace characters, which can lead to a reduction in file size up to 50%. This does not necessarily correlate with a 50% speed improvement, especially since most web servers compress their responses anyway, but it makes a difference nonetheless. The fewer characters there are to read, the less there are to compress, decompress and finally parse by the browser.\nA more complicated but not uncommon minification technique is also to minify class names. For example, a class called .form-check-input before minification might be reduced to very short identifiers, such as .ab. Similar to CSS modules, this method also requires integration with the HTML code in order to work.\nPolyfills Besides file-size reduction, CSS optimization also includes modifications to improve compatibility among different browsers. For instance, one use case is to automatically make a website compatible with right-to-left languages instead of performing these optimizations manually. Another example might be that a developer wants to use the #rrggbbaa hex color notation that has been introduced in browsers recently, where the opacity can be included in the hex notation. If a developer wants to use this notation but also wants compatibility with an older browser that does not support this syntax, they can use CSS processors to replace them. In this specific example, the PostCSS Color Hex Alpha[6] plugin would do the following:\nbody { background: #6ebd6ecc; } /* becomes */ body { background: rgb(110, 189, 110, 0.8); } Vendor Prefixes A subset of these compatibility features is the automatic addition of vendor prefixes. The idea behind prefixing certain CSS properties was to denote that their functionality was either experimental or not part of the standard, so they could be experimented with but would not be relied upon by web developers until they were properly standardized. Some of the most notable properties were animation, transition, box-shadow and even border-radius that were already implemented in most browsers, but only through these prefixes. This meant that to create a transition that works across all browsers did look like this:\n-webkit-transition: all 4s ease; -moz-transition: all 4s ease; -ms-transition: all 4s ease; -o-transition: all 4s ease; transition: all 4s ease; Because some of these features were already almost universally available, web developers used them. Automatic prefixing became a popular CSS processing feature to reduce the labor of writing the same line up to five times, just with different prefixes. The most notable prefixing tool is autoprefixer[7], where developers can target the browser versions they intend to support and add necessary prefixes.\nAn analysis from Rob O\u0026rsquo;Leary in 2021 has revealed that the number of properties that require prefixes has steadily gone down in recent years[8], and nowadays, browser vendors put new features behind user-controlled flags instead[9]. Still, there are good reasons to use prefixing today, for instance, simply to make websites compatible with older browsers that require these prefixes. Additionally, there are CSS properties that have 99% browser support with prefixes and significantly less without[8], even if most or all of them might not be as relevant as the prefixed versions of box-shadow or border-radius once were.\n"},{"uri":"/webhandbook/ci_cd/_3_/","title":"3 Unterschied zwischen CI und CD","tags":["CI","CD","Unterschied"],"description":"Unterschied zwischen CI und CD","content":"3 Der Unterschied zwischen CI und CD Continuous Integration (CI) und Continuous Deployment (CD) sind zwei moderne Ent- wicklungspraktiken, die von den Entwicklern häufig genutzt werden, um häufige Code- änderungen bereitzustellen. Während CI für Continuous Integration steht und der Prozess recht einfach ist, bedeutet CD Continuous Delivery oder Deployment. Von der Integration und dem Testen bis zur Auslieferung und Bereitstellung sind CI/CD die beiden wichtig- sten Konzepte im Entwicklungszyklus von Anwendungen. Kurz gesagt, beide sind wie Faktoren, die in die gleiche Richtung wirken, aber unterschiedliche Stärke besitzen.\n3.1 Continuous Integration (CI) Bei dieser Praxis der Softwareentwicklung wird der Code für die Freigabe zur Produk- tion vorbereitet, wobei sichergestellt wird, dass er zuvor die automatisierten Unit-Tests, Integrationstests und Systemtests durchlaufen hat. Wenn die Freigaben in der Staging- Umgebung verfügbar sind, ermöglicht CD den Softwareentwicklern die Freigabe zu ei- nem beliebigen Zeitpunkt mit nur einem einzigen Knopfdruck. Die Entscheidung zur Frei- gabe wird von menschlichen Entwicklern getroffen, und erst danach erfolgt die Freigabe.\n3.1.1 Vorteile von CI Ein Continuous Integration (CI) besitzt viele Vorteile. In diesem Teil werden wir einige auflisten.\n Quellcode Version Control System Erstellung des Quellcodes Statische Codeanalyse Automatisierte Unit-Tests durchführen Analyse der Codeabdeckung Errichtetes Artefakt Einstellung von Testgeräten Bereitstellung und Implementierung in der Testumgebung Automatisierte Funktionstests durchführen Bericht veröffentlichen Entwicklungsteam  3.2 Continuous Delivery (CD) CD erfolgt einen Schritt nach der Continuous Delivery. Ziel ist es, sicherzustellen, dass Code-Änderungen in der Produktion regelmäßig in einer neuen Version veröffentlicht werden. Dies ermöglicht es den Entwicklern, Änderungen vorzunehmen, und die Ände- rungen werden automatisch an die Endnutzer weitergegeben. Dies wird als das endgültige Ziel von Softwareunternehmen angesehen, die die entsprechenden Praktiken zusammen- führen. In der Code-Deployment-Praxis wird der Code in einer simulierten Umgebung ausgeführt und aktualisiert.\n3.2.1 Vorteile von CD Ein Continuous Delivery(CD) besitzt mehrere Vorteile, die wir einige hier auflisten wer- den.\n Bessere Entwicklungsprozesse Moral im Team Schneller Umstieg auf einen anderen Ansatzpunkt Verringerung der Risiken Schnellere Bereitstellung von Funktionen Schnelle Fehlerbehebungen.  "},{"uri":"/webhandbook/programming_languages/_3_verschiedene_websprachen/","title":"3 Verschiedene Web-Programmiersprachen","tags":["javascript","typescript","python","php","ruby"],"description":"Verschiedene Web-Programmiersprachen","content":"3.1 Web-Programmiersprachen Mittlerweile gibt es eine große Menge an verschiedenen Programmiersprachen. Jede Programmiersprache hat ihre Vorteile und Nachteile gegenüber einer anderen. Doch welche Programmiersprachen eignen sich für die Webentwicklung am besten? Gibt es überhaupt die eine Web-Programmiersprache?\nMit Web-Programmiersprachen können komplexe logische Anweisungen und Prozesse definiert werden. Jede Programmiersprache hat wie die verschiedenen Sprachfamilien auch ihre Eigenarten. In den folgenden Kapiteln werden die bekanntesten Vertreter der Web-Programmiersprachen kompakt vorgestellt.\n3.1.1 JavaScript Bekannt ist JavaScript als prototypbasierte Skriptsprache für Webseiten. Jedoch wird diese lightweight Sprache auch in anderen Umgebungen eingesetzt, wie beispielsweise Node.js oder Apache. Was bedeutet lightweight im Zusammenhang mit einer Programmiersprache? Lightweight Sprachen sind so designt, dass sie einen kleinen Memory-Footprint besitzen (wenig Speicher benötigen), einfach in verschiedenen Systemen zu implementieren sind und sie eine minimalistische Syntax aufweisen.\nJavaScript trägt zwar den Namen der objektorientierten Programmiersprache Java, doch wurden beide Sprachen in den frühen 90er-Jahren unabhängig voneinander entwickelt mit völlig unterschiedlichen Grundkonzepten.\nJe nach Bedarf lässt sich in JavaScript objektorientiert, prozedural oder funktional programmieren. Dies ist möglich durch den standardisierten Sprachkern ECMAScript. Dieser beschreibt eine dynamisch typisierte, objektorientierte, aber klassenlose Sprache. [1, 2, 46]\nObjektorientierte Programmierung\nObwohl JavaScript dank seines Sprachkerns objektorientierte Programmierparadigmen beinhaltet, kann es nicht als objektorientierte Programmiersprache angesehen werden. JavaScript unterstützt Grundelemente der Objektorientierung wie beispielsweise Datenkapselung, Polymorphie und Vererbung. Doch das wesentlichste Konzept Klassen bietet sie nicht. Mit ECMAScript 6 (kurz ES6) wurde jedoch das Schlüsselwort class eingeführt, mit dem es möglich ist, nun pseudo Klassen zu definieren. Doch sind diese nichts weiter als Funktionen - anstatt function ist es nun möglich, class zu verwenden. [10, 11]\nPrototyp\nJedes Objekt in JavaScript verfügt über die Eigenschaft prototype. Mit diesem Muster beziehungsweise Bauplan werden Objekte erzeugt. Anders als in objektorientierten und klassenbasierten Sprachen, wo Klassen das Muster für Objekte sind.\nPrototypen unterscheiden sich von Klassen dahingehend, dass auf Objekten eines Prototyps beliebige Operationen ausgeführt werden können. Das geht bei Klassen nicht. Ein weiterer Unterschied ist, wenn aus einer Klasse ein Objekt gebildet wird, entsteht eine Instanz. Bei Objekten eines Prototypen referenziert das erzeugte Objekt auf den Prototypen. Auch ist es möglich, das Objekte eines Prototyps nachträglich mit Eigenschaften und Methoden ergänzt werden können. Das geht bei Klassen auch nicht. [2, 47]\nTypisierung\nJavaScript ist ein Vertreter der dynamischen Typisierung. Das bedeutet, dass die Typprüfung erst zur Laufzeit passiert - beispielsweise die Prüfung des Datentyps einer Variable. [2]\nTypsicherheit\nIn Sachen Typsicherheit nimmt es JavaScript nicht allzu ernst. In großen Projekten ist JavaScript bezüglich der dynamischen Typsicherheit nicht einfach zu handhaben, da Typen schlichtweg nicht angegeben werden müssen. [5]\nFrontend\nJavaScript zählt wohl mit zu den beliebtesten Programmiersprachen überhaupt und die Sprache unterstützt wohl die meisten Frameworks und Bibliotheken, die es für den Frontend-Bereich gibt. JavaScript ist überaus beliebt und dynamisch und unterstützt unter anderem folgende Frontend-Frameworks und Bibliotheken: Angular, React, Vue.js, Ember.js, Aurelia, und noch viele mehr! [19, 48, 49]\nBackend\nWie beim Frontend, zählt JavaScript auch beim Backend zu den beliebtesten Programmiersprachen überhaupt. JavaScript unterstützt auch im Bereich Backend eine vielzahl von verschiedenen Frameworks und Bibliotheken: Node.js, Next.js, Express.js, Meteor, und mehr. [49, 50]\n3.1.2 TypeScript Einer der häufigsten auftretenden Fehler bei der Programmierung mit JavaScript sind Typfehler. Da Typen bei JavaScript nicht angegeben werden müssen, passiert es häufig, das ein anderer Typ übergeben wird, als erwartet und dadurch zahlreiche Fehler entstehen können. Das Ziel von TypeScript ist ein statischer Type Checker für JavaScript Programme darzustellen. Bevor das Programm ausgeführt wird, wird überprüft, ob die Typen im Programm korrekt sind. Typescript bietet dabei alle JavaScript Funktionalitäten und zusätzlich dazu ein eigenes Typsystem. JavaScript bietet beispielsweise primitive Datentypen wie string oder number, überprüft jedoch nicht, ob diese auch konsistent zugewiesen werden. TypeScript tut das. [31, 32, 33]\nObjektorientierte Programmierung\nDie objektorientierte Programmierung mit TypeScript erfolgt nach den gleichen Prinzipien wie in JavaScript. TypeScript unterstützt auch dabei auch JavaScript-”Klassen”. Des Weiteren werden weitere typische Pattern wie die Implementierung von Interfaces, Vererbung und statische Methoden unterstützt. [31]\nTypisierung\nTypeScript ist mit seinem statischen Typsystem ein Vertreter der statischen Typisierung. Die Verwendung dieses ist jedoch optional, weshalb auch das Schreiben von dynamisch typisierten Code möglich ist. [31, 33]\nTypsicherheit\nTypeScript verbessert die Typsicherheit von JavaScript-Programmen, beispielsweise dadurch, das nun Typen angegeben werden müssen. Allerdings ist auch die Typsicherheit von TypeScript noch ausbaufähig, weshalb im Jahr 2014 das Projekt: Safer TypeScript von Microsoft Research entwickelt und im Juli desselben Jahres veröffentlicht wurde. Hierbei soll die Typsicherheit durch eine Kombination von statischer und dynamischer Überprüfungen gewährleistet werden. [31, 32, 34]\nFrontend\nTypeScript ist mittlerweile eine überaus beliebte Programmiersprache im Bereich Frontend-Entwicklung. Laut einem Bericht von State of Frontend aus dem Jahr 2020, haben 94% der befragten Frontend-Entwickler angegeben, dass sie am liebsten mit TypeScript entwickeln. Weitere Ergebnisse des Berichts sind auf der entsprechenden Webseite nachzulesen: https://tsh.io/state-of-frontend/ [61]\nBackend\nSeit Node.js es ermöglicht auch mit JavaScript im Backend-Bereich zu entwickeln, gewinnt auch TypeScript an Beliebtheit bei der Backend-Entwicklung. Besonders dadurch, das TypeScript sowohl im Backend als auch im Frontend verwendet werden kann, sorgt dies für eine positive Entwicklererfahrung, da nun nicht mehr zwischen verschiedenen Programmiersprachen gewechselt werden muss.\n3.1.3 Python Python ist eine zu interpretierende und interaktive Programmiersprache. Ein Ziel der Programmiersprache Python ist eine sehr einfache und übersichtliche Syntax. Wodurch auch Nicht-Programmierern der Einstieg in die Sprache leicht fallen soll. Python verfügt unter anderem über Module, Klassen, Exceptions und High-Level dynamische Datentypen. [35, 36]\nObjektorientierte Programmierung\nPython ist eine höhere und objektorientierte Programmiersprache. Mit dem Schlüsselwort class können Klassen definiert werden, welche Attribute und Methoden beinhalten.\nTypisierung\nPython ist Vertreter der dynamischen Typisierung. [35]\nTypsicherheit\nSeit Version 3.6 sind Typangaben für Variablen bei Python möglich. Vorher erfuhr Python die Typen erst zur Laufzeit und Variablen mussten nicht einem speziellen Typen zugewiesen werden. Die sogenannten Type Hints in Python 3.6 fügen Variablen oder anderen Programmobjekten Typinformationen hinzu. So kann nun auch der Rückgabewert einer Funktion vordefiniert werden. Durch die dynamische Typisierung und den Type Hints bietet Python eine hohe Typsicherheit. [35]\nFrontend\nEs ist möglich, Python im Frontend zu nutzen. Dies wird jedoch nicht gängige Praxis, da meist JavaScript, sowie ihre Bibliotheken benötigt werden. Außerdem muss Python-Code vorher geparst und ausgeführt werden. Dadurch ist Python-Code langsamer, als andere Programmiersprachen [36, 62].\nBackend\nAls Backend-Programmiersprache ist Python im Vergleich zum Frontend wesentlich beliebter. Einer der Gründe dafür ist die einfache Lesbarkeit von Python. Des Weiteren unterstützen zahlreiche Web-Frameworks mittlerweile Python, dazu zählen beispielsweise Django oder Flask. [37]\n3.1.4 PHP Ist die Rede von Web-Programmiersprachen, so spielt die Skriptsprache PHP eine überaus große Rolle. PHP ist die mit Abstand am häufigsten serverseitig verwendete Programmiersprache zur Erstellung von Webseiten. Die Syntax von PHP ist angelehnt an den Programmiersprachen C und Perl. Anders als beispielsweise bei JavaScript, ist PHP eine serverseitig interpretierte Skriptsprache, mit der es möglich ist, Webseiten dynamisch zu erzeugen, sowie Daten aus Benutzereingaben und Datenbanken zu verarbeiten.\nBei serverseitigem Code wird der Quelltext nicht direkt an den Webbrowser übermittelt, sondern an einen Interpreter auf dem Webserver. Der PHP-Interpreter schickt die Ausgabe an den Browser - ein HTML-Dokument. [51, 52]\nWarum PHP und nicht rein HTML?\nHTML oder HTML-Dateien sind rein statisch. Zum Beispiel: Bei der Erstellung einer Tabelle mit einer bestimmten Anzahl an Einträgen kann nur diese bestimmte Anzahl angezeigt werden. Mit PHP ist das flexibel beziehungsweise dynamisch möglich. Theoretisch alles, was auf einer Webseite dynamisch angezeigt werden soll, ist mit PHP möglich - beispielsweise ein Besuchercounter oder Einträge in einem Gästebuch. [53]\nObjektorientierte Programmierung\nIn PHP ist die objektorientierte Programmierung möglich. Dadurch wird PHP-Code leichter wartbar und ist einfacher wiederverwendbar. [51, 54]\nTypisierung\nWie bei vielen anderen Skriptsprachen auch, ist PHP ein Vertreter der dynamischen Typisierung beziehungsweise PHP ist schwach typisiert. Das bedeutet, dass die Typprüfung erst zur Laufzeit passiert - beispielsweise die Prüfung des Datentyps einer Variable. [55]\nTypsicherheit\nPHP ist eine schwach typisierte Programmiersprache und somit ist es nicht möglich, typsicher zu deklarieren. Jedoch gibt es bei PHP das Type Hinting mit dem es Funktionen ermöglicht, spezifische Parameter zu erzwingen. [56, 57]\nFrontend und Backend\nPHP unterstützt unter anderem folgende Frameworks: Symfony, Laravel, CodeIgniter, CakePHP oder Phalcon. [58]\n3.1.5 Ruby Ruby ist eine dynamische Programmiersprache, die sich produktiv einsetzen lässt. Sie zeichnet sich aus durch eine elegante und leicht zu lesende und schreibende Syntax. Ruby ist eine objektorientierte Programmiersprache, unterstützt aber weitere Programmierparadigmen, wie prozedurale und funktionale Programmierung. Die wohl größte Verbreitung findet Ruby im Einsatz als Webserver-Skriptsprache. [42]\nObjektorientierte Programmierung\nRuby ist von Grund auf objektorientiert, was bedeutet, dass in Ruby ausnahmslos jeder Wert ein Objekt und jede Funktion eine Methode ist. Selbst Klassen sind Objekte. Die Objekte in Ruby sind dynamisch, was bedeutet, dass es auch möglich ist, prototypenbasiert zu programmieren. Damit können Objekte eigene Methoden haben. [42]\nTypisierung\nRuby ist Vertreter der dynamischen Typisierung und ist stark typisiert. [42]\nTypsicherheit\nWie bei anderen Vertretern der dynamischen Typisierung auch ist es bei Ruby nicht möglich, typsicher zu deklarieren. [42]\nFrontend\nRuby wird teilweise auch für den Frontend-Bereich eingesetzt. Dennoch wird Ruby mehr als Backend-Programmiersprache gesehen als Frontend. Um Ruby im Frontend einzusetzen, muss Ruby-Quellcode in JavaScript-Code umgewandelt werden. Mit Ruby2JS, einer Ruby Erweiterung können Entwickler in Ruby-Code schreiben und den Code dann in JavaScript-Code umwandeln lassen. [59]\nBackend\nRuby ist eine überaus beliebte Programmiersprache für den Backend-Bereich. Das wohl bekannteste Backend-Framework für Ruby ist Ruby on Rails. Das beliebteste Feature von Ruby on Rails ist die Model-View-Controller-Architektur (kurz MVC). Dadurch ermöglicht das Framework, alle Code-Vorgänge separat durchzuführen. Neben Ruby on Rails gibt es noch weitere Backend-Frameworks wie: Sinatra, Roda oder auch Camping. [41, 60]\n"},{"uri":"/webhandbook/ci_cd/_4_/","title":"4 CI/CD-Werkzeuge","tags":["CI","CD","Werkzeuge","Jenkins","Bitbucket","Travis CI","GitLab"],"description":"CI/CD-Werkzeuge","content":"4 CI/CD-Werkzeuge Es gibt heutzutage eine ganze Menge Werkzeuge für CI/CD. In diesem Kapitel werden wir einige der besten Werkzeuge nennen.\n Jenkins Bitbucket Travis CI GitLab  4.1 Jenkins Jenkins ist ein Open-Source-Tool zur kontinuierlichen Integration, das in Java entwickelt wurde. Bei jeder Änderung des Codes einer Anwendung im Konfigurationsmanager über- nimmt Jenkins automatisch die Aufgabe, die Anwendung neu zu kompilieren und zu te- sten. Für diesen zweiten Schritt integriert Jenkins das Open-Source-Testframework von JUnit. Wenn ein Fehler entdeckt wird, benachrichtigt Jenkins den Entwickler, damit dieser das Problem beheben kann. Dies ist natürlich ein sehr vorteilhaftes Entwicklungsverfah- ren. Jenkins ist ein Fork des Hudson-Tools und kann an einen Servlet-Server wie Apache Tom- cat angebunden werden oder auf einem eigenen eingebetteten Webserver basieren. Es ist über einen Webbrowser zugänglich und mit den gängigsten Versionsverwaltungssystemen wie z. B. Git oder Subversion kompatibel. Standardmäßig unterstützt es Continuous Inte- gration (CI) Pipelines, die auf den Build-Tools Apache Ant und Apache Maven basieren.\n4.2 Bitbucket Im Jahr 2008 wurde Bitbucket als Service für SaaS (Software as a Service) gegründet, der inzwischen in Bitbucket Cloud umbenannt wurde. Es handelt sich dabei um mehr als nur ein Werkzeug zur Verwaltung von Softwareversionen, das auf den Open-Source- Revisionskontrollsystemen Git und Mercurial basiert. Es wird von der australischen Firma Atlassian herausgegeben und umfasst auch einen Projektmanagementbereich, einen Pla- nungsmanager, eine Umgebung für die Zusammenarbeit am Quellcode, aber auch Test- und CI/CD-Funktionen für die kontinuierliche Integration und Bereitstellung. Bei entsprechendem Bedarf kann Bitbucket auf andere Tools zurückgreifen, die Atlas- sian parallel vermarktet: Bamboo für die kontinuierliche Integration, Confluence für die Zusammenarbeit, Crucible für die Verwaltung von Code-Reviews, Fisheye für die Revi- sionskontrolle (über eine Suchmaschine) oder auch Jira und Trello für das Projektmana- gement.\n4.3 Travis CI Travis CI ist eine Open-Source-Software zur kontinuierlichen Integration, die unter der MIT-Lizenz erhältlich ist. Mit Travis CI lassen sich in der Entwicklung befindliche Anwendungen oder Software nicht nur testen, sondern auch automatisch bereitstellen. Außerdem ist Travis CI ein ko- stenloses Werkzeug für Open-Source-Projekte.\n4.4 GitLab GitLab ist eine kollaborative Open-Source-Entwicklungsplattform, die von der gleichna- migen amerikanischen Firma veröffentlicht wird. GitLab umfasst alle Phasen des De- vOps. Die Software basiert auf den Funktionen der Git-Software und ermöglicht es, Quellcode-Repositorys zu verwalten und die verschiedenen Versionen des Quellcodes zu steuern. Die Software eignet sich besonders für Entwickler, die ein reaktionsschnelles und leicht verständliches Tool benötigen.\n"},{"uri":"/webhandbook/programming_languages/_4_html_css/","title":"4 HTML und CSS","tags":["html","css"],"description":"HTML und CSS","content":"Sowohl HTML (H yper t ext M arkup L anguage) als auch CSS (C ascading S tyle S heets) sind keine Programmiersprachen.\nHTML ist eine Auszeichnungssprache, welche verwendet wird, um eine Webseite zu strukturieren. Die Sprache besteht dabei aus sogenannten Tags, welche um Inhalte herum platziert werden, um diese beispielsweise als Link zu kennzeichnen. [38]\nCSS ist eine Stylesheet-Sprache, die es erlaubt, das Aussehen von Elementen festzulegen. So kann mit CSS beispielsweise die Schriftfarbe angepasst werden. Das CSS wird mit einem HTML-Dokument verknüpft, so das dieses auf die Regelsätze im CSS-Dokument zugreifen kann. Ein Regelsatz besteht dabei aus einem Selektor, dieser bestimmt, auf welche Elemente der Regelsatz angewendet werden soll und aus einer oder mehreren Deklarationen. Eine Deklaration beinhaltet dabei eine Eigenschaft - beispielsweise die Farbe - und den Eigenschaftswert - beispielsweise rot. [39]\nHTML und CSS sind beides wichtige Bestandteile bei der Webentwicklung, die jedoch nicht als Programmiersprachen angesehen werden können.\n"},{"uri":"/webhandbook/css_processing/_4_popular_tools/","title":"4 Popular Tools","tags":[],"description":"","content":"There are four very popular CSS processing tools. They all support some of the features mentioned above, but none of them support them all. Further, some of them can be used together, but again not all.\nSass Sass[10] is the oldest of the four presented tools, with the initial release in 2006. It has a large set of features that extend the CSS syntax, like nesting, functions or variables, and supports two syntaxes. The original syntax (syntactically awesome style sheets, .sass), uses indention and line breaks instead of curly braces and semicolons. Later another syntax was added that is similar to CSS block formatting (Sassy CSS, .scss).\nLess The Less[11] processor was created after Sass, and as such, they have near feature-parity. The language was designed to be very close to CSS and, CSS block formatting syntax. Even though Less can be precompiled to CSS as the other tools, it is also possible to ship and run the compiler in the browser.\nWhile Sass uses $ to denote variables, Less employs @-symbols, which has the drawback that some parts of the modern CSS spec, such as media queries or animations, also use it for other purposes, which can be confusing.\nStylus The third stylesheet processor that appeared in 2010 and is influenced by Sass and Less is Stylus[12], hence the set of features is very similar. The big differentiator of Stylus is its minimalist syntax, which makes line-breaks, and semicolons optional, comparable to Sass, and even go a step further and makes colons optional as well.\nStylus adoption is relatively low in comparison to Sass and Less[13]. Especially built-in support in IDEs, Editors and bundlers is lower. But most popular development tools have extensions available.\nPostCSS PostCSS[14] is different from the previous tools in so far that it is less a CSS processor in of itself, and instead a framework with which plugins can modify CSS. First, the input CSS is parsed into a syntax tree on which plugins can perform modifications, once they are done PostCSS transforms the modified tree back into CSS.\nThe default parser for PostCSS can only parse CSS; foreign syntax, as it is introduced by Less, Sass or Styles first needs to be compiled down to CSS. Therefore, it is not uncommon that PostCSS is used in conjunction with one of these languages. Also, due to the available range of plugins PostCSS can not only be used for minification and auto prefixing, but also as a linter or formatter.\n"},{"uri":"/webhandbook/website_rendering/_4_sources/","title":"4 Sources","tags":["sources","rendering"],"description":"Sources","content":"  Amsive Digital. (2014, 7. Juli). What Does It Mean To “Render” a Webpage?. Amsive Digital.\n https://www.amsivedigital.com/insights/performance-creative/rendering-a-webpage-with-google-webmaster-tools/ (Zugegriffen am 25. November 2021, 11:23 Uhr)\n   Ibrahim, K. (2020, 6. Oktober). Gray Area on When to use Different Rendering Modes CSR, SSR, SSG. Medium.\n URL: https://kirillibrahim.medium.com/gray-area-on-when-to-use-different-rendering-modes-csr-ssr-ssg-214a636a24a4 (Zugegriffen am 25. November 2021, 11:32 Uhr)\n   Jacquart, G. (2020, 14. Juni). SPA, SSG, SSR and JAMStack: a front-end acronyms guide. Gitconnected.\n URL: https://levelup.gitconnected.com/spa-ssg-ssr-and-jamstack-a-front-end-acronyms-guide-6add9543f24d (Zugegriffen am 25. November 2021, 11:27 Uhr)\n   Miller, J., Osmani, A. (2019, 26. November). Rendering on the Web. Developers Google.\n URL: https://developers.google.com/web/updates/2019/02/rendering-on-the-web (Zugegriffen am 25. November 2021, 11:45 Uhr)\n   Nielsen, E. (2021, 16. Juni). What is the Difference Between SPAs, SSGs, and SSR? GraphCMS.\n URL: https://graphcms.com/blog/difference-spa-ssg-ssr (Zugegriffen am 25. November 2021, 11:38 Uhr)\n   Nuxt.js. (o. D.). Server side rendering. Nuxt.js.\n URL: https://nuxtjs.org/docs/concepts/server-side-rendering/ (Zugegriffen am 25. November 2021, 11:42 Uhr)\n   Nuxt.js. (o. D.). Static Side Generation. Nuxt.js.\n URL: https://nuxtjs.org/docs/concepts/static-site-generation (Zugegriffen am 25. November 2021, 11:43 Uhr)\n   Packt. (o. D.). Types of applications. PacktPub.\n URL: https://subscription.packtpub.com/book/web_development/9781789952698/2/ch02lvl1sec05/types-of-applications (Zugegriffen am 25. November 2021, 11:47 Uhr)\n   Qarea. (2020, 13. Oktober). Webpage Rendering: How It Works + Tips on Optimization. Qarea.\n URL: https://qarea.com/blog/webpage-rendering-how-it-works-tips-on- optimization (Zugegriffen am 25. November 2021, 11:30 Uhr)\n   Ram, P. (2021, 19. Oktober). Server Side Rendering (SSR) vs. Client Side Rendering (CSR) vs. Pre-Rendering using Static Site Generators (SSG) and client-side hydration. Medium.\n URL: https://medium.com/@prashantramnyc/server-side-rendering-ssr-vs-client-side-rendering-csr-vs-pre-rendering-using-static-site-89f2d05182ef (Zugegriffen am 25. November 2021, 11:49 Uhr)\n   Seobility. (o. D.). Rendering. Seobility.\n URL: https://www.seobility.net/en/wiki/Rendering (Zugegriffen am 25. November 2021, 11:22 Uhr)\n   Trott, G. (2019, 16. November). What is a static website? Dev.to\n URL: https://dev.to/gtanyware/what-is-a-static-website-4k3o (Zugegriffen am 25. November 2021, 11:52 Uhr)\n   Vega, C. (2017, 28. Februar). Client-side vs. server-side rendering: why it’s not all black and white. FreeCodeCamp.\n URL: https://www.freecodecamp.org/news/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d/ (Zugegriffen am 25. November 2021, 11:43 Uhr)\n   "},{"uri":"/webhandbook/ci_cd/_5_/","title":"5 Beispiel einer Pipeline","tags":["CI","CD","Beispiel Pipeline"],"description":"Beispiel einer Pipeline","content":"5 Beispiel einer Pipeline (mit GitLab) In diesem Kapitel wird ein Beispiel über die Einrichtung einer Pipeline auf Gitlab vorgestellt.\n5.1 Installieren des Gitlab-Runners unter Ubuntu GitLab-Runner ist eine Anwendung, die mit GitLab CI/CD zusammenarbeitet, um Auf- träge in einer Pipeline auszuführen. Die Applikation kann unter folgenden URL herunter- laden werden:\nHerunderladen der GitLab-Runner-Installationsdatei für Ubuntu-OS:\ncurl -LJO \u0026quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/ gitlab-runner_amd64.deb\u0026quot; Herunterladen der Gitlab-Runner-Installationsdatei: GitLab-Runner installieren:\nsudo dpkg -i gitlab-runner_amd64.deb Installieren des Gitlab-Runners: Überprüfung der installierten Version:\ngitlab-runner verify Ergebnis der Überprüfung: 5.2 Registrierung des GitLab-Runner auf Gitlab Repository Nach der erfolgreichen Installation des Gitlab-Runners, muss es für die gewünschten Gitlab-Repository registriert werden. Dafür braucht man zwei Informationen der Reposi- tory: die Url zur Registierung und den Token. Um diese Informationen zu haben, muss zuerst eine Gitlab-Repository erstellt werden. Nach der Erstellung der Gitlab-Repository, kann die erforderlichen Informationen in der Repository unter Setting =\u0026gt; CI/CD =\u0026gt; Runners geholt werden. Danach kann die Informationen direkt aus der Seiten kopiert werden (siehe folgenden Abbildung):\nAuf dem Server wird folgenden Befehl ausgeführt, um den Gitlab-Runner in das er- stellten Gitlab-Projekt-Repository zu registrieren.\nRegistierung des Gitlab-Runners:\nsudo gitlab-runner registrieren Um die Registierung durchgeführt werden zu können, wird es aufgefordert, folgenden Daten einzugeben:\n Enter the Gitlab instance URL: (Geben Sie die GitLab-Instanz-URL ein) Enter the registration token: (Geben Sie das Registrierungstoken ein) Enter a description for the runner: (Geben Sie eine Beschreibung für den Läufer ein) Enter tags for the runner: (Geben Sie Tags für den Runner ein) Enter an executor: (Geben Sie einen Executor ein)  Die Informationen für die URL und den Token werden aus der Repository eingefügt. Die nächsten zwei Daten über Beschreibung und Tag können beliebig eingefügt werden. Für die letzte Option kann es einfach mit Shell ausgewählt werden.\nRegistrierung des Gitlab-Runners: Nach der erfolgreichen Einstellung wird in der Repository der registrierten Runneraufgetaucht.\nErgebnis nach der Registrierung des Gitlab-Runners: Der GitLab-Runner befindet sich im aktivierten Zustand. Wenn ein Runner bearbeitet werden muss, wird es auf den Knopf Pause geklickt. Ebenfalls wenn es entfernt werden soll, auf den Kopf Remove Runner. Mehrere Runner können für ein Projekt registriert werden. Wenn es ein neuer Commit gibt, ruft es basierend auf dem Tag den entsprechenden Runner zum Ausführen auf.\n5.3 Konfigurationsdatei .gitlab-ci.yml Die Datei .gitlab-ci.yml ist eine Konfigurationsdatei im YAML-Format. Die Parameter der Datei können unter https://docs.gitlab.com/ee/ci/yaml/ eingesehen werden. Der Inhalt der Datei sieht wie folgt aus:\n1 # This file is a template, and might need editing before it works on your project. 2 stages: 3 - build 4 - test 5 - deploy 6 build_code_job: 7 stage: build 8 script: 9 - echo \u0026quot;Build Code\u0026quot; 10 tags: 11 - develop 12 test_code_job: 13 stage: test 14 script: 15 - echo \u0026quot;Test Code\u0026quot; 16 tags: 17 - develop 18 deploy_code_job: 19 stage: deploy 20 script: 21 - echo \u0026quot;hello world\u0026quot; 22 tags: 23 - develop Diese Datei muss als Nächstes in das Stammverzeichnis des Projekts gelegt werden. Per git-Befehl funktioniert es wie folgt:\ngit add .gitlab-ci.yml git commit -m \u0026quot;.gitlab-ci.yml hinzufügen\u0026quot; git push origin master Bei einem neuen Commit führt der GitLab Runner der Pipeline aus: Um die Log-Datei anzusehen, wird es auf das Wort passed geklickt: Der GitLab-Runner-Klon-Quellcode-Ordner kann im Log eines Jobs gefunden werden: "},{"uri":"/webhandbook/css_processing/_5_integration/","title":"5 Integration and Considerations","tags":[],"description":"","content":"Integration The presented processing tools all come with command-line interfaces, which take multiple input files and usually a config to generate or transform CSS.\nUsually, these transformations are done in a more complex build pipeline for the entire project, using a bundler or task-runner. Especially Sass and Less have multiple implementations in different languages. Which one is most suitable often depends on the bundler or task-runner that is being used.\nConsiderations CSS processors are optional tools that offer a wide array of capabilities for different parts of a web project. Because many modern web projects use a bundler or task-runner already, including these tools is mostly trivial.\nOptimizations such as minification are easy to integrate and can instantly improve a web page\u0026rsquo;s performance. They don\u0026rsquo;t require the adaption of a different language or different patterns.\nOn the other hand, Authoring features are only as good as how they are used. If a project can benefit from these features has to be assessed the same way other programming patterns and frameworks are.\n"},{"uri":"/webhandbook/programming_languages/_5_vergleich_tabellenform/","title":"5 Vergleich in Tabellenform","tags":["vergleich"],"description":"Vergleich in Tabellenform","content":"Im folgenden Abschnitt werden die fünf vorgestellten Programmiersprachen tabellarisch nach ihren Eigenschaften verglichen, um für einen groben Überblick zu sorgen.\nAuffällig hierbei ist, dass alle Programmiersprachen sowohl im Frontend als auch im Backend verwendet werden können, was nicht notwendigerweise bedeutet, dass das auch so praktiziert wird. Außerdem ist bei allen vorgestellten Programmiersprachen objektorientiertes Programmieren möglich beziehungsweise manche Sprachen bieten ein ähnliches Schema für Klassen.\nAlle 5 Programmiersprachen sind zudem dynamisch typisiert. Einzige Ausnahme bietet TypeScript mit seiner optional statischen Typisierung.\n"},{"uri":"/webhandbook/programming_languages/_6_fazit/","title":"6 Fazit","tags":["fazit"],"description":"Fazit","content":"Es gibt nicht die eine Programmiersprache für die Webentwicklung. Jede Programmiersprache hat Vor- und Nachteile gegenüber einer anderen. Dazu zählen neben der Typsicherheit, Typisierung und objektorientierten Programmierung auch die Komplexität der Programmiersprache. So ist beispielsweise Python durch die einfache Syntax leichter verständlich für Nicht-Informatiker. Es ist schlicht notwendig zu entscheiden, für welchen Anwendungszweck welche Sprache angewendet werden soll. Python wird beispielsweise häufiger in einem wissenschaftlichen Zusammenhang verwendet, da dort zahlreiche Bibliotheken für viele Anwendungen existieren sowie Python sich besonders für den Bereich Machine Learning als auch KI besser eignet. Ein weiteres Beispiel: Soll die Anwendung eine simple Webseite inklusive Texten und Bildern sein, so ist die Umsetzung mit JavaScript wesentlich komfortabler als mit Python. [62, 63]\nEinen aktuellen Blick auf die beliebtesten Sprachen und Frameworks im Bereich Frontend liefert ein Bericht aus dem Jahr 2020 [61]: https://tsh.io/state-of-frontend/#ebook\nHierbei gewann React mit deutlichem Abstand. Darauf folgten Angular und Vue.js. Alle drei Frameworks nutzen dabei JavaScript und / oder TypeScript als Web-Programmiersprache. Daraus lässt sich schließen, dass diese beiden Sprachen zumindest im Frontend momentan die wohl beliebtesten Programmiersprachen sind.\n"},{"uri":"/webhandbook/ci_cd/_6_/","title":"6 Literatur/References","tags":["CI","CD","Literatur","References"],"description":"Literatur/References","content":"6 Literatur/References Die Verfassung dieses Buches werden durch die folgenden Quellen unterstützt:\n https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment https://www.splunk.com/de-de/data-insider/what-is-ci-cd-pipeline.html https://semaphoreci.com/cicd https://www.redhat.com/en/topics/devops/what-cicd-pipeline https://www.journaldunet.fr/web-tech/guide-de-l-entreprise-digitale/1443814-gitlab-tout-savoir-sur-la-plateforme-de-devops-open-source/ https://www.redhat.com/fr/topics/devops/what-is-ci-cd https://www.journaldunet.fr/web-tech/guide-de-l-entreprise-digitale/1443820-jenkins-logiciel-star-de-l-integration-continue-open-source-gratuit/ https://www.thedigizones.com/blog/what-is-continuous-integration-ci-continuous-deployment-cd/  "},{"uri":"/webhandbook/css_processing/_6_literature/","title":"6 Literature","tags":[],"description":"","content":" Deconfusing Pre- and Post-processing — https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3 Still using CSS preprocessors in 2020? — https://medium.com/@bartsis/still-using-css-preprocessors-in-2020-aa893a476bc4 How to calculate percent minus px in SASS ? — https://www.geeksforgeeks.org/how-to-calculate-percent-minus-px-in-sass/ Nesting Style Rules — https://sass-lang.com/documentation/style-rules#nesting css-modules — https://github.com/css-modules/css-modules PostCSS Color Hex Alpha Plugin — https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-color-hex-alpha autoprefixer — https://github.com/postcss/autoprefixer Is Vendor Prefixing Dead? — https://css-tricks.com/is-vendor-prefixing-dead/ Vendor Prefix - MDN — https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix Sass: Syntactically Awesome Style Sheets — https://sass-lang.com/ Less CSS — https://lesscss.org/ CSS Style Syntax — https://stylus-lang.com/ Poll Results: Popularity of CSS Preprocessors — https://css-tricks.com/poll-results-popularity-of-css-preprocessors/ PostCSS - a tool for transforming CSS with JavaScript — https://postcss.org/  "},{"uri":"/webhandbook/programming_languages/_7_literaturverzeichnis/","title":"7 Literaturverzeichnis","tags":["literaturverzeichnis"],"description":"Literaturverzeichnis","content":" [1] “JavaScript”, Mozilla, Link: https://developer.mozilla.org/de/docs/Web/JavaScript (letzter Zugriff am 30.12.2021) [2] “JavaScript”, Wikipedia, Link: https://de.wikipedia.org/wiki/JavaScript (letzter Zugriff am 30.12.2021) [3] “ECMAScript”, Wikipedia, Link: https://en.wikipedia.org/wiki/ECMAScript (letzter Zugriff am 30.12.2021 / 13:37) [4] “Memory footprint”, Wikipedia, Link: https://en.wikipedia.org/wiki/Memory_footprint (letzter Zugriff am 30.12.2021) [5] “Was ist Typsicherheit?”, Dev Insider, Link: https://www.dev-insider.de/was-ist-typsicherheit-a-955933/ (letzter Zugriff am 30.12.2021) [6] \u0026ldquo;Typsicherheit\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Typsicherheit (letzter Zugriff am 18.01.2022) [7] “Statische Typisierung”, Wikipedia, Link: https://de.wikipedia.org/wiki/Statische_Typisierung (letzter Zugriff am 30.12.2021) [8] “Dynamische Typisierung”, Wikipedia, Link: https://de.wikipedia.org/wiki/Dynamische_Typisierung (letzter Zugriff am 30.12.2021) [9] \u0026ldquo;Typisierung (Informatik)\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Typisierung_(Informatik) (letzter Zugriff am 18.01.2022) [10] “Is JavaScript a (true) OOP language?”, Andrea Chiarelli, Link: https://medium.com/@andrea.chiarelli/is-javascript-a-true-oop-language-c87c5b48bdf0 (letzter Zugriff am 30.12.2021) [11] “OOP in JavaScript”, Demir Jasarevic, Link: https://www.demirjasarevic.com/oop-javascript/ (letzter Zugriff am 30.12.2021) [12] “Web-Programmiersprachen: Die besten Sprachen für die Webentwicklung”, MediaartJena, Link: https://www.mediaart-jena.de/index.php/2020/03/09/web-programmiersprachen-die-besten-sprachen-fuer-die-webentwicklung/ (letzter Zugriff am 30.12.2021) [13] “Perl, PHP, Python Ein Vergleich”, Alvar C.H. Freude, Link: https://alvar.a-blast.org/vortraege/scriptsprachen-vergleich.pdf (letzter Zugriff am 30.12.2021) [14] “Top 7 Programming Languages for Backend Web Development”, GeeksforGeels, Link: https://www.geeksforgeeks.org/top-7-programming-languages-for-backend-web-development/ (letzter Zugriff am 01.01.2022) [15] “Frontend”, DigitalWiki, Link: https://www.digitalwiki.de/frontend/ (letzter Zugriff am 01.01.2022) [16] “Top 10 Frontend-Sprachen”, Back4App, Link: https://blog.back4app.com/de/top-10-frontend-sprachen/ (letzter Zugriff am 01.01.2022) [17] “Backend – Definition”, IT-Serive.Network, Link: https://it-service.network/it-lexikon/backend (letzter Zugriff am 01.01.2022) [18] “Was ist Node.js und warum du es benutzen solltest”, kinsta, Link: https://kinsta.com/de/wissensdatenbank/was-ist-node-js/ (letzter Zugriff am 01.01.2022) [19] “10 Best JavaScript Frameworks to Use in 2022”, Simran Kaur Arora, Link: https://hackr.io/blog/best-javascript-frameworks (letzter Zugriff am 01.01.2022) [20] “Types of Computer languages”, Pooja Gupta , Link: https://www.educba.com/types-of-computer-language/ (letzter Zugriff am 28.11.2021) [21] “computer programming language”,\tDavid Hemmendinger, Link: https://www.britannica.com/technology/computer-programming-language (letzter Aufruf am 28.11.2021) [22] “COMPARING WEB LANGUAGES IN THEORY AND PRACTIC”, Kristofer J. Carlson, Link: http://www.krisandsusanna.com/Documents/Comparing%20Web%20Languages.pdf (letzter Aufruf am 28.11.2021) [23] “Programming Languages for the Web 2011”, David Matthias Stöckl, Link: https://www.blackbam.at/blackbams-blog/wp-content/uploads/2011/09/programming_languages_for_the_web_2011.pdf (letzter Aufruf am 28.11.2021) [24] “Typescript vs JavaScript: What’s the Difference?”, Hartman, Link: https://www.guru99.com/typescript-vs-javascript.html (letzter Zugriff am 29.11.2021) [25] “object-oriented programming (OOP)”, Alexander S. Gillis, Link: https://searchapparchitecture.techtarget.com/definition/object-oriented-programming-OOP (letzter Zugriff am 29.11.2021) [26] “Types of programming language”, bbc.co.uk, Link: https://www.bbc.co.uk/bitesize/guides/z4cck2p/revision/1 (letzter Zugriff am 9.11.2021) [27] “Difference between High Level and Low level languages”, GeeksforGeels, Link: https://www.geeksforgeeks.org/difference-between-high-level-and-low-level-languages/ (letzter Zugriff am 29.11.2021) [28] “What is a Programming Language and Different Types”, WatElectronics.com, Link: https://www.watelectronics.com/types-of-programming-languages-with-differences/ (letzter Zugriff am 29.11.2021) [29] “List of programming languages by type”, Wikipedia, Link: https://en.wikipedia.org/wiki/List_of_programming_languages_by_type (letzter Zugriff am 29.11.2021) [30] “computer programming language”, Britannica, Link: https://www.britannica.com/technology/computer-programming-language (letzter Zugriff am 29.11.2021) [31] TypeScript Docs, Microsoft, Link: https://www.typescriptlang.org/docs/ (Letzter Zugriff am 04.01.2022) [32] “Mehr Typsicherheit mit Safer TypeScript”, Heise online, Alexander Neumann, 04.07.2014, Link: https://www.typescriptlang.org/docs/ (letzter Zugriff am 04.01.2022) [33] “TypeScript: Microsofts neues typisiertes JavaScript”, heise online, Golo Roden, 04.10.2012, Link: https://www.typescriptlang.org/docs/ (letzter Zugriff am 04.01.2022) [34] “Safer TypeScript”, Microsoft, Link https://www.microsoft.com/en-us/download/details.aspx?id=52309\u0026amp;from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fdownloads%2Fb250c887-2b79-4413-9d7a-5a5a0c38cc57%2F (letzter Zugriff am 04.01.2022) [35] “Explizite Typangaben in Python: Segen oder Fluch?” , heise online, Gerhard Völki, 09.02.2018, Link: https://www.heise.de/hintergrund/Explizite-Typangaben-in-Python-Segen-oder-Fluch-3964094.html (letzter Zugriff am 04.01.2022) [36] “Using Python for Frontend”, Fernando Doglio, 02.04.2021, Link: https://blog.bitsrc.io/using-python-for-frontend-f90a0f8d51ae (letzter Zugriff am 04.01.2022) [37] “Why we choose Python as a backend language”, Pablo Giampedraglia, 23.11.2019, Link: https://www.asapdevelopers.com/python-backend-language/ (letzter Zugriff am 04.01.2022) [38] “HTML-Grundlagen”, Mozilla, Link: https://developer.mozilla.org/de/docs/Learn/Getting_started_with_the_web/HTML_basics (letzter Zugriff am 04.01.2022) [39] “CSS-Grundlaagen”, Mozilla, Link:https://developer.mozilla.org/de/docs/Learn/Getting_started_with_the_web/CSS_basics (letzter Zugriff am 04.01.2022) [40] “Front End vs. Back End Development”, Nicholas Gallinelli, Link: https://flatironschool.com/blog/front-end-vs-back-end-development (letzter Zugriff am 04.01.22) [41] “Top 10 Ruby Frameworks”, Back4App, Link: https://blog.back4app.com/ruby-frameworks/ (letzter Zugriff am 04.01.22) [42] “Ruby (Programmiersprache)”, Wikipedia, Link: https://de.wikipedia.org/wiki/Ruby_(Programmiersprache) (letzter Zugriff am 04.01.2022) [43] \u0026ldquo;Typisierung\u0026rdquo;, inztitut.de, Link: https://www.inztitut.de/blog/glossar/typisierung/ (letzter Zugriff am 19.01.2022) [44] \u0026ldquo;Was ist Frontend?\u0026rdquo;, IT-Service.Network, Link: https://it-service.network/it-lexikon/frontend#:~:text=Als%20Frontend%20wird%20die%20so,das%20Backend%20n%C3%A4her%20am%20System. (letzter Zugriff am 19.01.2022) [45] \u0026ldquo;Frontend vs Backend\u0026rdquo;, GeeksforGeeks, Link: https://www.geeksforgeeks.org/frontend-vs-backend/ (letzter Zugriff am 19.01.2022) [46] \u0026ldquo;Introducing JavaScript objects\u0026rdquo;, Mozilla, Link: https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects (letzter Zugriff am 19.01.2022) [47] \u0026ldquo;Prototypenbasierte Programmierung\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Prototypenbasierte_Programmierung (letzter Zugriff am 19.01.2022) [48] \u0026ldquo;The Most Popular JavaScript Frameworks – 2011/2021\u0026rdquo;, statisticsanddata.org, Link: https://statisticsanddata.org/data/the-most-popular-javascript-frameworks-2011-2021/ (letzter Zugriff am 19.01.2022) [49] \u0026ldquo;State of the Developer Nation 21st Edition\u0026rdquo;, SlashData, Link: https://slashdata-website-cms.s3.amazonaws.com/sample_reports/_TPqMJKJpsfPe7ph.pdf (letzter Zugriff am 19.01.2022) [50] \u0026ldquo;Top 10 JavaScript Frameworks for Server Side Development in 2020\u0026rdquo;, Md Kamaruzzaman, Link: https://javascript.plainenglish.io/top-10-javascript-frameworks-for-server-side-development-in-2020-6d265016c02 (letzter Zugriff am 19.01.2022) [51] \u0026ldquo;PHP\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/PHP (letzter Zugriff am 19.01.2022) [52] \u0026ldquo;PHP\u0026rdquo;, wiki.selfhtml.org, Link: https://wiki.selfhtml.org/wiki/PHP (letzter Zugriff am 19.01.2022) [53] \u0026ldquo;Wie funktioniert PHP\u0026rdquo;, Lernenhoch2, Link: http://php.lernenhoch2.de/lernen/php-einleitung/wie-funktioniert-php/ (letzter Zugriff am 19.01.2022) [54] \u0026ldquo;Objektorientierte Programmierung\u0026rdquo;, PHP-einfach.de, Link: https://www.php-einfach.de/experte/objektorientierte-programmierung-oop/ (letzter Zugriff am 19.01.2022) [55] \u0026ldquo;PHP - Grundlagen - Variablen - Typisierung\u0026rdquo;, peterkropff.de, Link: https://www.peterkropff.de/site/php/typisierung.htm (letzter Zugriff am 19.01.2022) [56] \u0026ldquo;Type Hinting\u0026rdquo;, hgb Leipzig, Link: https://www.hgb-leipzig.de/~uklaus/PHP/language.oop5.typehinting.html (letzter Zugriff am 19.01.2022) [57] \u0026ldquo;Type Hinting\u0026rdquo;, fit4php.net, Link: http://www.fit4php.net/sprachgrundlagen/funktionen-und-ihre-aufrufe/type-hinting/ (letzter Zugriff am 19.01.2022) [58] \u0026ldquo;10 Popular PHP frameworks for web developers to consider in 2021\u0026rdquo;, raygun.com, Link: https://raygun.com/blog/top-php-frameworks/ (letzter Zugriff am 19.01.2022) [59] \u0026ldquo;Ruby2JS\u0026rdquo;, ruby2js.com, Link: https://www.ruby2js.com/ (letzter Zugriff am 19.01.2022) [60] \u0026ldquo;Ruby on Rails\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Ruby_on_Rails (letzter Zugriff am 19.01.2022) [61] \u0026ldquo;State of the Frontend 2020\u0026rdquo;, Patryk Mamczur, Link: https://tsh.io/state-of-frontend/#ebook (letzter Zugriff am 23.01.2022) [62] \u0026ldquo;The 16 Most Important Pros and Cons of using Python for Web Development\u0026rdquo;, Julie Korsun, 06.07.2021, Link: https://djangostars.com/blog/python-web-development/ (letzter Zugriff am 23.01.2022) [63] \u0026ldquo;How to Choose a Programming Language For a Project?\u0026rdquo;, GeeksforGeeks, 31.08.2021, Link: https://www.geeksforgeeks.org/how-to-choose-a-programming-language-for-a-project/ (letzter Zugriff am 23.01.2022)  "},{"uri":"/tags/advantages/","title":"advantages","tags":[],"description":"","content":""},{"uri":"/webhandbook/apis/","title":"APIs","tags":["chapter"],"description":"","content":"APIs Einleitungstext\n"},{"uri":"/webhandbook/authentication/","title":"Authentication","tags":["chapter"],"description":"","content":"Authentication Einleitungstext\n"},{"uri":"/tags/backend/","title":"backend","tags":[],"description":"","content":""},{"uri":"/tags/beispiel-pipeline/","title":"Beispiel Pipeline","tags":[],"description":"","content":""},{"uri":"/tags/benutzererfahrung/","title":"Benutzererfahrung","tags":[],"description":"","content":""},{"uri":"/tags/benutzerrecherche/","title":"Benutzerrecherche","tags":[],"description":"","content":""},{"uri":"/tags/bitbucket/","title":"Bitbucket","tags":[],"description":"","content":""},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/cd/","title":"CD","tags":[],"description":"","content":""},{"uri":"/tags/chapter/","title":"chapter","tags":[],"description":"","content":""},{"uri":"/tags/ci/","title":"CI","tags":[],"description":"","content":""},{"uri":"/webhandbook/ci_cd/","title":"CI/CD","tags":["chapter"],"description":"","content":"CI: CONTINUOUS INTEGRATION / CD: CONTINUOUS DELIVERY PIPELINE CI ist eine Abkürzung für Continuous Integration, was auf Deutsch kontinuierliche In- tegration bedeutet. Dieser Vorgang ermöglicht es den Mitgliedern eines Teams, kontinu- ierlich neue Codes in einem bestimmten Repository zu speichern. Dann dieser Datenmen- ge führt CI automatisch Tests durch und prüft die Fehlerfreiheit. Gleichzeitig unterstützt es die Softwareentwicklung, indem es Fehler schneller meldet und Lösungen anbietet. Folgende Schritte werden als Pipeline bezeichnet: Der Programmierer lädt den Code in das Repository hoch. CI empfängt die Daten automatisch und führt den Test durch. Durch verschiedene Metriken stellt CI sicher, dass der Quellcode unter allen Bedingungen feh- lerfrei ist. Wenn es einen Fehler entdeckt, korrigiert es ihn automatisch im Rahmen seiner Möglichkeiten. Jeder Prozess wird mit einer Rückmeldung versehen, so dass der Benut- zer den Entwicklungsfortschritt der Software nachvollziehen kann. Außerdem werden die gemachten Fehler erkannt und daraus für das nächste Mal gelernt. Im Rahmen des Moduls Webanwendungen wird ein kleines Buchkapitel über diesen Pro- zess geschrieben. In dem Buch wird zuerst die Definition geschrieben. Die Bedeutung der Begriffe CI und CD und ihre Beziehung zueinander werden erklärt. Anhand einer Abbildung über die Softwareentwicklung kann der Prozess visuell dargestellt werden. Anschließend werden die Elemente der Pipeline vorgestellt. Die Phasen, die eine Pipe- line enthält, werden grundlegend beschrieben. Abschließend werden die am häufigsten verwendeten Tools, die den Prozess unterstützen, vorgestellt. Am Ende des Artikels wird ein Beispiel für eine Pipeline mit Codes beschrieben, die auf dem einem ausgewählten Framework basieren. Die folgende Gliederung soll einen Überblick über das Buchkapitel geben:\n Ansatz von CI/CD: Definition Unterschied zwischen CI und CD Elemente einer CI/CD-Pipeline CI/CD-Werkzeuge Beispiel eine Pipeline  "},{"uri":"/credits/","title":"Credits","tags":[],"description":"","content":"Contributors Lorem Ipsum\nMitwirkende Lorem Ipsum\n"},{"uri":"/tags/css/","title":"css","tags":[],"description":"","content":""},{"uri":"/webhandbook/css_processing/","title":"CSS Processing","tags":["chapter"],"description":"","content":"CSS Processing CSS is a powerful styling language whose feature set is constantly evolving, that allows incredible flexibility when designing websites. However, maintaining the structure, compatibility, and efficiency of stylesheets can become problematic, especially as projects grow.\nVarious CSS processing tools aim to address the shortcomings of the language with different approaches. Either by adding features to the language, modifying the syntax, or optimizing already written CSS. Of course, Browsers only understand the spec-compliant official version of CSS, so whatever a processor is doing has to happen before the client evaluates the CSS stylesheet.\nThis chapter will delve into commonly used features, present a few of the most popular CSS processors and cover the integration of CSS processors into web development toolchains.\n"},{"uri":"/webhandbook/databases/","title":"Databases","tags":["chapter"],"description":"","content":"Databases in Web Applications Databases are a crucial part of every web application as they are the place where all information processing happens. To choose the right database for an application, it is necessary to look closely at the use case and the data to store. This chapter will firstly illustrate in detail which functions have to be fulfilled by a web application database. It will then highlight the main features of SQL databases and will shortly present MySQL, PostgreSQL and MariaDB as examples hereof. It will continue by outlining the relevance of NoSQL databases for web applications, introducing Redis, MongoDB and Cassandra as such. Finally, the chapter will conclude with practical tips on how to choose a suitable database for a web application.\n"},{"uri":"/tags/disadvantages/","title":"disadvantages","tags":[],"description":"","content":""},{"uri":"/tags/fazit/","title":"fazit","tags":[],"description":"","content":""},{"uri":"/tags/frontend/","title":"frontend","tags":[],"description":"","content":""},{"uri":"/tags/fundamentals/","title":"fundamentals","tags":[],"description":"","content":""},{"uri":"/tags/gitlab/","title":"GitLab","tags":[],"description":"","content":""},{"uri":"/tags/guide/","title":"guide","tags":[],"description":"","content":""},{"uri":"/tags/html/","title":"html","tags":[],"description":"","content":""},{"uri":"/tags/human-centered-design/","title":"Human-Centered Design","tags":[],"description":"","content":""},{"uri":"/tags/informationsarchitektur/","title":"Informationsarchitektur","tags":[],"description":"","content":""},{"uri":"/tags/javascript/","title":"javascript","tags":[],"description":"","content":""},{"uri":"/tags/jenkins/","title":"Jenkins","tags":[],"description":"","content":""},{"uri":"/tags/literatur/","title":"Literatur","tags":[],"description":"","content":""},{"uri":"/tags/literaturverzeichnis/","title":"literaturverzeichnis","tags":[],"description":"","content":""},{"uri":"/webhandbook/microservices/","title":"Microservices","tags":["chapter"],"description":"","content":"Microservices Einleitungstext\n"},{"uri":"/tags/mystuff/","title":"MyStuff","tags":[],"description":"","content":""},{"uri":"/webhandbook/node/","title":"Node.js","tags":["chapter"],"description":"","content":"Node.js Einleitungstext\n"},{"uri":"/tags/php/","title":"php","tags":[],"description":"","content":""},{"uri":"/tags/pipeline/","title":"Pipeline","tags":[],"description":"","content":""},{"uri":"/tags/projekt0/","title":"projekt0","tags":[],"description":"","content":""},{"uri":"/tags/projekt1/","title":"projekt1","tags":[],"description":"","content":""},{"uri":"/tags/projekt2/","title":"projekt2","tags":[],"description":"","content":""},{"uri":"/tags/projekt3/","title":"projekt3","tags":[],"description":"","content":""},{"uri":"/tags/projekt4/","title":"projekt4","tags":[],"description":"","content":""},{"uri":"/tags/projekt5/","title":"projekt5","tags":[],"description":"","content":""},{"uri":"/tags/projekte/","title":"projekte","tags":[],"description":"","content":""},{"uri":"/tags/python/","title":"python","tags":[],"description":"","content":""},{"uri":"/webhandbook/react/","title":"React","tags":["chapter"],"description":"","content":"React Einleitungstext\n"},{"uri":"/tags/references/","title":"References","tags":[],"description":"","content":""},{"uri":"/tags/render-modes/","title":"render modes","tags":[],"description":"","content":""},{"uri":"/tags/rendering/","title":"rendering","tags":[],"description":"","content":""},{"uri":"/tags/ruby/","title":"ruby","tags":[],"description":"","content":""},{"uri":"/tags/sources/","title":"sources","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"/tags/travis-ci/","title":"Travis CI","tags":[],"description":"","content":""},{"uri":"/tags/typescript/","title":"typescript","tags":[],"description":"","content":""},{"uri":"/tags/typisierung/","title":"typisierung","tags":[],"description":"","content":""},{"uri":"/tags/typsicherheit/","title":"typsicherheit","tags":[],"description":"","content":""},{"uri":"/tags/ui/","title":"UI","tags":[],"description":"","content":""},{"uri":"/webhandbook/ui_ux/","title":"UI/UX","tags":["chapter"],"description":"","content":"UI/UX Einleitungstext\n"},{"uri":"/tags/unterschied/","title":"Unterschied","tags":[],"description":"","content":""},{"uri":"/tags/usability-engineering/","title":"Usability Engineering","tags":[],"description":"","content":""},{"uri":"/tags/user-experience/","title":"User Experience","tags":[],"description":"","content":""},{"uri":"/tags/user-experience-design/","title":"User Experience Design","tags":[],"description":"","content":""},{"uri":"/tags/user-interface/","title":"User Interface","tags":[],"description":"","content":""},{"uri":"/tags/ux/","title":"UX","tags":[],"description":"","content":""},{"uri":"/tags/vergleich/","title":"vergleich","tags":[],"description":"","content":""},{"uri":"/webhandbook/programming_languages/","title":"Vergleich verschiedener Programmiersprachen mit Fokus auf Web-Technology","tags":["chapter"],"description":"","content":"Vergleich verschiedener Programmiersprachen mit Fokus auf Web-Technology Im folgenden Text geht es um den Vergleich verschiedener Web-Programmiersprachen. Zunächst werden dabei die Grundlagen der Typisierung und Typsicherheit sowie Backend und Frontend näher erläutert. Anschließend werden insgesamt 5 Programmiersprachen näher vorgestellt, wobei besonders die Punkte Typisierung, Typsicherheit, objektorientierte Programmierung sowie die Anwendung im Front- und Backend-Bereich der einzelnen Programmiersprachen im Fokus liegen. Aufgrund des begrenzten Umfangs dieses Textes werden folgende Web-Programmiersprachen vorgestellt: JavaScript, TypeScript, Python, PHP und Ruby. Neben diesen 5 gibt es noch weitere Programmiersprachen, die für die Webentwicklung verwendet werden können. Auch HTML und CSS werden in diesem Text kurz erläutert, aber nicht mit in das Fazit einbezogen. Anschließend werden die vorgestellten Programmiersprachen tabellarisch gegenübergestellt und in ihren Eigenschaften verglichen. Abschließend folgt ein kompaktes Fazit.\n"},{"uri":"/tags/visualisierung/","title":"Visualisierung","tags":[],"description":"","content":""},{"uri":"/webhandbook/web_frameworks/","title":"Web Frameworks","tags":["chapter"],"description":"","content":"Web Frameworks Einleitungstext\n"},{"uri":"/tags/webhandbook/","title":"webhandbook","tags":[],"description":"","content":""},{"uri":"/webhandbook/website_rendering/","title":"Website Rendering","tags":["chapter"],"description":"","content":"Contents of this Chapter  Fundamentals of Website Rendering Types of Render Modes and their Advantages and Disadvantages A Visual Guide on when to use which Rendering Mode Sources  "},{"uri":"/tags/werkzeuge/","title":"Werkzeuge","tags":[],"description":"","content":""},{"uri":"/","title":"WT1 WEB APPLICATIONS","tags":[],"description":"","content":"WT1 - Web Applications | WiSe2021/22 Willkommen auf unserer Projektseite im Kurs Web Applications.\nHier findet ihr einmal ein Webhandbook, das von uns verfasst wurde, sowie eine Übersicht über die Projekte, an denen dieses Semester gearbeitet wurde.\n"}]