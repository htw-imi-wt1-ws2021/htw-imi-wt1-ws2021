[{"uri":"/projects/_blueprint/","title":"Blueprint-Projekt","tags":["projekt0"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/_mystuff/","title":"MyStuff","tags":["projekt1"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder JÃ¶rdis Liermann - 0576959\nNguyen Xuan Bach Do - 0556341\nAlain Ngoufack Nguefack - 0557214\nDominic Engel - 0576863\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/_oishi/","title":"Oishi","tags":["projekt2"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/","title":"Projekte","tags":["projekte"],"description":"","content":"Projekt 0 Blueprint-Projekt\nProjekt 1 MyStuff\nProjekt 2 Oishi\nProjekt 3 ToDog\nProjekt 4 Trackr\nProjekt 5 Zettelkasten\n"},{"uri":"/projects/_todog/","title":"ToDog","tags":["projekt3"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/projects/_trackr/","title":"Trackr","tags":["projekt4"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/webhandbook/","title":"Webhandbook","tags":["webhandbook"],"description":"","content":"Kapitel in alphabetischer Reihenfolge  APIS Authentication CI/CD CSS Processing Databases Microservices Node.js Programming Languages React UI/UX Web Frameworks Website Rendering  "},{"uri":"/projects/_zettelkasten/","title":"Zettelkasten","tags":["projekt5"],"description":"","content":"Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts, Kurzbeschreibung des Projekts.\n1.1 Teammitglieder Listung der Mitglieder\n1.2 Ausgangslage Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.3 Ziele Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.4 Technologien Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.5 Herausforderungen Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n1.6 Link zum Projekt Unser Projekt\n1.7 Screenshots vom Projekt 1.8 Link zum Sourcecode Code\n"},{"uri":"/webhandbook/css_processing/_1_terminology/","title":"1 History and Terminology","tags":[],"description":"","content":"History CSS processors have existed for quite a while. The first release of the popular Sass processor was in 2006! CSS is a powerful and versatile language to describe the appearance of web pages but lacks features from other programming languages to increase productivity and reduce redundancies. However, some shortcomings of the language have been addressed in recent years, and features that once could only be achieved through CSS processors are now available in the language itself.\nFor instance, when Sass was first released, there was no concept of variables in CSS, and values such as colors had to be hardcoded everywhere. So when large web projects wanted to change a specific color (e.g., the brand color), they had to go through all their stylesheets and replace the old values with the new ones.\nModern CSS has native support for variables and many other features that once were only available through CSS processors. But not everything CSS processors have to offer exists in CSS today, and some will never be able to.\nTerminology When talking about CSS processing, typically, there is a separation between pre-processing and post-processing. The former describes transforming something that is not CSS into spec-compliant CSS, and the latter takes already valid CSS and optimizes it in some fashion. However, the most popular tools that perform these transformations can not be distinctly classified as falling clearly into one of these two categories anymore since they support functions that fall both into pre- and post-processing.\nIn his article \u0026lsquo;Deconfusing Pre- and Post-processing\u0026rsquo; [1], Stefan Baumgartner defines a different terminology, authoring and optimization, instead of pre-and post-processing to classify the various features of CSS processing tools. This new categorization still doesn\u0026rsquo;t allow us to neatly assign any feature to precisely one of the two categories. Still, it generally makes it easier to discuss whether something helps developers write nicer code or is done to optimize for size or greater support.\n"},{"uri":"/webhandbook/programming_languages/_1_typsicherheit_typisierung/","title":"1 Typsicherheit und Typisierung","tags":["typsicherheit","typisierung"],"description":"Typsicherheit und Typisierung","content":"1.1 Typsicherheit Die Typsicherheit sorgt dafÃ¼r, dass die Code-QualitÃ¤t gewÃ¤hrleistet wird und sich somit die ZuverlÃ¤ssigkeit des entwickelten Programms erhÃ¶ht. Es obliegt dem Interpreter beziehungsweise Compiler die Sicherheit durch TypprÃ¼fung herzustellen und Typverletzungen aufzufangen. Manche Compiler geben Meldungen aus und in manchen passiert eine automatisierte Typumwandlung, sollte es eine Typverletzung geben. Beispielsweise warnt ein Compiler davor, eine Gleitkommazahl (Float, Double) an eine Ganzzahl-Variable (Integer) zu Ã¼bergeben. Dennoch mÃ¼ssen bei Zuweisungen die beteiligten Typen nicht notwendigerweise identisch sein, da beispielsweise Ganzzahlen unter UmstÃ¤nden an Gleitkommazahlen-Variablen zugewiesen werden kÃ¶nnen. Wichtig dabei ist, dass die Datentypen kompatibel zueinander sind [5, 6].\n1.2 Typisierung Das Ziel der Typisierung ist die Vermeidung von Laufzeitfehlern. Sie dient dazu, dass Objekte wie beispielsweise Variablen oder Funktionen korrekt verwendet werden beziehungsweise sie soll sicherstellen, dass keine Operation ausgefÃ¼hrt werden kann, die syntaktisch oder semantisch fehlerhaft ist. Programmiersprachen, die eine Typisierung aufweisen nennt man entweder stark typisiert oder schwach typisiert. Stark typisierte Programmiersprachen sind beispielsweise C++ und Java, wÃ¤hrend schwach typisierte Sprachen beispielsweise PHP und JavaScript sind. Bei der Typisierung gibt es TypprÃ¼fungen, die entweder zur Kompilierzeit oder Laufzeit vorgenommen werden. Man spricht hier entweder von einer statischen TypprÃ¼fung oder dynamischen TypprÃ¼fung. [9]\nStatische Typisierung\nBei einer statischen TypprÃ¼fung werden beispielsweise Zuweisungsfehler noch vor der Laufzeit erkannt beziehungsweise wird eine TypprÃ¼fung bereits zum Zeitpunkt der Kompilierung durchgefÃ¼hrt. Der Nachteil einer statischen Typisierung ist, dass teilweise die Typen erst zur Laufzeit bekannt sind. Des Weiteren ist der Compiler komplexer, da hier ein gewisser Mehraufwand fÃ¼r die Analyse anfÃ¤llt. [5, 7, 43]\nDynamische Typisierung\nDiese Art der Typisierung zeichnet sich durch ein hohes MaÃ an FlexibilitÃ¤t aus. Doch kann die hohe FlexibilitÃ¤t als Schwachstelle gesehen werden. Denn manche Fehler kÃ¶nnen mit diesem Schema der Typisierung erst zur Laufzeit erkannt werden - das bedeutet unter UmstÃ¤nden eine erschwerte Fehlersuche. Des Weiteren ist die dynamische Typisierung anfÃ¤llig fÃ¼r einen nachlÃ¤ssigen Umgang in der Entwicklung. ZusÃ¤tzlich erlaubt die dynamische Typisierung die korrekte Verarbeitung von eigentlich inkompatiblen Typen. [5, 43]\n"},{"uri":"/webhandbook/ui_ux/_1_0_ui/","title":"1.1 User Interface","tags":["UI","User Interface"],"description":"User Interface","content":"Laut dem internationalen Standard fÃ¼r software-ergonomische Gestaltung (ISO 9241-110) gehÃ¶ren âalle Bestandteile eines interaktiven Systems (Software oder Hardware), die Informationen und Steuerelemente zur VerfÃ¼gung stellen, die fÃ¼r den Benutzer notwendig sind, um eine bestimmte Arbeitsaufgabe mit dem interaktiven System zu erledigenâ zum User Interface (UI), Ã¼bersetzt BenutzeroberflÃ¤che. Einfach formuliert bedeutet es, dass das UI die wesentliche Schnittstelle zwischen Nutzer und System widerspiegelt und somit fÃ¼r die gesamte Kommunikation zur Maschine zustÃ¤ndig ist. Wie aus der genannten Definition erkennbar ist, sind Orientierung und Feedback wichtige Aspekte des UIs, die in vielen GrundsÃ¤tzen zur Dialoggestaltung manifestiert sind, so beispielsweise auch in den Heuristiken nach Nielsen oder in den goldenen Regeln nach Shneiderman. Bevor diese allgemeinen Anforderungen von Gestaltungsmerkmalen nÃ¤her erlÃ¤utert werden, werden zuerst die Grundformen und somit auch die Entwicklungsgeschichte vorgestellt. Zum Abschluss des Kapitels wird eines der wichtigstens Gestaltungsmerkmale des UI und deren Funktion dargelegt - die Farbe.\nUI Formen\nSystemsoftware und -hardware wurden mit der Zeit weiterentwickelt und es entstanden neuere Formen von BenutzeroberflÃ¤chen. Die verschiedenen InteraktionsmÃ¶glichkeiten mit einem System spiegeln die unterschiedlichen Arten des UIâs dar. Im folgenden Abschnitt werden die gÃ¤ngigsten Benutzerschnittstellen vorgestellt.\nCLI - Command Line Interface\nDie Ã¤lteste Form der Kommunikation mit einem Computer ist Ã¼ber das CLI. Mit der befehlseingaben-basierten BenutzeroberflÃ¤che konnte der Nutzer nur Ã¼ber die Kommandozeile mit bestimmtem Vorwissen einzelne Befehle eingeben. Beispiele: Powershell, bash\nTUI - Text User Interface\nZeichenorientierte Schnittstellen kÃ¶nnen statt einzelner Befehle auch Texte einlesen und besitzen hÃ¤ufig ein MenÃ¼ mit Anzeige von Tastenkombinationen fÃ¼r bestimmte Funktionen, welches meistens mit der Tastatur bedient werden kann. Textuelle Informationsdarstellung ist fÃ¼r den Menschen sehr abstrakt und kann in den meisten FÃ¤llen nur von Experten angewendet werden. Beispiele: vim, Norton Commander\nGUI - Graphical User Interface\nMit der EinfÃ¼hrung von grafischen OberflÃ¤chen wurden neue verstÃ¤ndliche Dialog- und Interaktionsformen eingefÃ¼hrt, die durch grafische und motorische Metaphern mithilfe von Icons (z.B. Papierkorb und Ordner) ein realitÃ¤tsnahes Umfeld anbieten. Hierarchisch und funktional-gegliederte MenÃ¼systeme kÃ¶nnen mit Maus und Tastatur bedient werden und fÃ¼r den Anwender intuitiver zu benutzen. Beispiele: OberflÃ¤che von Betriebssystemen (Windows)\nVUI - Voice User Interface\nMit dem VUI kommuniziert der Anwender Ã¼ber die gesprochene Sprache mit dem System, indem eine Spracheingabe oder -ausgabe erfolgt. Stimmerkennung oder Speech-to-Text (Umwandlung von Gesprochenen in Text) gehÃ¶ren zum VUI dazu. Beispiele: Sprachassistenten (Siri)\nunterschiedlichen UI Formen beschreiben (GUI, TUI etc)\nNUI - Natural User Interface\nNUI sind gestenbasierte Schnittstellen, die natÃ¼rliche und intuitive Bewegungen einlesen.Sie beziehen sich auf sensorische Eingaben wie BerÃ¼hrung, Sprache und Gesten, kÃ¶nnen aber aber auch viel weiter gehen und eine intelligente und kontextbewusste Computertechnik beschreiben, die in der Lage ist, Umgebung, Gesichter und Emotionen zu lesen. Beispiele: Smartphone-OberflÃ¤chen (Fingerbewegung, Spracheingabe)\nIn den spÃ¤teren Unterkapiteln bezieht sich der UI Begriff hauptsÃ¤chlich auf das GUI.\n"},{"uri":"/webhandbook/ui_ux/_1_1_ui/","title":"1.2 GrundsÃ¤tze beim UI - Design","tags":["UI","User Interface"],"description":"User Interface","content":"Die Gestaltung der BenutzeroberflÃ¤che ist ein zentrales Thema fÃ¼r die Benutzbarkeit eines Softwareprodukts, weshalb viele Grundprinzipien zum UI-Design entwickelt worden sind. Dabei werden Aufbau und Benutzbarkeit, sowie auch Aussehen und Funktionen einer BenutzeroberflÃ¤che betrachtet. Wie bereits in der Einleitung erwÃ¤hnt, wird im Folgenden auf elementare Anforderungen und Normen eingegangen. Dabei werden hauptsÃ¤chlich die 10 Heuristiken nach Nielsen aufgegriffen, wobei teilweise auch auf Ã¤hnliche Regeln von Shneiderman verwiesen wird. Die mehrfache Vertretung an gleichen GrundsÃ¤tzen spiegelt nochmals ihre Bedeutsamkeit wider.\n Sichtbarkeit des Systemstatus  Wichtig fÃ¼r die Orientierung im System, spielt das angemessene Feedback eine wesentliche Rolle. Denn das Design sollte immer den Nutzer innerhalb einer angemessenen Zeitspanne geeignete RÃ¼ckmeldungen Ã¼ber den aktuellen Stand der Dinge informieren, so Nielsen in seiner ersten Heuristik. Auch Shneiderman sagt in Regel 3 Ã¼ber informatives Feedback aus, dass bei hÃ¤ufigen und geringfÃ¼gigen Aktionen die RÃ¼ckmeldung bescheidener ausfallen kann, wÃ¤hrend bei seltenen und grÃ¶Ãeren Aktionen die RÃ¼ckmeldung umfangreicher sein sollte. Durch angemessenes Feedback erkennen Nutzer immer den aktuellen Systemstatus und kÃ¶nnen zukÃ¼nftige InteraktionsmÃ¶glichkeiten vorhersehen.\nÃbereinstimmung von System und Wirklichkeit  Das System sollte die Sprache des Nutzers sprechen. Die Art und Weise des UI-Design hÃ¤ngt immer sehr stark von ihren spezifischen Benutzern ab. Begriffe, Konzepte, Symbole und Bilder, die beispielsweise einer jungen Benutzergruppe vÃ¶llig klar erscheinen, kÃ¶nnen fÃ¼r Ã¤ltere Anwender ungewohnt oder verwirrend sein. Wenn die Steuerelemente eines Designs realen Konventionen folgen und den gewÃ¼nschten Ergebnissen entsprechen, so vereinfacht es die Lernbarkeit einer Schnittstelle. Dies schafft ein intuitives und positives Nutzererlebnis.\nBenutzerkontrolle und Freiheit  Anwender fÃ¼hren oft versehentlich Aktionen aus. Sie brauchen deswegen hÃ¤ufig einen deutlich gekennzeichneten \u0026ldquo;Notausgang\u0026rdquo;, um die unerwÃ¼nschte Aktion zu verlassen, ohne einen lÃ¤ngeren und anstrengenden Prozess durchlaufen zu mÃ¼ssen. AusgÃ¤nge ermÃ¶glichen es den Benutzern, die Kontrolle Ã¼ber das System beizubehalten und gleichzeitig ihnen ein GefÃ¼hl der Freiheit in ihren Interaktionen zu ermÃ¶glichen. Das Beherrschen der Benutzerschnittstelle unterbindet das Frustrationsempfinden durch Vermeiden von Ãberraschungen oder Ãnderungen im gewohnten Verhalten oder Schwierigkeiten bei der Beschaffung notwendiger Informationen verbunden mit langwierigen DateninputablÃ¤ufen, so Shneiderman unter seiner Regel 7. FÃ¼r die OberflÃ¤chengestaltung bedeutet es âRÃ¼ckgÃ¤ngigâ und âWiederholungâ-Optionen, beispielsweise in Form von Buttons, einzubauen. Das Abbrechen einer Aktion sollte stets klar gekennzeichnet und auffindbar sein, wobei âZurÃ¼ckâ-Buttons geeignet sind.\nBestÃ¤ndigkeit und Standards  Nutzer sich nicht fragen sollten, ob verschiedene WÃ¶rter, Situationen oder Handlungen dasselbe bedeuten. Somit weist Nielsen auf das Befolgen von Konventionen und Standards. Er rÃ¤t zur Gestaltung einer Konsistenz innerhalb desselben Systems. Die OberflÃ¤che sollte stets einheitlich gestaltet werden, um dem Nutzer eine einfache Bedienung durch das wiederholte Anwenden von bereits erlerntem Wissen zu gewÃ¤hrleisten. Der Nutzer gewÃ¶hnt sich an die Bedienbarkeit und muss keine neuen Konzepte erlernen. Aussehen, Inhalt und Verhalten sollten dafÃ¼r ebenfalls konsistent bleiben, um eine angenehmere Nutzung Mit der Gestaltung Ã¤hnlichen Layouts, Farbe oder Schriftart gewÃ¶hnt der Nutzer sich an die Bedienbarkeit und muss keine neuen Konzepte erlernen, so auch Shneiderman in seiner ersten Regel.\nFehlervermeidung  Gute Fehlermeldungen sind wichtig, aber die besten UI-Designs verhindern erst, dass Probleme Ã¼berhaupt erst auftreten. Zwar sollte der Nutzer, wie bereits in Punkt 3 genannt, mÃ¶glichst die gesamte Kontrolle besitzen, jedoch sollte das Interface auch so konzipiert sein, dass bei der freien Verwendung keine Fehler auftauchen. Entweder werden fehleranfÃ¤llige Bedingungen eliminiert oder es wird dem Nutzer eine BestÃ¤tigungsoption vor einer Aktion angeboten. Beim Interface-Entwurf kann beispielsweise bereits darauf geachtet werden, MenÃ¼punkte auszugrauen auf die nicht mehr zugegriffen werden soll. In numerische Datenfelder (z.B. Postleitzahlangabe) sollte beim Design bereits beachtet werden Buchstaben zu unterbinden oder darauf hinzuweisen. Allgemein bei fehlerhaften Aktionen sollte der Zustand der Schnittstelle unverÃ¤ndert bleiben oder die Schnittstelle sollte Anweisungen zur Wiederherstellung des Zustands anbieten.\nWiedererkennung statt Erinnerung  Ein gutes UI-Design sollte klar und deutlich erkennbare AktionsmÃ¶glichkeiten und Elemente anzeigen, sodass sich der Nutzer keine grÃ¶Ãeren Informationen merken muss. Nutzer sollen Informationen wieder erkennen, anstatt sich alles zu merken. Informationen oder Anleitungen, die fÃ¼r die Verwendung des Designs erforderlich sind (z. B. Feldbeschriftungen oder MenÃ¼punkte) sollten sichtbar oder bei Bedarf leicht abrufbar sein. Nielsen rÃ¤t dazu stets Hilfe im Kontext anzubieten, anstatt den Benutzern eine lange Anleitung zum Auswendiglernen zu geben. Shneiderman weist auf die Faustregel (Millers Law) hin, dass sich Menschen durchschnittlich nur 7 plus/minus 2 Objekte merken kÃ¶nnen. Aufgrund dessen sollte beim UI-Design immer auf das KurzzeitgedÃ¤chtnis des Menschen geachtet, denn das System sollte sich alles merken, nicht der Benutzer.\nFlexibilitÃ¤t und Effizienz  Ein gutes System sollte fÃ¼r jede Benutzergruppe geeignet und angepasst werden kÃ¶nnen. Beispielsweise kÃ¶nnen durch AbkÃ¼rzungen Interaktionen fÃ¼r erfahrene Nutzer beschleunigt werden ohne das Benutzererlebnis fÃ¼r unerfahrene Nutzer zu beeintrÃ¤chtigen. Funktionen und Aktionen sollten individuell anpassbar sein, um einen flexiblen Prozess fÃ¼r jeden zu ermÃ¶glichen. Ein Beispiel hierfÃ¼r ist das Einbringen einer âÃberspringenâ-Option fÃ¼r bestimmte Anleitungen eines Systems.\nÃsthetisches und minimalistisches Design  Schnittstellen sollten keine irrelevanten Informationen enthalten, die gar nicht oder selten benÃ¶tigt werden. Jedes einzelne Element einer Anwendung dient der Kommunikation mit dem Nutzer, so zum Beispiel auch schon Text, Farben oder Symbole. Alles davon ist eine Informationseinheit. Jede zusÃ¤tzliche Informationseinheit im UI konkurriert mit relevanten Informationseinheiten und verringert deren relative Sichtbarkeit. Es sollte somit jederzeit sichergestellt werden, dass die visuelle Gestaltung und auch der Inhalt auf das Wesentlichste konzentriert ist. Einfachheit und Klarheit sind die Grundbausteine im UI-Design. Ein Ã¼berladenes Interface lenkt den Nutzer nur ab und kÃ¶nnte sogar dafÃ¼r sorgen, dass elementare Funktionen Ã¼bersehen werden. Nielsen plÃ¤diert darauf zu achten, dass jedes visuelle Element eines UI auch die primÃ¤ren Ziele der Nutzer unterstÃ¼tzt.\nHilfestellung beim Erkennen, Bewerten und Beheben von Fehlern  Nielsen sagt aus, dass Fehlermeldungen immer visuell so aufbereitet werden mÃ¼ssen, dass sie von den Benutzern wahrgenommen und erkannt werden kÃ¶nnen. Dabei kann beim UI-Design integriert werden, Fehlermeldungen in roter Farbe oder fettgedruckten Text ausgeben zu lassen. Dies ist der verbreitetste Standard (Heuristik 4) und wird von den meisten Nutzern direkt wiedererkannt (Heuristik 6). Auch sollten solche Meldungen stets klar und in einfacher Sprache formuliert sein, dass gleichzeitig genau das Problem benennt und eine konstruktive LÃ¶sung vorschlÃ¤gt.\nHilfe und Dokumentation  Im Idealfall sollte das System komplett intuitiv sein und keine zusÃ¤tzlichen ErklÃ¤rungen benÃ¶tigen. Doch dies ist in den meisten FÃ¤llen nicht mÃ¶glich, weshalb es gut ist eine Dokumentation zur VerfÃ¼gung zu stellen. Bedienungshilfen und Dokumentation sollte im UI leicht auffindbar sein. Die Dokumentation sollte die wichtigsten Schritte kurz und konkret beschreiben.\n"},{"uri":"/webhandbook/ui_ux/_1_2_ui/","title":"1.3 Farbe und Funktion","tags":["UI","User Interface"],"description":"User Interface","content":"Das Verwenden unterschiedlicher Farbkonzepte spielt im UI-Design eine bedeutungsvolle Rolle und wird fÃ¼r verschiedene FunktionalitÃ¤ten eingesetzt. So kÃ¶nnen Farben die IndividualitÃ¤t eines Produkts widerspiegeln und als Wiedererkennungsmerkmal fungieren. Weiterhin zÃ¤hlen Farben zu einer der wichtigsten Gestaltungselementen im UI, denn das das menschliche Auge visiert stets Harmonie und Ãsthetik an. Doch abgesehen von der Ã¤sthetischen Funktion, bilden auch sie eine Informationseinheit dar, indem durch unterschiedliche Farben verschiedene Effekte signalisiert werden kÃ¶nnen. Das Anwenden der richtigen Farbe an der richtigen Stelle ist substanziell fÃ¼r das UI-Design.\nLaut Britannica ist der wichtigste Aspekt der Farbe wahrscheinlich derjenige, der am wenigsten definiert und am variabelsten ist - die Ã¤sthetische, psychologische Reaktion auf Farben. Joe Hallock fÃ¼hrte daraufhin eine umfangreiche Studie durch, in der amerikanische Teilnehmer bestimmte Begriffe mit Farben assoziieren sollten. Trotz dessen ist immer noch zu erwÃ¤hnen, dass emotionale Empfindungen und Wahrnehmungen sehr subjektiv sind, wobei auch kulturelle HintergrÃ¼nde eine entscheidende Rolle spielen. Anhand Hallocks Studie konnte jedoch herausgefunden werden, was die Mehrheit an positiven als auch negativen Assoziationen zu Farben empfinden, die dann im UI-Designprozess miteinberechnet werden kÃ¶nnen. Es wurde herausgefunden, dass der Begriff âSicherheitâ grÃ¶Ãtenteils mit der Farbe Blau (34%). Eine hohe Blau-Assoziation wurde ebenso bei den Begriffen âZuverlÃ¤ssigkeitâ mit 42% und âHochtechnologieâ mit 23% entdeckt.\nDas beste Beispiel fÃ¼r das Anwenden von Blau im Design ist die endlose Liste an bekannten Corporate Designs (UnternehmensidentitÃ¤t oder Erscheinungbild eines Unternehmen) darunter Facebook, Twitter, Skype und viele mehr. Die Farbe strahlt nicht nur Sicherheit, und ZuverlÃ¤ssigkeit aus, wie bereits eben erwÃ¤hnt, sondern ist darÃ¼ber hinaus kaum aufdringlich. Somit kann Blau sehr gut als Grundlage fÃ¼r ganzheitliche Designs dienen. DarÃ¼ber hinaus stellte Hallock in seiner Studie fest, dass unabhÃ¤ngig vom Geschlecht und Alter Blau von allen als Lieblingsfarbe angegeben wurde.\nAbgesehen von der Assoziation mit bestimmten Begriffen, senden Farben unterschiedliche Signale aus die dem Nutzer bei der Anwendung weiterhelfen sollen. Das Verwenden einer Farbe sollte stets mit Bedacht ausgesucht werden, denn alle Farben haben charakteristische Eigenschaften und sollten fÃ¼r einen bestimmten Zweck ausgewÃ¤hlt werden. Alle InteraktionsmÃ¶glichkeiten in Form von Buttons, Datenfelder oder Listen kÃ¶nnen bei spezifischen Aktionen mit einer bestimmten Farbe untermalt werden, die auf ein Signal hinweisen. Wie im vorherigen Unterkapitel berichtet wurde, ist Feedback eine wichtige Eigenschaft des Systems und dient zur besseren Bedienbarkeit fÃ¼r den Nutzer. So kÃ¶nnen ausgewÃ¤hlte ListeneintrÃ¤ge farbig oder leuchtend markiert werden, um diese Aktion nochmals hervorzuheben. Auch Buttons kÃ¶nnen unterschiedlich kommunizieren, indem der jeweilige Zustand (aktiv, deaktiviert, hover) mit spezifischen Farbakzenten angezeigt wird.\nUm nochmals die 8. Heuristik nach Nielsen aufzugreifen, zÃ¤hlt auch bei der Farbgestaltung die Regel weniger ist mehr. Ein zu buntes und willkÃ¼rliches Design lenkt nur zu sehr ab und auch mit einer geringen Anzahl an Farben gibt es genÃ¼gend GestaltungsmÃ¶glichkeiten. In der Regel reichen bereits 3 bis 4 Farben aus. Durch die Anwendung von wenigen unterschiedlichen Farben, werden Nutzer nicht Ã¼berfordert und es gibt noch genÃ¼gend Spielraum fÃ¼r ein ansprechendes Design. Bei der Farbaufteilung sollte man das VerhÃ¤ltnis 6:3:1 (Goldener Schnitt) anstreben um eine angenehme Balance zu erreichen. Es erleichtert dem Auge sich bequem von einem Punkt zum anderen zu bewegen.\nWÃ¤hrend PrimÃ¤r- und SekundÃ¤rfarben die Mehrheit des Designs ausmachen und sich gegenseitig ergÃ¤nzen, sollte die Signalfarbe im UI am wenigsten verwendet werden und stark im Kontrast zu den restlichen Farben stehen. Wie der Name schon sagt, hat sie eine signalisierende Funktion fÃ¼r die wichtigsten Bereiche des Systems. Das sind meistens Buttons oder wichtige Datenfelder mit essentiellen Interaktionen. Durch die seltene Anwendung der Farbe, verstÃ¤rkt sich die Wirkung und zieht automatisch die Aufmerksamkeit des Nutzers an. Das Paradebeispiel ist die Farbe Rot, die als signalisierende Farbe fÃ¼r alle wichtigen Funktionen fungiert. Rot ist intensiv und warnend zugleich. Es wirkt alarmierend und wird in den meisten FÃ¤llen bei Fehlermeldungen oder anderen wichtigen Aktionen angewendet. Eine weitere wichtige Funktion von Farben im UI, ist die eindeutige visuelle Unterscheidung zwischen verschiedenen Elementen. Dabei ist es wichtig kontrastreiche und gesÃ¤ttigte Farben einzubauen, die dem Nutzer unterstÃ¼tzen schnell Informationen zu erfassen (Heuristik 10), beispielsweise bei der Auswahl der Hintergrundfarbe von Textelementen. So lassen sich dunkle GrautÃ¶ne auf hellem Hintergrund gut lesen und andersherum genauso (auf dunklem Hintergrund ein heller Grauton).\nKontrastreichen Unterscheiden helfen auÃerdem auch Farbblinde bei der Bedienbarkeit, die geringere Helligkeitsstufen nur schlecht unterscheiden kÃ¶nnen. Weitere MaÃnahmen wÃ¤re auch das Vermeiden von Rot-GrÃ¼n-Kombinationen bei wichtigen Aktionen, wie beispielsweise Warnhinweise, da Menschen mit einer Rot-GrÃ¼n-SchwÃ¤che diese nur schlecht erkennen kÃ¶nnen. Die folgende Abbildung zeigt auf der rechten Seite die unterschiedliche Farbwahrnehmung bei solch einer SchwÃ¤che.\nWie aus Heuristik 7 erklÃ¤rt wurde, sollte ein System fÃ¼r jede Benutzergruppe flexibel sein, weshalb beim Farbdesign auch auf Farbblindheit oder -fehlsichtigkeit geachtet werden sollte.\nAbschlieÃend kann gesagt werden, dass Farben bei ihrer Anwendung nicht willkÃ¼rlich angewendet und unterschÃ¤tzt werden sollten. Sie dienen nicht nur als visuelle Gestaltungsmittel, sondern fungieren auch als SymboltrÃ¤ger, die durch die unterschiedliche Verwendung verschiedene Kommunikationswege und Emotionen bereitstellen. Zu erkennen war auch, dass die Heuristiken nach Nielsen auch beim Farbdesign auftauchen und in vielen Bereichen transferabel war. So bleibt beispielsweise Minimalismus als einer der Kernpunkte im gesamten UI-Design. Beachtet man stets das Gesamtbild eines Systems und das Zusammenwirken aller Elemente, sei es bei der Kontrastierung und Farbwahl oder deren FunktionsablÃ¤ufe, so erhÃ¤lt man ein ausgewogenes und harmonisches UI mit einer verstÃ¤ndlichen Bedienbarkeit und einem attraktiven Nutzererlebnis.\n"},{"uri":"/webhandbook/css_processing/_2_authoring/","title":"2 Authoring","tags":[],"description":"","content":"As mentioned in the previous chapter, the CSS specification has significantly caught up with the feature set that processing tools provide today. Features such as variables, color mixing, importing, or mathematical operations can all be used directly in the browser with the added benefit of being dynamically changeable.[2]\nStill, there are CSS processor features that can immensely help with writing nice code and that have not made it in the CSS spec. In addition, many larger web applications use processing tools to optimize their CSS for production â more on that later â so adding additional tools that aid with the authoring of stylesheets is relatively easy. Another reason to use the authoring features provided by these tools may be to target older browsers that lack support for these features.\nIt is crucial to remember that CSS processors can only perform operations on the static stylesheet before they are sent to and evaluated by the browser. This \u0026ldquo;static compilation\u0026rdquo; can be helpful, as it allows for complicated syntax extensions that simply compile to regular CSS. The downside is, because this compilation happens before the stylesheet is evaluated it also means that there is no context for the state of the environment. For instance, modern CSS\u0026rsquo;s math capabilities allow adding absolute units to relative ones, so height: calc(100% + 32x) is perfectly valid. The same does not work with CSS processors, even though they also have math operations, since the calculation has to resolve at compile-time, and the width of 100% is unknown.[3]\nNesting One widely used feature that has not made it into the CSS specification is nesting. Nesting allows developers to write one style rule within another. For instance, instead of having to write:\nul { margin: 0; } ul li { display: inline-block; } ul a { text-decoration: none; } Developers can write the following to increase legibility and avoid unnecessary repetition:\nul { margin: 0; li { display: inline-block; } a { text-decoration: none; } } Parent Selector One handy feature that comes with nesting, which can improve legibility, is the parent selector, with which the outside selector can get referenced and extended. An ampersand denotes this parent selector. So, for example, instead of writing:\nbutton { background: lightgrey; } button:hover { background: gray; } Developers can write:\nbutton { background: lightgray; \u0026amp;:hover { background: gray; } } Nesting can reduce code repetition and visual clutter, but the generated CSS quickly increases. While nesting looks nicer to the developer, the CSS processor has to unnest the code again during compilation for it to become valid CSS again. To prevent unnecessarily specific and therefore large CSS selector rules, keeping the nesting depth as shallow as possible is recommended.[4]\nMixins CSS Processors also bring simple control flow statements and functions to stylesheets, common in other programming languages. This functionality allows writing reusable code patterns. For instance, instead of writing the following statement again and again:\n.background { top: 0px; left: 0px; bottom: 0px; right: 0px; } With what is called mixins in SASS, but is also available with other CSS processors, this statement can be made into a reusable function and then applied where necessary:\n@mixinposition($p) { top: $p; left: $p; bottom: $p; right: $p; } .background { @includeposition(0px) } Different Syntax CSS Processors can extend the existing CSS syntax and change it completely. Most notably, the Stylus language makes curly braces, semicolons, and colons optional in a stylesheet and hierarchy inferred by indentation, similar to python. This means instead of writing:\nbutton { background: lightgray; \u0026amp;.primary { background: lightblue; } } the same rule in Stylus can get described like this:\nbutton background lightgray \u0026amp;.primary background lightblue Modules Nesting can be a great way to limit the scope of specific CSS rules, as in general, everything on a page shares the same scope. Another option to limit CSS rules to certain components using CSS processors is to use css-modules[5]. The idea is that CSS selectors can stay simple, shallow and concise, and then get automatically renamed to be unique to a module. For instance, a CSS class written as .name might be renamed in the final output to .name_SVK0go. Since this CSS processing feature changes the class names, integration with the HTML code is necessary, which adds considerably more complexity to the build pipeline than just converting the stylesheets.\n"},{"uri":"/webhandbook/programming_languages/_2_frontend_backend/","title":"2 Frontend und Backend","tags":["frontend","backend"],"description":"Frontend und Backend","content":"2.1 Frontend Als Frontend wird die sogenannte PrÃ¤sentationsebene bezeichnet - Das Sichtbare einer Webseite. Beispielsweise die Webseite eines Onlineshops. Das Frontend ist nÃ¤her am Benutzer (Client) und erlaubt einen benutzerfreundlichen Zugriff auf Daten und Prozesse, die vom Backend ausgehen. [15, 44]\nSpricht man davon, welche Programmiersprache fÃ¼r das Frontend benutzt wird, ist es nicht mÃ¶glich, eine klare Aussage zu schaffen. Es ist durchaus mÃ¶glich, eine PrÃ¤sentationsebene zu erschaffen, ohne dafÃ¼r Ã¼berhaupt eine Programmiersprache zu benutzen - mit HTML und CSS. Warum diese beiden Sprachen keine Programmiersprachen sind, wird im Punkt 4 HTML und CSS etwas nÃ¤her erlÃ¤utert. Mit einer Programmiersprache allein ist es kaum mÃ¶glich eine PrÃ¤sentationsebene zu erschaffen. Verschiedene Bibliotheken oder Frameworks zusammen mit einer Programmiersprache sind dafÃ¼r erforderlich. Beispielsweise das Zusammenspiel der Programmiersprache JavaScript und der JavaScript-Softwarebibliothek React. Oder das Framework Angular zusammen mit der Programmiersprache Typescript. Ein weiteres Beispiel wÃ¤re noch das Framework Symfony zusammen mit der Skriptsprache PHP. Es gibt viele MÃ¶glichkeit und es obliegt dem Entwickler, welche Technologie bevorzugt wird.\n2.2 Backend Anders als beim Frontend, ist das Backend nÃ¤her am System und bezeichnet den funktionalen Teil wie beispielsweise die Datenbank oder Datenverarbeitung einer Webseite. Der Benutzer (Client) einer Webseite sieht das Backend nicht und soll es auch nicht. Das Backend beschÃ¤ftigt sich mit der Datenverarbeitung im Hintergrund. [17]\nWie beim Frontend, ist es nicht mÃ¶glich eine klare Aussage zu schaffen, welche Programmiersprache fÃ¼r das Backend benutzt wird. Auch hier obliegt es dem Entwickler. Um ein Beispiel zu nennen: JavaScripts PopularitÃ¤t als Backend-Programmiersprache wuchs, als die plattformÃ¼bergreifende Laufzeitumgebung Node.js im FrÃ¼hjahr 2009 erschien. Mit Node.js ist die Erstellung von schnellen und skalierbaren serverseitigen Anwendungen, sowie Netzwerkanwendungen mÃ¶glich. Aber auch beispielsweise die Programmiersprache Python erfreut sich im Backend groÃer Beliebtheit - zusammen mit dem Framework Django. [19, 45]\n"},{"uri":"/webhandbook/ui_ux/_2_0_ux/","title":"2 User Experience","tags":["UX","User Experience","Benutzererfahrung"],"description":"User Experience","content":"Der Begriff User Experience (dt. Benutzererlebnis) wurde erstmals 1995 von Donald Norman und Kollegen geprÃ¤gt, die ihn nutzten, um âcritical aspects of human interface research and applicationâ zusammenzufassen. 1998 grÃ¼ndete Norman zusammen mit einem Kollegen Nielsen die Nielsen Norman Group, welche sich seither mit dem Thema UX und UI befasst. Seit 2018 existiert die ISO-Norm 9241-210, welche die menschenzentrierte Gestaltung interaktiver Systeme beschreibt, worunter auch die UX fÃ¤llt. Dort wird sie beschrieben als die âWahrnehmungen und Reaktionen einer Person, die aus der tatsÃ¤chlichen und/oder der erwarteten Benutzung eines Systems, eines Produkts oder einer Dienstleistung resultierenâ. Wichtig ist dabei, dass das Benutzererlebnis vor, wÃ¤hrend und nach der Nutzung betrachtet wird, um ein ganzheitliches Bild zu ermÃ¶glichen. In einer Anmerkung zum Begriff wird auÃerdem festgelegt, dass dabei auch Faktoren wie das Markenbild, die Darstellung, die FunktionalitÃ¤t und die Systemleistung des Produkts zum Erlebnis hinzugehÃ¶ren. UX beinhaltet dabei auch einen weiteren Begriff, der oft als Synonym missverstanden wird. Der Begriff Usability (dt. Gebrauchstauglichkeit) beschreibt laut ISO-Norm 9241-11 das âAusmaÃ, in dem ein System [\u0026hellip;] durch bestimmte Benutzer in einem bestimmten Nutzungskontext genutzt werden kann [\u0026hellip;]â. Es wird vor allem wÃ¤hrend der Nutzung einer Anwendung analysiert. Dabei steht die effektive, effiziente und zufriedenstellende Erreichung der Ziele des Benutzers im Vordergrund.\nDie GrÃ¼nde, weswegen das Thema UX eine immer bedeutsamere Rolle bei der Entwicklung von Anwendungen spielt, sind das Ãberangebot auf dem Markt und das Sparen von Ressourcen. Ersteres resultiert aus der Tatsache, dass das mittlerweile unendliche Webanwendungen gibt und der Nutzer sich daraus die seines Ermessens nach beste heraussuchen kann. Ein Faktor fÃ¼r die Auswahl ergibt sich daher aus der UX. Das Sparen von Ressourcen lÃ¤sst sich darauf zurÃ¼ckfÃ¼hren, dass durch die stÃ¤ndige Evaluation durch eine nutzerzentrierten Entwicklung, die die BedÃ¼rfnisse des Benutzers in den Mittelpunkt stellt, langfristig Aufwand gespart wird, der sonst erst deutlich wird, wenn das Produkt verÃ¶ffentlicht und von Benutzern genutzt wird.\nPeter Moville definierte durch sein User Experience Honeycomb folgende Attribute als Eigenschaften einer guten UX:\n useful: Die Anwendung sollte dem Nutzenden einen Mehrwert bieten. usable: Die Anwendung sollte so bedienbar sein, dass sie mÃ¶glichst leicht erlernbar und vertraut ist. desirable: Die Anwendung sollte visuell ansprechend sein und einfach zu verstehen sein. findable: Die Anwendung sollte so gestaltet sein, dass der Nutzer alles findet was er sucht. valuable: Die Anwendung sollte einen Mehrwert fÃ¼r den Nutzer bieten. accessible: Auch Menschen mit kÃ¶rperlicher EinschrÃ¤nkungen sollen die Anwendung nutzen kÃ¶nnen. credible: Die Anwendung sollte vertrauenswÃ¼rdig sein.  Eine schlechte UX liegt oftmals im Auge des Betrachters. Die Auswirkung ist jedoch meist, dass der Nutzer die Webanwendung aufgrund schlechter Erfahrungen in Zukunft weniger oder gar nicht nutzt. Durch die Vielzahl an Komponenten von UX gibt es einige Stellen, bei denen ein UX Designer aufpassen sollte. Eine besondere Art von schlechter Usability, welche ebenso zu einer schlechten UX fÃ¼hrt, sind dabei sogenannte Dark Patterns. Dies beschreibt (UI-)Elemente oder Formulierungen in einer Anwendung, welche absichtlich eingesetzt werden, um den Nutzer an seinem Vorhaben zu hindern oder sogar das Gegenteil zu bewirken. Einer der meistverbreiteten Beispiele hierfÃ¼r ist in der Grafik 1.1 abgebildet. Aus Gewohnheit wÃ¼rde man hier mit dem grÃ¼nen Button die Auswahl bestÃ¤tigen. Durch absichtlich gegenteiliges Design wird der Nutzer hier in die Irre gefÃ¼hrt. Mittlerweile gibt es eine Liste von Dark Patterns, die beispielsweise Disguised Ads (Werbung, welche aussieht wie ein Teil der UI, beispielsweise der Navigation) oder Trick Questions (Kompliziert formulierte Fragen, die nicht eindeutig zu beantworten sind), welche in Abbildung 1.2 und 1.3 zu sehen sind.\n"},{"uri":"/webhandbook/ui_ux/_2_1_ux_prozesse/","title":"2.1 User Experience Prozesse","tags":["UX","Human-Centered Design","Usability Engineering","User Experience Design"],"description":"Human-Centered Design","content":"Um eine gute User Experience zu gewÃ¤hrleisten, sollte bereits bei der Entwicklung der Anwendung stets die UX betrachtet werden. Dies gilt fÃ¼r alle Entwicklungsphase. Beispielsweise sollten in der Anforderungsanalyse KundenwÃ¼nsche konkretisiert, in der Prototypen-Erstellung verschiedene UX-Aspekte angesprochen und beim Testen die UX evaluiert werden. FÃ¼r diese Herangehensweise gibt es den Begriff Human-Centered Design.\nDas Human-Centered Design (dt. menschenzentrierte Gestaltung, HCD), welcher frÃ¼her auch als User-Centered Design oder Usability-Engineering bezeichnet wurde, ist ein als ISO-Norm festgehaltener Prozess mit vier Phasen. Von dem Begriff User Experience Design grenzt er sich insofern ab, als dass dieser zwar dasselbe Ziel hat, aber erst einsetzt, wenn das Produkt definiert ist und somit nicht die komplette Entwicklungsphase betrachtet. Das Ziel von HCD ist, die Nutzungsanforderungen zu erfÃ¼llen und die Methode wird oft als Herangehensweise zur Gestaltung und Entwicklung von gebrauchstauglichen interaktiven Systemen verwendet. FÃ¼r den Prozess werden Kenntnisse und Techniken aus den Bereichen der Arbeitswissenschaft und Ergonomie, sowie der Usabilityforschung herangezogen. Der Vorteil von HCD ist, dass iterativ und nutzerzentriert an die Entwicklung des Produkts herangegangen wird, um Defizite in der Nutzung zu frÃ¼h verdeutlichen und in der weiteren Entwicklung zu beheben.\nIm Folgenden werden die in der Grafik dargestellten vier Phasen von HCD grob erlÃ¤utert. Sie sind generell fÃ¼r die Entwicklung jeglicher interaktiven Produkte geeignet, jedoch soll hier mehr auf deren Anwendung auf die Entwicklung von Webanwendungen eingegangen werden. Vorraussetzung fÃ¼r den Start dieses Prozesses ist, dass zustÃ¤ndige Personen und Stakeholder identifiziert werden, geplant wird, inwieweit HCD in die generelle Entwicklungsmethode (Scrum, Wasserfall, etc) integriert werden kann und Raum fÃ¼r Kommunkation geschaffen wird. AuÃerdem ist eine zeitliche Planung und eine damit verbundene Meilenstein-Festlegung sinnvoll.\n Analysephase: Verstehen und definieren des Nutzungskontexts  Der Kontext einer Anwendung besteht laut ISO Norm aus âden Benutzermerkmalen, Aufgaben und organisanisatorische, technische und physische Umgebung [\u0026hellip;], in dem das System verwendet wirdâ. Diese Informationen werde durch Methoden oder die Analyse von Ã¤hnlichen Systemen erforscht und diesen dann als Grundlage fÃ¼r die Entwicklung der Anwendung. Denn nur wenn der Kontext, indem die Anwendung genutzt wird, klar definiert ist, kann eine nutzerzentrierte Entwicklung von Anfang an erfolgen. Die Definition des Nutzungskontext muss laut Norm dabei den Benutzer und sonstige Stakeholder, Merkmale der Benutzer, Ziele und Aufgaben sowie die Umgebung des Systems beschreiben. Letzteres beinhaltet die technische (Programmiersprache, Framework, EndgerÃ¤te) und die physische Umgebung (Internetverbindung, Beleuchtung).\nSpezifikationsphase: Festlegen der Nutzungsanforderungen  Basierend auf dem Nutzungskontext werden nun Nutzungsanforderungen abgeleitet. MÃ¶gliche Nutzeranforderungen sind dabei folgenden:\n Anforderungen, welche durch die Betrachtung des Nutzungskontexts und speziell Anforderungen, welche bereits durch festgelegte Normen und Richtlinien zu UX, UI und Gebrauchtauglichkeit stammen. Anforderungen, welche die Usability adressieren. Hierbei sollen auch messbare Kritierien aufgenommen werden, die die Zufriedenheit im beschrieben Nutzungskontext. Anforderungen, die durch organisatorische Aspekte der Anwendung benÃ¶tigt werden.  Die Anforderungen mÃ¼ssen generell durch Stakeholder verifiziert, nachprÃ¼fbar und widerspruchsfrei sein. Falls im Verlauf der Iterationen Unklarheiten deutlich werden, gilt es diese zu dokumentieren und die Anforderungen weiter zu spezifizieren. Die festgelegten Nutzungsanforderungen sind Teil der Gesamtanforderungen eines interaktiven Systems und damit auch Teil des Lastenhefts.\nDesignphase: Erarbeitung von GestaltungslÃ¶sungen  In dieser Phase werden nun LÃ¶sungen entwickelt. Folgende GrundsÃ¤tze der Gestaltung sind in ISO 9241-110 beschrieben und gilt es dabei zu involvieren: Aufgabenangemessenheit, SelbstbeschreibungsfÃ¤higkeit, KonformitÃ¤t mit Benutzererwartungen, LernfÃ¶rderlichkeit, Steuerbarkeit, Fehlertoleranz und Individualisierbarkeit.\nEvaluationsphase: Evaluierung der GestaltungslÃ¶sungen  Ziel dieser Phase ist es, fÃ¼r jeder der vorherigen Phasen Feedback vom Nutzer zu erhalten und dadurch Problem der entwickelten LÃ¶sungen aufzuzeigen. Im Idealfall erfÃ¼llt die GestaltungslÃ¶sung bereits bei der ersten Iteration alle Nutzungsanforderungen und der Anwendung ist damit feritgstellt. Im Normfall ist die vierte Phase jedoch der Anfang einer neuen Iteration in jede andere Phase, wodurch Inkrement stetig verbessern wird, bis alle Anforderungen erfÃ¼llt sind.\nDa der HCD Prozess viele Aspekte und Methoden vereint, sollen nun einzelne Teilaspekte im folgenden Kapitel vorgestellt werden, um einen besseren Ãberblick von HCD zu ermÃ¶glichen. Das Ziel aller dieser Komponenten ist es, dass der Nutzer seine Aufgaben gut (effektiv, effizient und zufriedenstellend) durchfÃ¼hren kann.\n"},{"uri":"/webhandbook/ui_ux/_2_2_komponenten/","title":"2.2 Komponenten des User Experience Prozesses","tags":["UX","Benutzerrecherche","Informationsarchitektur","Visualisierung"],"description":"Komponenten","content":"2.2.1 Benutzerrecherche Einer der elementaren Bausteine fÃ¼r eine erfolgreiche Benutzererfahrung ist ein klares VerstÃ¤ndnis davon, wer die Benutzer sind und was sie von der Anwendung fordern und erwarten. Dies ist bereits vor der Planung der eigentlichen Anwendung hilfreich, da so ein Produkt entwickelt werden kann, welches nÃ¼tzlich fÃ¼r den Endnutzer ist. Die Interaction Design Foundation gliedert Benutzerrecherche dabei in zwei Teile: die qualitativen und den quantitativen Forschung, welche jeweils attitudinal (dem Nutzer zuhÃ¶ren) und behavioral (die Handlungen des Nutzers beobachten) erfolgen kann. Sie empfehlen auÃerdem eine Mischung aus all diesen Vorgehenweisen zu verwenden.\nIst die Benutzerrecherche fortgeschritten, kÃ¶nnten die Ergebnisse in Form von Personas festgehalten werden. Eine Persona ist ein fiktiver Charakter mit einer fiktiven PersÃ¶nlichkeit, demografischen, psychografischen und anderen Merkmalen. Der Charakter basiert jedoch auf der jeweiligen Zielgruppe, um die Suche nach LÃ¶sungen zu unterstÃ¼tzen, die am besten zu den jeweiligen Nutzergruppen passen. HierfÃ¼r werden Ã¼blicherweise drei bis vier Personas erstellt, welche mit Namen, Bild und Zusammenfassung zu wesentlichen Aspekten in Form einer DIN-A4 Seite dargestellt werden. Diese dienen jedem Beteiligten wÃ¤hrend des Projekts, sich die Probleme und BedÃ¼rfnisse der Zielgruppe vor Augen zu behalten.\nDer letzte Schritt fÃ¼r ein fundiertes Wissen Ã¼ber die Benutzer und Zielgruppe ist das Entwickeln von Benutzerszenarien fÃ¼r die Personas. Sie stellen realistische Situation dar, in welchen sich die Nutzer befinden und in denen die Anwendung dem Nutzer bestmÃ¶glich dienen soll. Die Basis dafÃ¼r bildet die vorgangegangene Benutzerrecherche und die Personas. Wichtig ist ferner die Beschreibung des Aspekts, welche Motivation und Ziele der Nutzer hat und welche Aufgaben er tÃ¤tigen muss, um diese zu erfÃ¼llen. AuÃerdem sollte erlÃ¤utert werden, in welchen Situationen er die Anwendung nutzt und welche Herausforderungen sich daraus ergeben. Ein komplett ausgearbeitetes Beispiel hierfÃ¼r ist in der Abbildung 1.3 zu sehen.\nZusammenfassend ist dieser Aspekt der UX signifikant fÃ¼r die Attribute useful und usable des UX Honeycombs.\n2.2.2 Informationsarchitektur Bei der Entwicklung einer Anwendung ist es bedeutsam, sich im Vorfeld mit der Organisation und Strukturierung von Inhalten zu befassen. DafÃ¼r mÃ¼ssen Fragen beantwortet werden wie âWie soll der Nutzer durch die Anwendung navigieren?â oder âNach welcher Indexierung erfolgt die Suchmaschine der Anwendung?â. Vor allem bei komplexeren Anwendungen ist eine frÃ¼he Planung und Feedback der Nutzer unabdingbar. Dabei wird zwischen zwei Arten von Informationsarchitektur unterschieden: Top-Down-Informationsarchitektur und Bottom-Up-Informationsarchitektur. FÃ¼r beide Arten ist eine vorherige Benutzerrecherche notwendig, aus der hervorgeht, welche Informationen die Nutzer wohl am meisten benÃ¶tigen. Demnach wird bei der Top-Down-Architektur, die Anwendung so konzipiert, dass der Nutzer ausgehend von der Startseite aus effektiv und einleuchtend zu den benÃ¶tigten Informationen navigieren kann. Bei der Bottom-Up-Architektur hingegen wird beachtet, wie der Nutzer sich zurechtfindet, wenn er Ã¼ber einen beliebigen Punkt in die Webseite einsteigt, beispielsweise durch den Aufruf der Seite Ã¼ber eine Suchmaschine. Zur Abbildung und Planung der Informationsarchitektur eignen sich Site Maps. Ein Beispiel hierfÃ¼r ist die Side Map der Webseite von Apple.\nDieser Aspekt der UX hat direkte Auswirkungen auf das Attribut findable im UX Honeycombs.\n2.2.3 Visualisierung Meist reicht es nicht aus, nur in der Theorie von einer Anwendung zu sprechen. Deshalb ist eine Visualisierung in jeglicher Form sinnvoll, um die Anwendung zu erproben und Feedback einzuholen. Auch dieser Aspekt kann eine positive Beeinflussung der Attribute useful und usable des UX Honeycombs hervorbringen. Im Folgenden sollten die gÃ¤ngigsten Formen erlÃ¤utert werden. Sie sind dabei aufsteigend nach deren Aufwand und damit verbundenen Fidelity (dt. Detaillierungsgrad) gelistet:\nSkizzen\nEine Skizze ist eine meist handgezeichnete Darstellung, die hilft abstrakte Ãberlegungen verbildlicht und erste Konkretisierungen zur Struktur und Funktionen der Webseite festzuhalten. Sie schafft einheitliches VerstÃ¤ndnis und auch Raum fÃ¼r weitere Fragen und Aspekte, die zu klÃ¤ren sind. Vorteil dieser Art der Visualisierung ist die Schnelligkeit und VorlÃ¤ufigkeit. Denn dadurch ist es mÃ¶glich, einfach Ãnderungen vorzunehmen und innovative AnsÃ¤tze zu fÃ¶rdern. Generell eignen sich Skizzen vor allem fÃ¼r die Anfangsphase des Projekts. Von Vorteil sind dabei Informationen wie Personas, Use Cases und bereits definierte Anforderungen an das System.\nWireframes\nDie nÃ¤chste Stufe von Visualisierung sind Wireframes. Der Begriff kommt ursprÃ¼nglich aus dem Industrieumfeld, wo es als MÃ¶glichkeit genutzt wird, schnell 3D-Objekte zu instanziieren, die nur die geplante Ã¤uÃere Form besitzt. Ebenso werden Wireframes in UXD genutzt, indem sie bereits die OriginalgrÃ¶Ãe der fertigen Anwendung besitzen und somit verdeutlichen, ob die Ãberlegungen aus den Skizzen sinnvoll sind. Auch hier sind die tatsÃ¤chlichen Inhalte noch nicht notwendig und DesignvorschlÃ¤ge sogar unerwÃ¼nscht, weswegen oft mit Platzhaltertexten und -bildern gearbeitet wird. Wichtig ist dennoch, im Wireframe zu verdeutlichen, an welcher Stelle in Zukunft Elemente wie das Logo, Kopf- und FuÃzeile oder Inhaltsbereiche sind. MÃ¶gliche Tool zur Erstellung von Wireframes sind Balsamiq, Adobe XD oder Visio von Microsoft, durch die die Entwicklung beschleunigt wird. Je nachdem wie ausgereift die Wireframes sind, dienen sie teilweise schon als Grundlage fÃ¼r User Test oder fÃ¼r die Programmierer. Ersteres wird vor allem durch Wireflows mÃ¶glich, die einzelne Wireframes miteinander verknÃ¼pfen, wodurch der Nutzer sich quasi durch die Anwendung bewegen kÃ¶nnen. In der folgenden Grafik ist ein Beispiel fÃ¼r Wireframes einer E-Commerce-Webseite dargestellt.\nMockups\nMit Mockups werden nun die konzeptionellen Ãberlegungen aus vorherigen Schritten mit einem Designkonzept umgesetzt. Dabei sind Themen wie Farben, Typografie, AbstÃ¤nde und Bilder von Bedeutung. Auch Mockups kÃ¶nnen wie Wireframes nutzbar sein, wodurch sie wie eine tÃ¤uschend echte Attrappe auf Testnutzer wirken kÃ¶nnen. Das hier eingeholt Feedback ist insofern wertvoll, als dass der Nutzer durch sie ein gutes GefÃ¼hl dafÃ¼r bekommt, wie sich die Anwendung in Zukunft verhalten kann.\nPrototypen\nNicht zu verwechseln mit Paperprototypen, welche mehr einer detaillierten Skizze Ã¤hneln, sind Prototypen die Umsetzung der Mockups, welche elementare FunktionalitÃ¤ten des Endprodukts beinhalten und gegebenenfalls schon mit den vorgesehenen Programmiersprache oder Framework umgesetzt sind. Der Vorteil gegenÃ¼ber Mockups ist, dass nicht nur die Struktur und das Design erprobt werden kÃ¶nnen, sondern auch tatsÃ¤chlichen Teile der Funktionen. Diese Form der Visualisierung ist die aufwendigste und deshalb nicht geeignet fÃ¼r schnelles Feedback, jedoch fÃ¼r qualitativ wertvolles. Denn jedes UX Problem, welches im Prototypen sichtbar wird, kann vor der tatsÃ¤chlichen Umsetzung behoben werden und somit Entwicklungskosten sparen. Dennoch sollte vor der Erstellung eines Prototyps klar festgelegt werden, wie hoch der Umfang des Prototyps ist und welche Ziele durch ihn erreicht werden sollen. AuÃerdem ist die Festlegung des EndgerÃ¤ts, auf dem der Prototyp nutzbar sein soll, relevant fÃ¼r die Entwicklungskosten.\n"},{"uri":"/webhandbook/ui_ux/_2_3_evaluation/","title":"2.3 Evaluation von User Experience","tags":["UX","User Experience","Benutzererfahrung"],"description":"User Experience","content":"2.3 Evaluation Um die beschriebenen Komponenten umzusetzen und somit die UX zu optimieren, gilt es, diese fortlaufend zu evaluieren. HierfÃ¼r existieren verschiedene Methoden, welche in die Kategorien formative Evaluation oder summative Evaluation eingeordnet werden kÃ¶nnen. Ersteres beschreibt dabei fortlaufende Methoden zur Evaluation eines Produktes wÃ¤hrend der Entwicklung, wodurch Bereiche mit Verbesserungspotenzial identifiziert werden sollen. Summative Evaluationen hingegen werden kurz vor oder nach Abschluss einer Entwicklungsphase durchgefÃ¼hrt, um zu prÃ¼fen, inwieweit die Anforderungen an das Produkt und dessen QualitÃ¤t erfÃ¼llt sind.\nWichtig ist dabei, dass auch immer der Nutzungskontext betrachtet werden muss. Dazu zÃ¤hlen Preim und Dachselt die Benutzergruppe, die Aufgabe und die Umgebung, in der ein interaktives System benutzt wird. Mit Umgebung ist tatsÃ¤chlich die physische Umgebung gemeint, da beispielsweise das Nutzen einer Anwendung im Freien auf einem mobilen EndgerÃ¤t sich von den AnsprÃ¼chen unterscheidet, die an eine interaktive Anwendung im Operationssaal gestellt werden. In Bezug auf Webanwendung steht vor allem die Betrachtung der Nutzung auf verschiedenen EndgerÃ¤ten wie PC, Tablet oder Smartphone an erster Stelle. AuÃerdem der Sinn der Anwendung von Bedeutung, da beispielsweise eine Anwendung fÃ¼r Online-Banking mÃ¶glichst seriÃ¶s und nicht verspielt wahrgenommen werden soll. Im Gegensatz dazu stehen Webanwendungen fÃ¼r freizeitorientierte Angebote, die auch SpaÃ machen dÃ¼rfen.\nInsgesamt wird empfohlen, mehrere Methoden zur Evaluation einer Anwendung zu nutzen und diese auch iterativ wÃ¤hrend der Entwicklung der Anwendung durchzufÃ¼hren. Dadurch werden viele Aspekte erfasst und die bestmÃ¶gliche UX geschaffen. Die Nielsen Norman Group zÃ¤hlte jedoch 2014 20 Methoden zu den gÃ¤ngigsten:\nUsability-Lab Studies - Ethnographic Field Studies - Participatory Design - Focus Groups - Interviews - Eyetracking - Usability Benchmarking - Moderated Remote - Usability Studies - Unmoderated Remote - Panel Studies - Concept Testing - Diary/Camera Studies - Customer Feedback - Desirability Studies - Card Sorting - Clickstream Analysis - A/B Testing - Unmoderated UX Studies - True-Intent Studies - Intercept Surveys - Email Surveys\nIm Folgenden sollen nun auf drei der Methoden genauer eingegangen werden.\nNutzerbefragungen\nEine konkrete Methode zur Evaluation der UX von Webanwendungen ist das DurchfÃ¼hren von Nutzerbefragungen. Diese zÃ¤hlen zu der Kategorie formative Evaluation und kÃ¶nnen online oder in PrÃ¤senz mit einer ausgewÃ¤hlten Nutzerschaft erfolgen. Letztere Variante liefert dabei im Gegensatz zu ersterem qualitative Ergebnisse statt quantitative. Von Interesse sind hierbei auch demografische Informationen Ã¼ber die Nutzer, da diese den Kontext der Antworten konkretisieren. Eine standardisierte Methode von Nutzerbefragungen ist der AttrakDiff-Fragebogen, welcher von Prof. Dr. Marc Hassenzahl entwickelt wurde. Es basiert auf seiner Idee von hedonistischen und pragmatischen QualitÃ¤ten, welche die Basis des AttraktivitÃ¤tsurteils Ã¼ber die Anwendung bildet. Pragmatische QualitÃ¤ten sind dabei Ã¼bliche Usabilityaspekte, wÃ¤hrend hedonistische eher Aspekte wie SpaÃ und Nutzungsfreude betrachten. Der Fragebogen besteht aus 28 Items, welche im Format eines semantischen Differentials abgefragt werden. Auf eine Skala von jeweils gegensÃ¤tzlichen Adjektiven wie âverwirrend - Ã¼bersichtlichâ oder âzu selbstorientiert - zu handlungsorientiertâ kann der Nutzer aus sieben Abstufungen wÃ¤hlen. Der jeweilige Mittelwert eines Items bildet den Skalenwert fÃ¼r pragmatische und hedonische QualitÃ¤t, sowie der AttraktivitÃ¤t der Anwendung.\nEye Tracking\nEye Tracking (dt. Blickbewegungsmessung) ist eine summative Methode zur Evaluation der UX, welche die Bewegung des Blicks des Nutzers beobachtet. Auf einem niedrigeren Niveau ist auch das Mouse Tracking mÃ¶glich, welches lediglich die Mausbewegung aufnimmt. Der Ablauf besteht darin, dass der Nutzer - meist ohne jegliche Vorkenntnisse - die Anwendung betrachten oder bei tiefergehenden Messungen festgelegte Aufgaben in der Anwendung durchfÃ¼hren muss. Dabei wird durch ein spezielles Eye Tracking GerÃ¤t oder bei einfachen Messungen mit einer Ã¼blichen Webcam seine Blickbewegung registriert. Zur Auswertung dieser Messung eignen sich Heat oder Opacity Maps oder Gazeplots, welche darstellen, wie der Nutzer die Anwendung wahrnimmt. Letzteres gibt sogar Aufschluss Ã¼ber die Reihenfolge, in welcher die Blickbewegung auf die Anwendung stattfindet. Je nach IntensitÃ¤t des Blicks zeigt sich dadurch beispielsweise die Dauer, die der Nutzer auf einer Area verbringt oder welche Elemente der Seite am meisten Aufmerksamkeit erregen oder komplett Ã¼bersehen wurden. Die Bereiche der Anwendung, welche besonders deutlich wahrgenommen wurden, nennen sich Areas of Interest.\nFokusgruppen\nDie Fokusgruppe, auch Gruppendiskussion genannt, ist eine Technik, um Meinungen, Bedenken, GefÃ¼hle und Erfahrungen von den Teilnehmern zu sammeln. Der Unterschied zu einer Benutzerbefragung ist dabei, dass die Fokusgruppe von einem Diskussionsleiter moderiert wird und bis zu zwei Stunden dauern kann. Dies geschieht unter der Voraussetzung, dass die Einzelpersonen in der Gruppe mitdiskutieren, sodass eine Gruppendynamik entsteht. Ãblicherweise geschieht dies mit sechs bis neun Personen, die der Zielgruppe angehÃ¶ren und mehrfach mit unterschiedlichen Personen durchgefÃ¼hrt. MÃ¶gliche Fragen, die hierbei beantworten, werden kÃ¶nnen, sind âWelche Inhalte und Funktionen werden momentan nicht genutzt und warum?â oder âWelche Variante einer Idee, einer Funktion oder eines Designs bevorzugen die Nutzer?â. Diese Methode kann zu jedem Zeitpunkt der Entwicklung angewendet werden, jedoch ist die Methode Fokusgruppe alleine nicht aussagekrÃ¤ftig genug fÃ¼r eine umfassende Evaluierung. Dies ist darauf zurÃ¼ckzufÃ¼hren, dass Teilnehmer zwar durch ein dynamisches GesprÃ¤ch viel wertvolle Aspekte ansprechen, die Anwendung selbst aber bei der tatsÃ¤chlichen Nutzung anders verwendet wird, als im GesprÃ¤ch ausgedrÃ¼ckt.\n"},{"uri":"/webhandbook/ui_ux/_3_literaturverzeichnis/","title":"3 Literaturverzeichnis","tags":["literaturverzeichnis"],"description":"Literaturverzeichnis","content":"https://link.springer.com/book/10.1007%2F978-3-030-78221-4 Advances in Usability and User Experience | SpringerLink User Experience Modelle - Andreas Hinderks\nBen Shneiderman (8 goldenen Regeln nach Shneiderman) UX / UI findet Probleme im Bereich Funktion, Gestaltung und auf Aubau Heuristische Evaluation nach Nielsen, der auch die Umgebung der Anwender und die zur VerfÃ¼gung stehende Informationen mit einbezieht\n(10 Usability Heuristics for User Interface Design)\nBlack Pattern (How Dark Patterns Trick You Online)\n(The Dark (Patterns) Side of UX Design | Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems) Unterscheidung UX Design und UI Design\nUsability und UX (Usability und UX kompakt)\nhttps://ieeexplore.ieee.org/abstract/document/9495855 (User Experience / User Interface (UX/UI) Design for Autistic Spectrum Disorder (ASD) Color Based Emotion Detection System: A Review)\nA Study on Understanding of UI and UX, and Understanding of Design According to User Interface Change\nUser-interface Design\nhttp://attrakdiff.de/sience.html\nGestaltungsunterstÃ¼tzende Evaluation von Software: Zur EffektivitÃ¤t und Effizienz des IsoMetricsL Verfahrens\nR. Kuhlen, W. Semar und D. Strauch, Grundlagen der praktischen Information und Dokumentation: Handbuch zur EinfÃ¼hrung in die Informationswissenschaft und -praxis p. 431. (Usability Engineering Lifecycle)\nISO 9241 (Standard fÃ¼r MMI, Normen fÃ¼r UX etc)\nhttps://michaelgearon.medium.com/information-architecture-ia-in-ux-91dae4e3124d\nhttps://danewesolko.medium.com/peter-morvilles-user-experience-honeycomb-904c383b6886\nhttps://www.nngroup.com/articles/focus-groups/\nhttps://www.usability.de/leistungen/methoden/fokusgruppe.html\nDuchowski, A. T. (2003). Eye Tracking Methodology: Theory and Practice. doi:10.1007/978-1-4471-3750-4, URL: sci-hub.se/10.1007/978-1-4471-3750-4 (zuletzt aufgerufen am 28.1.2022)\nhttps://www.interaction-design.org/literature/topics/user-research\nhttps://www.interaction-design.org/literature/topics/user-scenarios\n"},{"uri":"/webhandbook/css_processing/_3_optimisation/","title":"3 Optimisation","tags":[],"description":"","content":"In addition to the features that support developers in designing stylesheets, there are also features of CSS processors that optimize existing CSS for speed and browser support.\nMinification The probably most popular CSS processing feature is minification. Most programming languages include characters that are not strictly part of the syntax but increase legibility. This means whitespace characters primarily, and to a lesser extent, the variable names a developer has chosen. Most CSS minifiers strip away comments and whitespace characters, which can lead to a reduction in file size up to 50%. This does not necessarily correlate with a 50% speed improvement, especially since most web servers compress their responses anyway, but it makes a difference nonetheless. The fewer characters there are to read, the less there are to compress, decompress and finally parse by the browser.\nA more complicated but not uncommon minification technique is also to minify class names. For example, a class called .form-check-input before minification might be reduced to very short identifiers, such as .ab. Similar to CSS modules, this method also requires integration with the HTML code in order to work.\nPolyfills Besides file-size reduction, CSS optimization also includes modifications to improve compatibility among different browsers. For instance, one use case is to automatically make a website compatible with right-to-left languages instead of performing these optimizations manually. Another example might be that a developer wants to use the #rrggbbaa hex color notation that has been introduced in browsers recently, where the opacity can be included in the hex notation. If a developer wants to use this notation but also wants compatibility with an older browser that does not support this syntax, they can use CSS processors to replace them. In this specific example, the PostCSS Color Hex Alpha[6] plugin would do the following:\nbody { background: #6ebd6ecc; } /* becomes */ body { background: rgb(110, 189, 110, 0.8); } Vendor Prefixes A subset of these compatibility features is the automatic addition of vendor prefixes. The idea behind prefixing certain CSS properties was to denote that their functionality was either experimental or not part of the standard, so they could be experimented with but would not be relied upon by web developers until they were properly standardized. Some of the most notable properties were animation, transition, box-shadow and even border-radius that were already implemented in most browsers, but only through these prefixes. This meant that to create a transition that works across all browsers did look like this:\n-webkit-transition: all 4s ease; -moz-transition: all 4s ease; -ms-transition: all 4s ease; -o-transition: all 4s ease; transition: all 4s ease; Because some of these features were already almost universally available, web developers used them. Automatic prefixing became a popular CSS processing feature to reduce the labor of writing the same line up to five times, just with different prefixes. The most notable prefixing tool is autoprefixer[7], where developers can target the browser versions they intend to support and add necessary prefixes.\nAn analysis from Rob O\u0026rsquo;Leary in 2021 has revealed that the number of properties that require prefixes has steadily gone down in recent years[8], and nowadays, browser vendors put new features behind user-controlled flags instead[9]. Still, there are good reasons to use prefixing today, for instance, simply to make websites compatible with older browsers that require these prefixes. Additionally, there are CSS properties that have 99% browser support with prefixes and significantly less without[8], even if most or all of them might not be as relevant as the prefixed versions of box-shadow or border-radius once were.\n"},{"uri":"/webhandbook/programming_languages/_3_verschiedene_websprachen/","title":"3 Verschiedene Web-Programmiersprachen","tags":["javascript","typescript","python","php","ruby"],"description":"Verschiedene Web-Programmiersprachen","content":"3.1 Web-Programmiersprachen Mittlerweile gibt es eine groÃe Menge an verschiedenen Programmiersprachen. Jede Programmiersprache hat ihre Vorteile und Nachteile gegenÃ¼ber einer anderen. Doch welche Programmiersprachen eignen sich fÃ¼r die Webentwicklung am besten? Gibt es Ã¼berhaupt die eine Web-Programmiersprache?\nMit Web-Programmiersprachen kÃ¶nnen komplexe logische Anweisungen und Prozesse definiert werden. Jede Programmiersprache hat wie die verschiedenen Sprachfamilien auch ihre Eigenarten. In den folgenden Kapiteln werden die bekanntesten Vertreter der Web-Programmiersprachen kompakt vorgestellt.\n3.1.1 JavaScript Bekannt ist JavaScript als prototypbasierte Skriptsprache fÃ¼r Webseiten. Jedoch wird diese lightweight Sprache auch in anderen Umgebungen eingesetzt, wie beispielsweise Node.js oder Apache. Was bedeutet lightweight im Zusammenhang mit einer Programmiersprache? Lightweight Sprachen sind so designt, dass sie einen kleinen Memory-Footprint besitzen (wenig Speicher benÃ¶tigen), einfach in verschiedenen Systemen zu implementieren sind und sie eine minimalistische Syntax aufweisen.\nJavaScript trÃ¤gt zwar den Namen der objektorientierten Programmiersprache Java, doch wurden beide Sprachen in den frÃ¼hen 90er-Jahren unabhÃ¤ngig voneinander entwickelt mit vÃ¶llig unterschiedlichen Grundkonzepten.\nJe nach Bedarf lÃ¤sst sich in JavaScript objektorientiert, prozedural oder funktional programmieren. Dies ist mÃ¶glich durch den standardisierten Sprachkern ECMAScript. Dieser beschreibt eine dynamisch typisierte, objektorientierte, aber klassenlose Sprache. [1, 2, 46]\nObjektorientierte Programmierung\nObwohl JavaScript dank seines Sprachkerns objektorientierte Programmierparadigmen beinhaltet, kann es nicht als objektorientierte Programmiersprache angesehen werden. JavaScript unterstÃ¼tzt Grundelemente der Objektorientierung wie beispielsweise Datenkapselung, Polymorphie und Vererbung. Doch das wesentlichste Konzept Klassen bietet sie nicht. Mit ECMAScript 6 (kurz ES6) wurde jedoch das SchlÃ¼sselwort class eingefÃ¼hrt, mit dem es mÃ¶glich ist, nun pseudo Klassen zu definieren. Doch sind diese nichts weiter als Funktionen - anstatt function ist es nun mÃ¶glich, class zu verwenden. [10, 11]\nPrototyp\nJedes Objekt in JavaScript verfÃ¼gt Ã¼ber die Eigenschaft prototype. Mit diesem Muster beziehungsweise Bauplan werden Objekte erzeugt. Anders als in objektorientierten und klassenbasierten Sprachen, wo Klassen das Muster fÃ¼r Objekte sind.\nPrototypen unterscheiden sich von Klassen dahingehend, dass auf Objekten eines Prototyps beliebige Operationen ausgefÃ¼hrt werden kÃ¶nnen. Das geht bei Klassen nicht. Ein weiterer Unterschied ist, wenn aus einer Klasse ein Objekt gebildet wird, entsteht eine Instanz. Bei Objekten eines Prototypen referenziert das erzeugte Objekt auf den Prototypen. Auch ist es mÃ¶glich, das Objekte eines Prototyps nachtrÃ¤glich mit Eigenschaften und Methoden ergÃ¤nzt werden kÃ¶nnen. Das geht bei Klassen auch nicht. [2, 47]\nTypisierung\nJavaScript ist ein Vertreter der dynamischen Typisierung. Das bedeutet, dass die TypprÃ¼fung erst zur Laufzeit passiert - beispielsweise die PrÃ¼fung des Datentyps einer Variable. [2]\nTypsicherheit\nIn Sachen Typsicherheit nimmt es JavaScript nicht allzu ernst. In groÃen Projekten ist JavaScript bezÃ¼glich der dynamischen Typsicherheit nicht einfach zu handhaben, da Typen schlichtweg nicht angegeben werden mÃ¼ssen. [5]\nFrontend\nJavaScript zÃ¤hlt wohl mit zu den beliebtesten Programmiersprachen Ã¼berhaupt und die Sprache unterstÃ¼tzt wohl die meisten Frameworks und Bibliotheken, die es fÃ¼r den Frontend-Bereich gibt. JavaScript ist Ã¼beraus beliebt und dynamisch und unterstÃ¼tzt unter anderem folgende Frontend-Frameworks und Bibliotheken: Angular, React, Vue.js, Ember.js, Aurelia, und noch viele mehr! [19, 48, 49]\nBackend\nWie beim Frontend, zÃ¤hlt JavaScript auch beim Backend zu den beliebtesten Programmiersprachen Ã¼berhaupt. JavaScript unterstÃ¼tzt auch im Bereich Backend eine vielzahl von verschiedenen Frameworks und Bibliotheken: Node.js, Next.js, Express.js, Meteor, und mehr. [49, 50]\n3.1.2 TypeScript Einer der hÃ¤ufigsten auftretenden Fehler bei der Programmierung mit JavaScript sind Typfehler. Da Typen bei JavaScript nicht angegeben werden mÃ¼ssen, passiert es hÃ¤ufig, das ein anderer Typ Ã¼bergeben wird, als erwartet und dadurch zahlreiche Fehler entstehen kÃ¶nnen. Das Ziel von TypeScript ist ein statischer Type Checker fÃ¼r JavaScript Programme darzustellen. Bevor das Programm ausgefÃ¼hrt wird, wird Ã¼berprÃ¼ft, ob die Typen im Programm korrekt sind. Typescript bietet dabei alle JavaScript FunktionalitÃ¤ten und zusÃ¤tzlich dazu ein eigenes Typsystem. JavaScript bietet beispielsweise primitive Datentypen wie string oder number, Ã¼berprÃ¼ft jedoch nicht, ob diese auch konsistent zugewiesen werden. TypeScript tut das. [31, 32, 33]\nObjektorientierte Programmierung\nDie objektorientierte Programmierung mit TypeScript erfolgt nach den gleichen Prinzipien wie in JavaScript. TypeScript unterstÃ¼tzt auch dabei auch JavaScript-âKlassenâ. Des Weiteren werden weitere typische Pattern wie die Implementierung von Interfaces, Vererbung und statische Methoden unterstÃ¼tzt. [31]\nTypisierung\nTypeScript ist mit seinem statischen Typsystem ein Vertreter der statischen Typisierung. Die Verwendung dieses ist jedoch optional, weshalb auch das Schreiben von dynamisch typisierten Code mÃ¶glich ist. [31, 33]\nTypsicherheit\nTypeScript verbessert die Typsicherheit von JavaScript-Programmen, beispielsweise dadurch, das nun Typen angegeben werden mÃ¼ssen. Allerdings ist auch die Typsicherheit von TypeScript noch ausbaufÃ¤hig, weshalb im Jahr 2014 das Projekt: Safer TypeScript von Microsoft Research entwickelt und im Juli desselben Jahres verÃ¶ffentlicht wurde. Hierbei soll die Typsicherheit durch eine Kombination von statischer und dynamischer ÃberprÃ¼fungen gewÃ¤hrleistet werden. [31, 32, 34]\nFrontend\nTypeScript ist mittlerweile eine Ã¼beraus beliebte Programmiersprache im Bereich Frontend-Entwicklung. Laut einem Bericht von State of Frontend aus dem Jahr 2020, haben 94% der befragten Frontend-Entwickler angegeben, dass sie am liebsten mit TypeScript entwickeln. Weitere Ergebnisse des Berichts sind auf der entsprechenden Webseite nachzulesen: https://tsh.io/state-of-frontend/ [61]\nBackend\nSeit Node.js es ermÃ¶glicht auch mit JavaScript im Backend-Bereich zu entwickeln, gewinnt auch TypeScript an Beliebtheit bei der Backend-Entwicklung. Besonders dadurch, das TypeScript sowohl im Backend als auch im Frontend verwendet werden kann, sorgt dies fÃ¼r eine positive Entwicklererfahrung, da nun nicht mehr zwischen verschiedenen Programmiersprachen gewechselt werden muss.\n3.1.3 Python Python ist eine zu interpretierende und interaktive Programmiersprache. Ein Ziel der Programmiersprache Python ist eine sehr einfache und Ã¼bersichtliche Syntax. Wodurch auch Nicht-Programmierern der Einstieg in die Sprache leicht fallen soll. Python verfÃ¼gt unter anderem Ã¼ber Module, Klassen, Exceptions und High-Level dynamische Datentypen. [35, 36]\nObjektorientierte Programmierung\nPython ist eine hÃ¶here und objektorientierte Programmiersprache. Mit dem SchlÃ¼sselwort class kÃ¶nnen Klassen definiert werden, welche Attribute und Methoden beinhalten.\nTypisierung\nPython ist Vertreter der dynamischen Typisierung. [35]\nTypsicherheit\nSeit Version 3.6 sind Typangaben fÃ¼r Variablen bei Python mÃ¶glich. Vorher erfuhr Python die Typen erst zur Laufzeit und Variablen mussten nicht einem speziellen Typen zugewiesen werden. Die sogenannten Type Hints in Python 3.6 fÃ¼gen Variablen oder anderen Programmobjekten Typinformationen hinzu. So kann nun auch der RÃ¼ckgabewert einer Funktion vordefiniert werden. Durch die dynamische Typisierung und den Type Hints bietet Python eine hohe Typsicherheit. [35]\nFrontend\nEs ist mÃ¶glich, Python im Frontend zu nutzen. Dies wird jedoch nicht gÃ¤ngige Praxis, da meist JavaScript, sowie ihre Bibliotheken benÃ¶tigt werden. AuÃerdem muss Python-Code vorher geparst und ausgefÃ¼hrt werden. Dadurch ist Python-Code langsamer, als andere Programmiersprachen [36, 62].\nBackend\nAls Backend-Programmiersprache ist Python im Vergleich zum Frontend wesentlich beliebter. Einer der GrÃ¼nde dafÃ¼r ist die einfache Lesbarkeit von Python. Des Weiteren unterstÃ¼tzen zahlreiche Web-Frameworks mittlerweile Python, dazu zÃ¤hlen beispielsweise Django oder Flask. [37]\n3.1.4 PHP Ist die Rede von Web-Programmiersprachen, so spielt die Skriptsprache PHP eine Ã¼beraus groÃe Rolle. PHP ist die mit Abstand am hÃ¤ufigsten serverseitig verwendete Programmiersprache zur Erstellung von Webseiten. Die Syntax von PHP ist angelehnt an den Programmiersprachen C und Perl. Anders als beispielsweise bei JavaScript, ist PHP eine serverseitig interpretierte Skriptsprache, mit der es mÃ¶glich ist, Webseiten dynamisch zu erzeugen, sowie Daten aus Benutzereingaben und Datenbanken zu verarbeiten.\nBei serverseitigem Code wird der Quelltext nicht direkt an den Webbrowser Ã¼bermittelt, sondern an einen Interpreter auf dem Webserver. Der PHP-Interpreter schickt die Ausgabe an den Browser - ein HTML-Dokument. [51, 52]\nWarum PHP und nicht rein HTML?\nHTML oder HTML-Dateien sind rein statisch. Zum Beispiel: Bei der Erstellung einer Tabelle mit einer bestimmten Anzahl an EintrÃ¤gen kann nur diese bestimmte Anzahl angezeigt werden. Mit PHP ist das flexibel beziehungsweise dynamisch mÃ¶glich. Theoretisch alles, was auf einer Webseite dynamisch angezeigt werden soll, ist mit PHP mÃ¶glich - beispielsweise ein Besuchercounter oder EintrÃ¤ge in einem GÃ¤stebuch. [53]\nObjektorientierte Programmierung\nIn PHP ist die objektorientierte Programmierung mÃ¶glich. Dadurch wird PHP-Code leichter wartbar und ist einfacher wiederverwendbar. [51, 54]\nTypisierung\nWie bei vielen anderen Skriptsprachen auch, ist PHP ein Vertreter der dynamischen Typisierung beziehungsweise PHP ist schwach typisiert. Das bedeutet, dass die TypprÃ¼fung erst zur Laufzeit passiert - beispielsweise die PrÃ¼fung des Datentyps einer Variable. [55]\nTypsicherheit\nPHP ist eine schwach typisierte Programmiersprache und somit ist es nicht mÃ¶glich, typsicher zu deklarieren. Jedoch gibt es bei PHP das Type Hinting mit dem es Funktionen ermÃ¶glicht, spezifische Parameter zu erzwingen. [56, 57]\nFrontend und Backend\nPHP unterstÃ¼tzt unter anderem folgende Frameworks: Symfony, Laravel, CodeIgniter, CakePHP oder Phalcon. [58]\n3.1.5 Ruby Ruby ist eine dynamische Programmiersprache, die sich produktiv einsetzen lÃ¤sst. Sie zeichnet sich aus durch eine elegante und leicht zu lesende und schreibende Syntax. Ruby ist eine objektorientierte Programmiersprache, unterstÃ¼tzt aber weitere Programmierparadigmen, wie prozedurale und funktionale Programmierung. Die wohl grÃ¶Ãte Verbreitung findet Ruby im Einsatz als Webserver-Skriptsprache. [42]\nObjektorientierte Programmierung\nRuby ist von Grund auf objektorientiert, was bedeutet, dass in Ruby ausnahmslos jeder Wert ein Objekt und jede Funktion eine Methode ist. Selbst Klassen sind Objekte. Die Objekte in Ruby sind dynamisch, was bedeutet, dass es auch mÃ¶glich ist, prototypenbasiert zu programmieren. Damit kÃ¶nnen Objekte eigene Methoden haben. [42]\nTypisierung\nRuby ist Vertreter der dynamischen Typisierung und ist stark typisiert. [42]\nTypsicherheit\nWie bei anderen Vertretern der dynamischen Typisierung auch ist es bei Ruby nicht mÃ¶glich, typsicher zu deklarieren. [42]\nFrontend\nRuby wird teilweise auch fÃ¼r den Frontend-Bereich eingesetzt. Dennoch wird Ruby mehr als Backend-Programmiersprache gesehen als Frontend. Um Ruby im Frontend einzusetzen, muss Ruby-Quellcode in JavaScript-Code umgewandelt werden. Mit Ruby2JS, einer Ruby Erweiterung kÃ¶nnen Entwickler in Ruby-Code schreiben und den Code dann in JavaScript-Code umwandeln lassen. [59]\nBackend\nRuby ist eine Ã¼beraus beliebte Programmiersprache fÃ¼r den Backend-Bereich. Das wohl bekannteste Backend-Framework fÃ¼r Ruby ist Ruby on Rails. Das beliebteste Feature von Ruby on Rails ist die Model-View-Controller-Architektur (kurz MVC). Dadurch ermÃ¶glicht das Framework, alle Code-VorgÃ¤nge separat durchzufÃ¼hren. Neben Ruby on Rails gibt es noch weitere Backend-Frameworks wie: Sinatra, Roda oder auch Camping. [41, 60]\n"},{"uri":"/webhandbook/programming_languages/_4_html_css/","title":"4 HTML und CSS","tags":["html","css"],"description":"HTML und CSS","content":"Sowohl HTML (H yper t ext M arkup L anguage) als auch CSS (C ascading S tyle S heets) sind keine Programmiersprachen.\nHTML ist eine Auszeichnungssprache, welche verwendet wird, um eine Webseite zu strukturieren. Die Sprache besteht dabei aus sogenannten Tags, welche um Inhalte herum platziert werden, um diese beispielsweise als Link zu kennzeichnen. [38]\nCSS ist eine Stylesheet-Sprache, die es erlaubt, das Aussehen von Elementen festzulegen. So kann mit CSS beispielsweise die Schriftfarbe angepasst werden. Das CSS wird mit einem HTML-Dokument verknÃ¼pft, so das dieses auf die RegelsÃ¤tze im CSS-Dokument zugreifen kann. Ein Regelsatz besteht dabei aus einem Selektor, dieser bestimmt, auf welche Elemente der Regelsatz angewendet werden soll und aus einer oder mehreren Deklarationen. Eine Deklaration beinhaltet dabei eine Eigenschaft - beispielsweise die Farbe - und den Eigenschaftswert - beispielsweise rot. [39]\nHTML und CSS sind beides wichtige Bestandteile bei der Webentwicklung, die jedoch nicht als Programmiersprachen angesehen werden kÃ¶nnen.\n"},{"uri":"/webhandbook/css_processing/_4_popular_tools/","title":"4 Popular Tools","tags":[],"description":"","content":"There are four very popular CSS processing tools. They all support some of the features mentioned above, but none of them support them all. Further, some of them can be used together, but again not all.\nSass Sass[10] is the oldest of the four presented tools, with the initial release in 2006. It has a large set of features that extend the CSS syntax, like nesting, functions or variables, and supports two syntaxes. The original syntax (syntactically awesome style sheets, .sass), uses indention and line breaks instead of curly braces and semicolons. Later another syntax was added that is similar to CSS block formatting (Sassy CSS, .scss).\nLess The Less[11] processor was created after Sass, and as such, they have near feature-parity. The language was designed to be very close to CSS and, CSS block formatting syntax. Even though Less can be precompiled to CSS as the other tools, it is also possible to ship and run the compiler in the browser.\nWhile Sass uses $ to denote variables, Less employs @-symbols, which has the drawback that some parts of the modern CSS spec, such as media queries or animations, also use it for other purposes, which can be confusing.\nStylus The third stylesheet processor that appeared in 2010 and is influenced by Sass and Less is Stylus[12], hence the set of features is very similar. The big differentiator of Stylus is its minimalist syntax, which makes line-breaks, and semicolons optional, comparable to Sass, and even go a step further and makes colons optional as well.\nStylus adoption is relatively low in comparison to Sass and Less[13]. Especially built-in support in IDEs, Editors and bundlers is lower. But most popular development tools have extensions available.\nPostCSS PostCSS[14] is different from the previous tools in so far that it is less a CSS processor in of itself, and instead a framework with which plugins can modify CSS. First, the input CSS is parsed into a syntax tree on which plugins can perform modifications, once they are done PostCSS transforms the modified tree back into CSS.\nThe default parser for PostCSS can only parse CSS; foreign syntax, as it is introduced by Less, Sass or Styles first needs to be compiled down to CSS. Therefore, it is not uncommon that PostCSS is used in conjunction with one of these languages. Also, due to the available range of plugins PostCSS can not only be used for minification and auto prefixing, but also as a linter or formatter.\n"},{"uri":"/webhandbook/css_processing/_5_integration/","title":"5 Integration and Considerations","tags":[],"description":"","content":"Integration The presented processing tools all come with command-line interfaces, which take multiple input files and usually a config to generate or transform CSS.\nUsually, these transformations are done in a more complex build pipeline for the entire project, using a bundler or task-runner. Especially Sass and Less have multiple implementations in different languages. Which one is most suitable often depends on the bundler or task-runner that is being used.\nConsiderations CSS processors are optional tools that offer a wide array of capabilities for different parts of a web project. Because many modern web projects use a bundler or task-runner already, including these tools is mostly trivial.\nOptimizations such as minification are easy to integrate and can instantly improve a web page\u0026rsquo;s performance. They don\u0026rsquo;t require the adaption of a different language or different patterns.\nOn the other hand, Authoring features are only as good as how they are used. If a project can benefit from these features has to be assessed the same way other programming patterns and frameworks are.\n"},{"uri":"/webhandbook/programming_languages/_5_vergleich_tabellenform/","title":"5 Vergleich in Tabellenform","tags":["vergleich"],"description":"Vergleich in Tabellenform","content":"Im folgenden Abschnitt werden die fÃ¼nf vorgestellten Programmiersprachen tabellarisch nach ihren Eigenschaften verglichen, um fÃ¼r einen groben Ãberblick zu sorgen.\nAuffÃ¤llig hierbei ist, dass alle Programmiersprachen sowohl im Frontend als auch im Backend verwendet werden kÃ¶nnen, was nicht notwendigerweise bedeutet, dass das auch so praktiziert wird. AuÃerdem ist bei allen vorgestellten Programmiersprachen objektorientiertes Programmieren mÃ¶glich beziehungsweise manche Sprachen bieten ein Ã¤hnliches Schema fÃ¼r Klassen.\nAlle 5 Programmiersprachen sind zudem dynamisch typisiert. Einzige Ausnahme bietet TypeScript mit seiner optional statischen Typisierung.\n"},{"uri":"/webhandbook/programming_languages/_6_fazit/","title":"6 Fazit","tags":["fazit"],"description":"Fazit","content":"Es gibt nicht die eine Programmiersprache fÃ¼r die Webentwicklung. Jede Programmiersprache hat Vor- und Nachteile gegenÃ¼ber einer anderen. Dazu zÃ¤hlen neben der Typsicherheit, Typisierung und objektorientierten Programmierung auch die KomplexitÃ¤t der Programmiersprache. So ist beispielsweise Python durch die einfache Syntax leichter verstÃ¤ndlich fÃ¼r Nicht-Informatiker. Es ist schlicht notwendig zu entscheiden, fÃ¼r welchen Anwendungszweck welche Sprache angewendet werden soll. Python wird beispielsweise hÃ¤ufiger in einem wissenschaftlichen Zusammenhang verwendet, da dort zahlreiche Bibliotheken fÃ¼r viele Anwendungen existieren sowie Python sich besonders fÃ¼r den Bereich Machine Learning als auch KI besser eignet. Ein weiteres Beispiel: Soll die Anwendung eine simple Webseite inklusive Texten und Bildern sein, so ist die Umsetzung mit JavaScript wesentlich komfortabler als mit Python. [62, 63]\nEinen aktuellen Blick auf die beliebtesten Sprachen und Frameworks im Bereich Frontend liefert ein Bericht aus dem Jahr 2020 [61]: https://tsh.io/state-of-frontend/#ebook\nHierbei gewann React mit deutlichem Abstand. Darauf folgten Angular und Vue.js. Alle drei Frameworks nutzen dabei JavaScript und / oder TypeScript als Web-Programmiersprache. Daraus lÃ¤sst sich schlieÃen, dass diese beiden Sprachen zumindest im Frontend momentan die wohl beliebtesten Programmiersprachen sind.\n"},{"uri":"/webhandbook/css_processing/_6_literature/","title":"6 Literature","tags":[],"description":"","content":" Deconfusing Pre- and Post-processing â https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3 Still using CSS preprocessors in 2020? â https://medium.com/@bartsis/still-using-css-preprocessors-in-2020-aa893a476bc4 How to calculate percent minus px in SASS ? â https://www.geeksforgeeks.org/how-to-calculate-percent-minus-px-in-sass/ Nesting Style Rules â https://sass-lang.com/documentation/style-rules#nesting css-modules â https://github.com/css-modules/css-modules PostCSS Color Hex Alpha Plugin â https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-color-hex-alpha autoprefixer â https://github.com/postcss/autoprefixer Is Vendor Prefixing Dead? â https://css-tricks.com/is-vendor-prefixing-dead/ Vendor Prefix - MDN â https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix Sass: Syntactically Awesome Style Sheets â https://sass-lang.com/ Less CSS â https://lesscss.org/ CSS Style Syntax â https://stylus-lang.com/ Poll Results: Popularity of CSS Preprocessors â https://css-tricks.com/poll-results-popularity-of-css-preprocessors/ PostCSS - a tool for transforming CSS with JavaScript â https://postcss.org/  "},{"uri":"/webhandbook/programming_languages/_7_literaturverzeichnis/","title":"7 Literaturverzeichnis","tags":["literaturverzeichnis"],"description":"Literaturverzeichnis","content":" [1] âJavaScriptâ, Mozilla, Link: https://developer.mozilla.org/de/docs/Web/JavaScript (letzter Zugriff am 30.12.2021) [2] âJavaScriptâ, Wikipedia, Link: https://de.wikipedia.org/wiki/JavaScript (letzter Zugriff am 30.12.2021) [3] âECMAScriptâ, Wikipedia, Link: https://en.wikipedia.org/wiki/ECMAScript (letzter Zugriff am 30.12.2021 / 13:37) [4] âMemory footprintâ, Wikipedia, Link: https://en.wikipedia.org/wiki/Memory_footprint (letzter Zugriff am 30.12.2021) [5] âWas ist Typsicherheit?â, Dev Insider, Link: https://www.dev-insider.de/was-ist-typsicherheit-a-955933/ (letzter Zugriff am 30.12.2021) [6] \u0026ldquo;Typsicherheit\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Typsicherheit (letzter Zugriff am 18.01.2022) [7] âStatische Typisierungâ, Wikipedia, Link: https://de.wikipedia.org/wiki/Statische_Typisierung (letzter Zugriff am 30.12.2021) [8] âDynamische Typisierungâ, Wikipedia, Link: https://de.wikipedia.org/wiki/Dynamische_Typisierung (letzter Zugriff am 30.12.2021) [9] \u0026ldquo;Typisierung (Informatik)\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Typisierung_(Informatik) (letzter Zugriff am 18.01.2022) [10] âIs JavaScript a (true) OOP language?â, Andrea Chiarelli, Link: https://medium.com/@andrea.chiarelli/is-javascript-a-true-oop-language-c87c5b48bdf0 (letzter Zugriff am 30.12.2021) [11] âOOP in JavaScriptâ, Demir Jasarevic, Link: https://www.demirjasarevic.com/oop-javascript/ (letzter Zugriff am 30.12.2021) [12] âWeb-Programmiersprachen: Die besten Sprachen fÃ¼r die Webentwicklungâ, MediaartJena, Link: https://www.mediaart-jena.de/index.php/2020/03/09/web-programmiersprachen-die-besten-sprachen-fuer-die-webentwicklung/ (letzter Zugriff am 30.12.2021) [13] âPerl, PHP, Python Ein Vergleichâ, Alvar C.H. Freude, Link: https://alvar.a-blast.org/vortraege/scriptsprachen-vergleich.pdf (letzter Zugriff am 30.12.2021) [14] âTop 7 Programming Languages for Backend Web Developmentâ, GeeksforGeels, Link: https://www.geeksforgeeks.org/top-7-programming-languages-for-backend-web-development/ (letzter Zugriff am 01.01.2022) [15] âFrontendâ, DigitalWiki, Link: https://www.digitalwiki.de/frontend/ (letzter Zugriff am 01.01.2022) [16] âTop 10 Frontend-Sprachenâ, Back4App, Link: https://blog.back4app.com/de/top-10-frontend-sprachen/ (letzter Zugriff am 01.01.2022) [17] âBackend â Definitionâ, IT-Serive.Network, Link: https://it-service.network/it-lexikon/backend (letzter Zugriff am 01.01.2022) [18] âWas ist Node.js und warum du es benutzen solltestâ, kinsta, Link: https://kinsta.com/de/wissensdatenbank/was-ist-node-js/ (letzter Zugriff am 01.01.2022) [19] â10 Best JavaScript Frameworks to Use in 2022â, Simran Kaur Arora, Link: https://hackr.io/blog/best-javascript-frameworks (letzter Zugriff am 01.01.2022) [20] âTypes of Computer languagesâ, Pooja Gupta , Link: https://www.educba.com/types-of-computer-language/ (letzter Zugriff am 28.11.2021) [21] âcomputer programming languageâ,\tDavid Hemmendinger, Link: https://www.britannica.com/technology/computer-programming-language (letzter Aufruf am 28.11.2021) [22] âCOMPARING WEB LANGUAGES IN THEORY AND PRACTICâ, Kristofer J. Carlson, Link: http://www.krisandsusanna.com/Documents/Comparing%20Web%20Languages.pdf (letzter Aufruf am 28.11.2021) [23] âProgramming Languages for the Web 2011â, David Matthias StÃ¶ckl, Link: https://www.blackbam.at/blackbams-blog/wp-content/uploads/2011/09/programming_languages_for_the_web_2011.pdf (letzter Aufruf am 28.11.2021) [24] âTypescript vs JavaScript: Whatâs the Difference?â, Hartman, Link: https://www.guru99.com/typescript-vs-javascript.html (letzter Zugriff am 29.11.2021) [25] âobject-oriented programming (OOP)â, Alexander S. Gillis, Link: https://searchapparchitecture.techtarget.com/definition/object-oriented-programming-OOP (letzter Zugriff am 29.11.2021) [26] âTypes of programming languageâ, bbc.co.uk, Link: https://www.bbc.co.uk/bitesize/guides/z4cck2p/revision/1 (letzter Zugriff am 9.11.2021) [27] âDifference between High Level and Low level languagesâ, GeeksforGeels, Link: https://www.geeksforgeeks.org/difference-between-high-level-and-low-level-languages/ (letzter Zugriff am 29.11.2021) [28] âWhat is a Programming Language and Different Typesâ, WatElectronics.com, Link: https://www.watelectronics.com/types-of-programming-languages-with-differences/ (letzter Zugriff am 29.11.2021) [29] âList of programming languages by typeâ, Wikipedia, Link: https://en.wikipedia.org/wiki/List_of_programming_languages_by_type (letzter Zugriff am 29.11.2021) [30] âcomputer programming languageâ, Britannica, Link: https://www.britannica.com/technology/computer-programming-language (letzter Zugriff am 29.11.2021) [31] TypeScript Docs, Microsoft, Link: https://www.typescriptlang.org/docs/ (Letzter Zugriff am 04.01.2022) [32] âMehr Typsicherheit mit Safer TypeScriptâ, Heise online, Alexander Neumann, 04.07.2014, Link: https://www.typescriptlang.org/docs/ (letzter Zugriff am 04.01.2022) [33] âTypeScript: Microsofts neues typisiertes JavaScriptâ, heise online, Golo Roden, 04.10.2012, Link: https://www.typescriptlang.org/docs/ (letzter Zugriff am 04.01.2022) [34] âSafer TypeScriptâ, Microsoft, Link https://www.microsoft.com/en-us/download/details.aspx?id=52309\u0026amp;from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fdownloads%2Fb250c887-2b79-4413-9d7a-5a5a0c38cc57%2F (letzter Zugriff am 04.01.2022) [35] âExplizite Typangaben in Python: Segen oder Fluch?â , heise online, Gerhard VÃ¶lki, 09.02.2018, Link: https://www.heise.de/hintergrund/Explizite-Typangaben-in-Python-Segen-oder-Fluch-3964094.html (letzter Zugriff am 04.01.2022) [36] âUsing Python for Frontendâ, Fernando Doglio, 02.04.2021, Link: https://blog.bitsrc.io/using-python-for-frontend-f90a0f8d51ae (letzter Zugriff am 04.01.2022) [37] âWhy we choose Python as a backend languageâ, Pablo Giampedraglia, 23.11.2019, Link: https://www.asapdevelopers.com/python-backend-language/ (letzter Zugriff am 04.01.2022) [38] âHTML-Grundlagenâ, Mozilla, Link: https://developer.mozilla.org/de/docs/Learn/Getting_started_with_the_web/HTML_basics (letzter Zugriff am 04.01.2022) [39] âCSS-Grundlaagenâ, Mozilla, Link:https://developer.mozilla.org/de/docs/Learn/Getting_started_with_the_web/CSS_basics (letzter Zugriff am 04.01.2022) [40] âFront End vs. Back End Developmentâ, Nicholas Gallinelli, Link: https://flatironschool.com/blog/front-end-vs-back-end-development (letzter Zugriff am 04.01.22) [41] âTop 10 Ruby Frameworksâ, Back4App, Link: https://blog.back4app.com/ruby-frameworks/ (letzter Zugriff am 04.01.22) [42] âRuby (Programmiersprache)â, Wikipedia, Link: https://de.wikipedia.org/wiki/Ruby_(Programmiersprache) (letzter Zugriff am 04.01.2022) [43] \u0026ldquo;Typisierung\u0026rdquo;, inztitut.de, Link: https://www.inztitut.de/blog/glossar/typisierung/ (letzter Zugriff am 19.01.2022) [44] \u0026ldquo;Was ist Frontend?\u0026rdquo;, IT-Service.Network, Link: https://it-service.network/it-lexikon/frontend#:~:text=Als%20Frontend%20wird%20die%20so,das%20Backend%20n%C3%A4her%20am%20System. (letzter Zugriff am 19.01.2022) [45] \u0026ldquo;Frontend vs Backend\u0026rdquo;, GeeksforGeeks, Link: https://www.geeksforgeeks.org/frontend-vs-backend/ (letzter Zugriff am 19.01.2022) [46] \u0026ldquo;Introducing JavaScript objects\u0026rdquo;, Mozilla, Link: https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects (letzter Zugriff am 19.01.2022) [47] \u0026ldquo;Prototypenbasierte Programmierung\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Prototypenbasierte_Programmierung (letzter Zugriff am 19.01.2022) [48] \u0026ldquo;The Most Popular JavaScript Frameworks â 2011/2021\u0026rdquo;, statisticsanddata.org, Link: https://statisticsanddata.org/data/the-most-popular-javascript-frameworks-2011-2021/ (letzter Zugriff am 19.01.2022) [49] \u0026ldquo;State of the Developer Nation 21st Edition\u0026rdquo;, SlashData, Link: https://slashdata-website-cms.s3.amazonaws.com/sample_reports/_TPqMJKJpsfPe7ph.pdf (letzter Zugriff am 19.01.2022) [50] \u0026ldquo;Top 10 JavaScript Frameworks for Server Side Development in 2020\u0026rdquo;, Md Kamaruzzaman, Link: https://javascript.plainenglish.io/top-10-javascript-frameworks-for-server-side-development-in-2020-6d265016c02 (letzter Zugriff am 19.01.2022) [51] \u0026ldquo;PHP\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/PHP (letzter Zugriff am 19.01.2022) [52] \u0026ldquo;PHP\u0026rdquo;, wiki.selfhtml.org, Link: https://wiki.selfhtml.org/wiki/PHP (letzter Zugriff am 19.01.2022) [53] \u0026ldquo;Wie funktioniert PHP\u0026rdquo;, Lernenhoch2, Link: http://php.lernenhoch2.de/lernen/php-einleitung/wie-funktioniert-php/ (letzter Zugriff am 19.01.2022) [54] \u0026ldquo;Objektorientierte Programmierung\u0026rdquo;, PHP-einfach.de, Link: https://www.php-einfach.de/experte/objektorientierte-programmierung-oop/ (letzter Zugriff am 19.01.2022) [55] \u0026ldquo;PHP - Grundlagen - Variablen - Typisierung\u0026rdquo;, peterkropff.de, Link: https://www.peterkropff.de/site/php/typisierung.htm (letzter Zugriff am 19.01.2022) [56] \u0026ldquo;Type Hinting\u0026rdquo;, hgb Leipzig, Link: https://www.hgb-leipzig.de/~uklaus/PHP/language.oop5.typehinting.html (letzter Zugriff am 19.01.2022) [57] \u0026ldquo;Type Hinting\u0026rdquo;, fit4php.net, Link: http://www.fit4php.net/sprachgrundlagen/funktionen-und-ihre-aufrufe/type-hinting/ (letzter Zugriff am 19.01.2022) [58] \u0026ldquo;10 Popular PHP frameworks for web developers to consider in 2021\u0026rdquo;, raygun.com, Link: https://raygun.com/blog/top-php-frameworks/ (letzter Zugriff am 19.01.2022) [59] \u0026ldquo;Ruby2JS\u0026rdquo;, ruby2js.com, Link: https://www.ruby2js.com/ (letzter Zugriff am 19.01.2022) [60] \u0026ldquo;Ruby on Rails\u0026rdquo;, Wikipedia, Link: https://de.wikipedia.org/wiki/Ruby_on_Rails (letzter Zugriff am 19.01.2022) [61] \u0026ldquo;State of the Frontend 2020\u0026rdquo;, Patryk Mamczur, Link: https://tsh.io/state-of-frontend/#ebook (letzter Zugriff am 23.01.2022) [62] \u0026ldquo;The 16 Most Important Pros and Cons of using Python for Web Development\u0026rdquo;, Julie Korsun, 06.07.2021, Link: https://djangostars.com/blog/python-web-development/ (letzter Zugriff am 23.01.2022) [63] \u0026ldquo;How to Choose a Programming Language For a Project?\u0026rdquo;, GeeksforGeeks, 31.08.2021, Link: https://www.geeksforgeeks.org/how-to-choose-a-programming-language-for-a-project/ (letzter Zugriff am 23.01.2022)  "},{"uri":"/webhandbook/apis/","title":"APIs","tags":["chapter"],"description":"","content":"APIs Einleitungstext\n"},{"uri":"/webhandbook/authentication/","title":"Authentication","tags":["chapter"],"description":"","content":"Authentication Einleitungstext\n"},{"uri":"/tags/backend/","title":"backend","tags":[],"description":"","content":""},{"uri":"/tags/benutzererfahrung/","title":"Benutzererfahrung","tags":[],"description":"","content":""},{"uri":"/tags/benutzerrecherche/","title":"Benutzerrecherche","tags":[],"description":"","content":""},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/chapter/","title":"chapter","tags":[],"description":"","content":""},{"uri":"/webhandbook/ci_cd/","title":"CI/CD","tags":["chapter"],"description":"","content":"CI/CD Einleitungstext\n"},{"uri":"/credits/","title":"Credits","tags":[],"description":"","content":"Contributors Lorem Ipsum\nMitwirkende Lorem Ipsum\n"},{"uri":"/tags/css/","title":"css","tags":[],"description":"","content":""},{"uri":"/webhandbook/css_processing/","title":"CSS Processing","tags":["chapter"],"description":"","content":"CSS Processing CSS is a powerful styling language whose feature set is constantly evolving, that allows incredible flexibility when designing websites. However, maintaining the structure, compatibility, and efficiency of stylesheets can become problematic, especially as projects grow.\nVarious CSS processing tools aim to address the shortcomings of the language with different approaches. Either by adding features to the language, modifying the syntax, or optimizing already written CSS. Of course, Browsers only understand the spec-compliant official version of CSS, so whatever a processor is doing has to happen before the client evaluates the CSS stylesheet.\nThis chapter will delve into commonly used features, present a few of the most popular CSS processors and cover the integration of CSS processors into web development toolchains.\n"},{"uri":"/webhandbook/databases/","title":"Databases","tags":["chapter"],"description":"","content":"Databases Einleitungstext\n"},{"uri":"/tags/fazit/","title":"fazit","tags":[],"description":"","content":""},{"uri":"/tags/frontend/","title":"frontend","tags":[],"description":"","content":""},{"uri":"/tags/html/","title":"html","tags":[],"description":"","content":""},{"uri":"/tags/human-centered-design/","title":"Human-Centered Design","tags":[],"description":"","content":""},{"uri":"/tags/informationsarchitektur/","title":"Informationsarchitektur","tags":[],"description":"","content":""},{"uri":"/tags/javascript/","title":"javascript","tags":[],"description":"","content":""},{"uri":"/tags/literaturverzeichnis/","title":"literaturverzeichnis","tags":[],"description":"","content":""},{"uri":"/webhandbook/microservices/","title":"Microservices","tags":["chapter"],"description":"","content":"Microservices Einleitungstext\n"},{"uri":"/webhandbook/node/","title":"Node.js","tags":["chapter"],"description":"","content":"Node.js Einleitungstext\n"},{"uri":"/tags/php/","title":"php","tags":[],"description":"","content":""},{"uri":"/tags/projekt0/","title":"projekt0","tags":[],"description":"","content":""},{"uri":"/tags/projekt1/","title":"projekt1","tags":[],"description":"","content":""},{"uri":"/tags/projekt2/","title":"projekt2","tags":[],"description":"","content":""},{"uri":"/tags/projekt3/","title":"projekt3","tags":[],"description":"","content":""},{"uri":"/tags/projekt4/","title":"projekt4","tags":[],"description":"","content":""},{"uri":"/tags/projekt5/","title":"projekt5","tags":[],"description":"","content":""},{"uri":"/tags/projekte/","title":"projekte","tags":[],"description":"","content":""},{"uri":"/tags/python/","title":"python","tags":[],"description":"","content":""},{"uri":"/webhandbook/react/","title":"React","tags":["chapter"],"description":"","content":"React Einleitungstext\n"},{"uri":"/tags/ruby/","title":"ruby","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"/tags/typescript/","title":"typescript","tags":[],"description":"","content":""},{"uri":"/tags/typisierung/","title":"typisierung","tags":[],"description":"","content":""},{"uri":"/tags/typsicherheit/","title":"typsicherheit","tags":[],"description":"","content":""},{"uri":"/tags/ui/","title":"UI","tags":[],"description":"","content":""},{"uri":"/webhandbook/ui_ux/","title":"UI/UX","tags":["chapter"],"description":"","content":"UI/UX Einleitungstext\n"},{"uri":"/tags/usability-engineering/","title":"Usability Engineering","tags":[],"description":"","content":""},{"uri":"/tags/user-experience/","title":"User Experience","tags":[],"description":"","content":""},{"uri":"/tags/user-experience-design/","title":"User Experience Design","tags":[],"description":"","content":""},{"uri":"/tags/user-interface/","title":"User Interface","tags":[],"description":"","content":""},{"uri":"/tags/ux/","title":"UX","tags":[],"description":"","content":""},{"uri":"/tags/vergleich/","title":"vergleich","tags":[],"description":"","content":""},{"uri":"/webhandbook/programming_languages/","title":"Vergleich verschiedener Programmiersprachen mit Fokus auf Web-Technology","tags":["chapter"],"description":"","content":"Vergleich verschiedener Programmiersprachen mit Fokus auf Web-Technology Im folgenden Text geht es um den Vergleich verschiedener Web-Programmiersprachen. ZunÃ¤chst werden dabei die Grundlagen der Typisierung und Typsicherheit sowie Backend und Frontend nÃ¤her erlÃ¤utert. AnschlieÃend werden insgesamt 5 Programmiersprachen nÃ¤her vorgestellt, wobei besonders die Punkte Typisierung, Typsicherheit, objektorientierte Programmierung sowie die Anwendung im Front- und Backend-Bereich der einzelnen Programmiersprachen im Fokus liegen. Aufgrund des begrenzten Umfangs dieses Textes werden folgende Web-Programmiersprachen vorgestellt: JavaScript, TypeScript, Python, PHP und Ruby. Neben diesen 5 gibt es noch weitere Programmiersprachen, die fÃ¼r die Webentwicklung verwendet werden kÃ¶nnen. Auch HTML und CSS werden in diesem Text kurz erlÃ¤utert, aber nicht mit in das Fazit einbezogen. AnschlieÃend werden die vorgestellten Programmiersprachen tabellarisch gegenÃ¼bergestellt und in ihren Eigenschaften verglichen. AbschlieÃend folgt ein kompaktes Fazit.\n"},{"uri":"/tags/visualisierung/","title":"Visualisierung","tags":[],"description":"","content":""},{"uri":"/webhandbook/web_frameworks/","title":"Web Frameworks","tags":["chapter"],"description":"","content":"Web Frameworks Einleitungstext\n"},{"uri":"/tags/webhandbook/","title":"webhandbook","tags":[],"description":"","content":""},{"uri":"/webhandbook/website_rendering/","title":"Website Rendering","tags":["chapter"],"description":"","content":"Website Rendering Einleitungstext\n"},{"uri":"/","title":"WT1 WEB APPLICATIONS","tags":[],"description":"","content":"WT1 - Web Applications | WiSe2021/22 Willkommen auf unserer Projektseite im Kurs Web Applications.\nHier findet ihr einmal ein Webhandbook, das von uns verfasst wurde, sowie eine Ãbersicht Ã¼ber die Projekte, an denen dieses Semester gearbeitet wurde.\n"}]