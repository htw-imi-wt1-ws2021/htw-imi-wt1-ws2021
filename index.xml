<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learn Theme for Hugo on Documentation for Hugo Learn Theme</title><link>/</link><description>Recent content in Learn Theme for Hugo on Documentation for Hugo Learn Theme</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 01 Jun 2020 13:31:12 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Archetypes</title><link>/cont/archetypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cont/archetypes/</guid><description>Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more: archetypes.
It is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.
Chapter To create a Chapter page, run the following commands
hugo new --kind chapter &amp;lt;name&amp;gt;/_index.md It will create a page with predefined Front-Matter:</description></item><item><title>Markdown syntax</title><link>/cont/markdown/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>/cont/markdown/</guid><description>This page is a shameful copy of the great Grav original page. Only difference is information about image customization (resizing, add CSS classes&amp;hellip;)
Let&amp;rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.
Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.</description></item><item><title>Code highlighting</title><link>/cont/syntaxhighlight/</link><pubDate>Mon, 01 Jun 2020 13:31:12 +0100</pubDate><guid>/cont/syntaxhighlight/</guid><description>Learn theme uses highlight.js to provide code syntax highlighting.
Markdown syntax Wrap the code block with three backticks and the name of the language. Highlight will try to auto detect the language if one is not provided.
```json [ { &amp;#34;title&amp;#34;: &amp;#34;apples&amp;#34;, &amp;#34;count&amp;#34;: [12000, 20000], &amp;#34;description&amp;#34;: {&amp;#34;text&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;sensitive&amp;#34;: false} }, { &amp;#34;title&amp;#34;: &amp;#34;oranges&amp;#34;, &amp;#34;count&amp;#34;: [17500, null], &amp;#34;description&amp;#34;: {&amp;#34;text&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;sensitive&amp;#34;: false} } ] ``` Renders to:
[ { &amp;#34;title&amp;#34;: &amp;#34;apples&amp;#34;, &amp;#34;count&amp;#34;: [12000, 20000], &amp;#34;description&amp;#34;: {&amp;#34;text&amp;#34;: &amp;#34;.</description></item><item><title>Menu extra shortcuts</title><link>/cont/menushortcuts/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>/cont/menushortcuts/</guid><description>You can define additional menu entries or shortcuts in the navigation menu without any link to content.
Basic configuration Edit the website configuration config.toml and add a [[menu.shortcuts]] entry for each link your want to add.
Example from the current website:
[[menu.shortcuts]] name = &amp;quot;&amp;lt;i class='fab fa-github'&amp;gt;&amp;lt;/i&amp;gt; Github repo&amp;quot; identifier = &amp;quot;ds&amp;quot; url = &amp;quot;https://github.com/matcornic/hugo-theme-learn&amp;quot; weight = 10 [[menu.shortcuts]] name = &amp;quot;&amp;lt;i class='fas fa-camera'&amp;gt;&amp;lt;/i&amp;gt; Showcases&amp;quot; url = &amp;quot;/showcase&amp;quot; weight = 11 [[menu.</description></item><item><title>Icons and logos</title><link>/cont/icons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/cont/icons/</guid><description>The Learn theme for Hugo loads the Font Awesome library, allowing you to easily display any icon or logo available in the Font Awesome free collection.
Finding an icon Browse through the available icons in the Font Awesome Gallery. Notice that the free filter is enabled, as only the free icons are available by default.
Once on the Font Awesome page for a specific icon, for example the page for the heart, copy the HTML reference and paste into the markdown content.</description></item><item><title>Tags</title><link>/cont/tags/</link><pubDate>Thu, 29 Nov 2018 08:41:44 +0100</pubDate><guid>/cont/tags/</guid><description>Learn theme support one default taxonomy of gohugo: the tag feature.
Configuration Just add tags to any page:
--- date: 2018-11-29T08:41:44+01:00 title: Theme tutorial weight: 15 tags: [&amp;#34;tutorial&amp;#34;, &amp;#34;theme&amp;#34;] --- Behavior The tags are displayed at the top of the page, in their insertion order.
Each tag is a link to a Taxonomy page displaying all the articles with the given tag.
List all the tags In the config.toml file you can add a shortcut to display all the tags</description></item><item><title>1 Typsicherheit und Typisierung</title><link>/programminglanguages/_1_typsicherheit_typisierung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_1_typsicherheit_typisierung/</guid><description>1.1 Typsicherheit Die Typsicherheit sorgt dafür, dass die Code-Qualität gewährleistet wird und sich somit die Zuverlässigkeit des entwickelten Programms erhöht. Es obliegt dem Interpreter beziehungsweise Compiler die Sicherheit durch Typprüfung herzustellen und Typverletzungen aufzufangen. Manche Compiler geben Meldungen aus und in manchen passiert eine automatisierte Typumwandlung, sollte es eine Typverletzung geben. Beispielsweise warnt ein Compiler davor, eine Gleitkommazahl (Float, Double) an eine Ganzzahl-Variable (Integer) zu übergeben. Dennoch müssen bei Zuweisungen die beteiligten Typen nicht notwendigerweise identisch sein, da beispielsweise Ganzzahlen unter Umständen an Gleitkommazahlen-Variablen zugewiesen werden können.</description></item><item><title>2 Frontend und Backend</title><link>/programminglanguages/_2_frontend_backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_2_frontend_backend/</guid><description>2.1 Frontend Als Frontend wird die sogenannte Präsentationsebene bezeichnet. Also beispielsweise eine sichtbare Webseite eines Onlineshops, die für alle Nutzer einsehbar ist. Das Frontend ist näher am Benutzer (Client) und erlaubt einen benutzerfreundlichen Zugriff auf Daten und Prozesse, die vom Backend ausgehen.
Spricht man davon, welche Programmiersprache für das Frontend benutzt wird, ist es nicht möglich, eine klare Aussage zu schaffen. Es ist durchaus möglich, eine Präsentationsebene zu erschaffen, ohne dafür überhaupt eine Programmiersprache zu benutzen - mit HTML und CSS.</description></item><item><title>3 Verschiedene Web-Programmiersprachen</title><link>/programminglanguages/_3_verschiedene_websprachen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_3_verschiedene_websprachen/</guid><description>3.1 Web-Programmiersprachen Mittlerweile gibt es eine große Menge an verschiedenen Programmiersprachen. Jede Programmiersprache hat ihre Vorteile und Nachteile gegenüber einer anderen. Doch welche Programmiersprachen eignen sich für die Webentwicklung am besten? Gibt es überhaupt die eine Web-Programmiersprache?
Mit Web-Programmiersprachen können komplexe logische Anweisungen und Prozesse definiert werden. Jede Programmiersprache hat wie die verschiedenen Sprachfamilien auch ihre Eigenarten. In den folgenden Kapiteln werden die bekanntesten Vertreter der Web-Programmiersprachen kompakt vorgestellt.
3.1.1 JavaScript Bekannt ist JavaScript als prototypbasierte Skriptsprache für Webseiten.</description></item><item><title>4 HTML und CSS</title><link>/programminglanguages/_4_html_css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_4_html_css/</guid><description>Sowohl HTML (H yper t ext M arkup L anguage) als auch CSS (C ascading S tyle S heets) sind keine wirklichen Programmiersprachen.
HTML ist eine Auszeichnungssprache, welche verwendet wird, um eine Webseite zu strukturieren. Die Sprache besteht dabei aus sogenannten Tags, welche um Inhalte herum platziert werden, um diese beispielsweise als Link zu kennzeichnen.
CSS ist eine Stylesheet-Sprache, die es erlaubt, das Aussehen von Elementen festzulegen. So kann mit CSS beispielsweise die Schriftfarbe angepasst werden.</description></item><item><title>5 Vergleich in Tabellenform</title><link>/programminglanguages/_5_vergleich_tabellenform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_5_vergleich_tabellenform/</guid><description>Im folgenden Abschnitt werden die fünf vorgestellten Programmiersprachen tabellarisch nach ihren Eigenschaften verglichen, um für einen groben Überblick zu sorgen.
Auffällig hierbei ist, dass alle Programmiersprachen sowohl im Frontend als auch im Backend verwendet werden können, was nicht notwendigerweise bedeutet, dass das auch so praktiziert wird. Außerdem ist bei allen vorgestellten Programmiersprachen objektorientiertes Programmieren möglich beziehungsweise manche Sprachen bieten ein ähnliches Schema für Klassen.
Alle 5 Programmiersprachen sind zudem dynamisch typisiert.</description></item><item><title>6 Fazit</title><link>/programminglanguages/_6_fazit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_6_fazit/</guid><description>Es gibt nicht die eine Programmiersprache für die Webentwicklung. Jede Programmiersprache hat Vor- und Nachteile gegenüber einer anderen. Es ist schlicht notwendig zu entscheiden, für welchen Anwendungszweck welche Sprache angewendet werden soll. Des Weiteren ist zu berücksichtigen, dass es noch wesentlich mehr Programmiersprachen für die Webentwicklung gibt, welche in diesem Text aus Platzgründen nicht erwähnt wurden.
Einen aktuellen Blick auf die beliebtesten Sprachen und Frameworks im Bereich Frontend liefert ein Bericht aus dem Jahr 2020: https://tsh.</description></item><item><title>7 Literaturverzeichnis</title><link>/programminglanguages/_7_literaturverzeichnis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/programminglanguages/_7_literaturverzeichnis/</guid><description>“JavaScript”, Mozilla, Link: https://developer.mozilla.org/de/docs/Web/JavaScript (letzter Zugriff am: 12:02 30.12.2021) “JavaScript”, Wikipedia, Link: https://de.wikipedia.org/wiki/JavaScript (letzter Zugriff am 13:37 30.12.2021) “ECMAScript”, Wikipedia, Link: https://en.wikipedia.org/wiki/ECMAScript (letzter Zugriff am 13:37 30.12.2021) “Memory footprint”, Wikipedia, Link: https://en.wikipedia.org/wiki/Memory_footprint (letzter Zugriff am: 12:03 30.12.2021) “Was ist Typsicherheit?”, Dev Insider, Link: https://www.dev-insider.de/was-ist-typsicherheit-a-955933/ (letzter Zugriff am 13:33 30.12.2021) “Statische Typisierung”, Wikipedia, Link: https://de.wikipedia.org/wiki/Statische_Typisierung (letzter Zugriff am 13:33 30.12.2021) “Dynamische Typisierung”, Wikipedia, Link: https://de.wikipedia.org/wiki/Dynamische_Typisierung (letzter Zugriff am 13:34 30.12.2021) “Is JavaScript a (true) OOP language?</description></item><item><title>Attachments</title><link>/shortcodes/attachments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/attachments/</guid><description>The Attachments shortcode displays a list of files attached to a page.
Attachments BachGavotteShort.mp3 (357 KB) Carroll_AliceAuPaysDesMerveilles.pdf (175 KB) adivorciarsetoca00cape.pdf (361 KB) hugo.png (17 KB) movieselectricsheep-flock-244-32500-2.mp4 (340 KB) small_file.txt (48 B) Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages
If your page is a markdown file, attachements must be placed in a folder named like your page and ending with .</description></item><item><title>Button</title><link>/shortcodes/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/button/</guid><description>A button is a just a clickable button with optional icon.
{{% button href=&amp;quot;https://getgrav.org/&amp;quot; %}}Get Grav{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; %}}Get Grav with icon{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; icon-position=&amp;quot;right&amp;quot; %}}Get Grav with icon right{{% /button %}} Get Grav Get Grav with icon Get Grav with icon right</description></item><item><title>Credits</title><link>/credits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/credits/</guid><description>Contributors Lorem Ipsum
Mitwirkende Lorem Ipsum</description></item><item><title>Expand</title><link>/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/expand/</guid><description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
Expand me... Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description></item><item><title>Mermaid</title><link>/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/mermaid/</guid><description>Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.
Just insert your mermaid code in the mermaid shortcode and that&amp;rsquo;s it.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}} renders as
graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two] Sequence example {{&amp;lt; mermaid &amp;gt;}} sequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Hello John, how are you?</description></item><item><title>Notice</title><link>/shortcodes/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/notice/</guid><description>The notice shortcode shows 4 types of disclaimers to help you structure your page.
Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as
An information disclaimer
Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as
A tip disclaimer
Warning {{% notice warning %}} A warning disclaimer {{% /notice %}} renders as</description></item><item><title>page test</title><link>/shortcodes/children/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/children/test/</guid><description>This is a test demo child page</description></item><item><title>page test 3</title><link>/shortcodes/children/children-2/test3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/children/children-2/test3/</guid><description>This is a test 3 demo child page</description></item><item><title>Site param</title><link>/shortcodes/siteparam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/siteparam/</guid><description>siteparam shortcode is used to help you print values of site params.
For instance, in this current site, the editURL variable is used in config.toml
[params] editURL = &amp;#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/&amp;#34; Use the siteparam shortcode to display its value.
`editURL` Value : {{% siteparam &amp;quot;editURL&amp;quot; %}} is displayed as
editURL Value : https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/</description></item><item><title>Tabbed views</title><link>/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/shortcodes/tabs/</guid><description>Choose which content to see across the page. Very handy for providing code snippets for multiple languages or providing configuration in different formats.
Code example {{&amp;lt; tabs &amp;gt;}} {{% tab name=&amp;quot;python&amp;quot; %}} ```python print(&amp;quot;Hello World!&amp;quot;) ``` {{% /tab %}} {{% tab name=&amp;quot;R&amp;quot; %}} ```R &amp;gt; print(&amp;quot;Hello World!&amp;quot;) ``` {{% /tab %}} {{% tab name=&amp;quot;Bash&amp;quot; %}} ```Bash echo &amp;quot;Hello World!&amp;quot; ``` {{% /tab %}} {{&amp;lt; /tabs &amp;gt;}} Renders as:
python R Bash print(&amp;#34;Hello World!</description></item></channel></rss>